syntax = "proto3";
package sgn.distribution.v1;

option go_package = "github.com/celer-network/sgn-v2/x/distribution/types";
option (gogoproto.equal_all) = true;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "sgn/common/v1/common.proto";

// Params defines the set of params for the distribution module.
message Params {
  option (gogoproto.goproto_stringer) = false;
  string community_tax = 1 [
    (gogoproto.moretags) = "yaml:\"community_tax\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string base_proposer_reward = 2 [
    (gogoproto.moretags) = "yaml:\"base_proposer_reward\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string bonus_proposer_reward = 3 [
    (gogoproto.moretags) = "yaml:\"bonus_proposer_reward\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  bool withdraw_addr_enabled = 4 [(gogoproto.moretags) = "yaml:\"withdraw_addr_enabled\""];
  // claim_cooldown defines the minimal time between two reward claim requests
  google.protobuf.Duration claim_cooldown = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "claim_cooldown,omitempty",
    (gogoproto.moretags) = "yaml:\"claim_cooldown\""
  ];
}

// ValidatorHistoricalRewards represents historical rewards for a validator.
// Height is implicit within the store key.
// Cumulative reward ratio is the sum from the zeroth period
// until this period of rewards / tokens, per the spec.
// The reference count indicates the number of objects
// which might need to reference this historical entry at any point.
// ReferenceCount =
//    number of outstanding delegations which ended the associated period (and
//    might need to read that record)
//  + one per validator for the zeroth period, set on initialization
message ValidatorHistoricalRewards {
  repeated cosmos.base.v1beta1.DecCoin cumulative_reward_ratio = 1 [
    (gogoproto.moretags) = "yaml:\"cumulative_reward_ratio\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
  uint32 reference_count = 2 [(gogoproto.moretags) = "yaml:\"reference_count\""];
}

// ValidatorCurrentRewards represents current rewards and current
// period for a validator kept as a running counter and incremented
// each block as long as the validator's tokens remain constant.
message ValidatorCurrentRewards {
  repeated cosmos.base.v1beta1.DecCoin rewards = 1
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (gogoproto.nullable) = false];
  uint64 period = 2;
}

// ValidatorAccumulatedCommission represents accumulated commission
// for a validator kept as a running counter, can be withdrawn at any time.
message ValidatorAccumulatedCommission {
  repeated cosmos.base.v1beta1.DecCoin commission = 1
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (gogoproto.nullable) = false];
}

// ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
// for a validator inexpensive to track, allows simple sanity checks.
message ValidatorOutstandingRewards {
  repeated cosmos.base.v1beta1.DecCoin rewards = 1 [
    (gogoproto.moretags) = "yaml:\"rewards\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
}

// FeePool is the global fee pool for distribution.
message FeePool {
  repeated cosmos.base.v1beta1.DecCoin community_pool = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.moretags) = "yaml:\"community_pool\""
  ];
}

// CommunityPoolSpendProposal details a proposal for use of community funds,
// together with how many coins are proposed to be spent, and to which
// recipient account.
message CommunityPoolSpendProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  string title = 1;
  string description = 2;
  string recipient = 3;
  repeated cosmos.base.v1beta1.Coin amount = 4
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// DelegatorStartingInfo represents the starting info for a delegator reward
// period. It tracks the previous validator period, the delegation's amount of
// staking token, and the creation height.
message DelegatorStartingInfo {
  uint64 previous_period = 1 [(gogoproto.moretags) = "yaml:\"previous_period\""];
  string stake = 2 [
    (gogoproto.moretags) = "yaml:\"stake\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  uint64 height = 3 [(gogoproto.moretags) = "yaml:\"creation_height\"", (gogoproto.jsontag) = "creation_height"];
}

// DelegationDelegatorReward represents the properties
// of a delegator's delegation reward.
message DelegationDelegatorReward {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string validator_address = 1 [(gogoproto.moretags) = "yaml:\"validator_address\""];

  repeated cosmos.base.v1beta1.DecCoin reward = 2
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (gogoproto.nullable) = false];
}

// StakingRewardInfo describes the cumulative and claimed staking reward amount for a delegator.
message StakingRewardInfo {
  // cumulative_reward_amount defines the cumulative staking reward amount.
  cosmos.base.v1beta1.DecCoin cumulative_reward_amount = 1
      [(gogoproto.moretags) = "yaml:\"cumulative_reward_amount\"", (gogoproto.nullable) = false];
  // claimed_reward_amount defines the claimed staking reward amount.
  cosmos.base.v1beta1.DecCoin claimed_reward_amount = 2
      [(gogoproto.moretags) = "yaml:\"claimed_reward_amount\"", (gogoproto.nullable) = false];
}

// StakingRewardClaimInfo describes the staking reward claim metadata and details for a recipient.
message StakingRewardClaimInfo {
  // recipient defines the Ethereum address of the reward recipient.
  string recipient = 1;

  // last_claim_time defines the last time a reward claim was signed by the validators.
  google.protobuf.Timestamp last_claim_time = 2
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"last_claim_time\""];

  // cumulative_reward_amount defines the cumulative rewards claimable on Ethereum.
  cosmos.base.v1beta1.DecCoin cumulative_reward_amount = 3
      [(gogoproto.moretags) = "yaml:\"cumulative_reward_amount\"", (gogoproto.nullable) = false];

  // reward_proto_bytes defines the serialized reward protobuf to be submitted to Ethereum.
  bytes reward_proto_bytes = 4 [(gogoproto.moretags) = "yaml:\"reward_proto_bytes\""];

  // signatures defines the signatures to be verified on Ethereum.
  repeated sgn.common.v1.Signature signatures = 5 [(gogoproto.moretags) = "yaml:\"signatures\"", (gogoproto.nullable) = false];
}

// CBridgeFeeShareInfo describes the claimable cBridge fee share amount for a delegator.
message CBridgeFeeShareInfo {
  // claimable_fee_amounts defines the claimable fee amounts.
  repeated cosmos.base.v1beta1.DecCoin claimable_fee_amounts = 1 [
    (gogoproto.moretags) = "yaml:\"claimable_fee_amounts\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
}

// -------------------- Governance Proposals --------------------

// CommunityPoolSpendProposalWithDeposit defines a CommunityPoolSpendProposal
// with a deposit
message CommunityPoolSpendProposalWithDeposit {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string title = 1 [(gogoproto.moretags) = "yaml:\"title\""];
  string description = 2 [(gogoproto.moretags) = "yaml:\"description\""];
  string recipient = 3 [(gogoproto.moretags) = "yaml:\"recipient\""];
  string amount = 4 [(gogoproto.moretags) = "yaml:\"amount\""];
  string deposit = 5 [(gogoproto.moretags) = "yaml:\"deposit\""];
}
