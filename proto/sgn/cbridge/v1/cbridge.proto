syntax = "proto3";
package sgn.cbridge.v1;

import "gogoproto/gogo.proto";

option go_package = "github.com/celer-network/sgn-v2/x/cbridge/types";

// ========== params
message Params {
  MultiChainAssetParam multi_chain_asset_param = 1[(gogoproto.nullable) = false];
}

message MultiChainAssetParam {
  repeated ChainAsset chain_asset = 1 [(gogoproto.nullable) = false];
}

message ChainAsset {
  uint64 chain_id = 1;
  string token_symbol = 2;
  string token_addr = 3;
  uint64 decimal = 4;
  string max_fee_amount = 5; // max fee, use string to avoid uint64 not enough for 18 decimal tokens
}

// ========== for sync propose
// to be included in sync propose update, broadcast by syncer to tell others
// an onchain event happened. for completeness we include chainid, even though
// propose update also has it
message OnChainEvent {
  uint64 chainid = 1;
  string evtype = 2; // see cbr_monitor.go for const strings
  bytes elog = 3; // serialized json string, use bytes for easier marshal/unmarshal
}

// ========== onchain tx data
// same proto used by solidity, serialized bytes are signed by sgn nodes then submit onchain to relay function
// x/cbridge will emit tendermint event, relayer monitor and send msg w/ its signature
message RelayOnChain {
  bytes sender = 1;
  bytes receiver = 2;
  bytes token = 3;
  bytes amount = 4;
  uint64 src_chain_id = 5;
  uint64 dst_chain_id = 6;
  bytes src_transfer_id = 7;
}

// data when call withdraw onchain
message WithdrawOnchain {
  uint64 chainid = 1;
  uint64 seqnum = 2; // global unique across chains, assigned by sgn
  bytes receiver = 3;
  bytes token = 4; // token address
  bytes amount = 5;
}

// sorted by signer address
message SortedSigners {
  repeated AddrAmt signers = 1;
}

message AddrAmt {
  bytes addr = 1; // eth address, NOT hex string
  bytes amt = 2; // big.Int.Bytes(), NO negative!
}

// ========== x/cbridge kv value types
// for src transfer id
// normal status flow: after sgn applied user's Send event, status is OK_TO_RELAY. then after apply Relay event
// status is SUCCESS
// can't relay flow: after apply send, status will be BAD_xxx, and there'll be no relay. so user need to InitWithdraw, status becomes refund_requested
// when sgn apply withdrawDone event, status becomes REFUND_DONE
enum XferStatus {
  UNKNOWN = 0; // use as default for unknown xfer
  // normal flow only has ok then success
  OK_TO_RELAY = 1; // x/cbrige emit relay, waiting for sgn nodes to send sig, then sgn will submit relay tx onchain
  SUCCESS = 2; // applied onchain relay event

  // can't relay flow status
  BAD_LIQUIDITY = 3; // can't complete xfer due to low dst chain liquidity or equal value dest amount is 0
  BAD_SLIPPAGE = 4; // slippage larger than user specified max
  // refund, using withdraw flow
  REFUND_REQUESTED = 5; // user/gateway called InitWithdraw, XferRefundKey has withdraw seq num
  REFUND_DONE = 6; // applied onchain withdrawdone event
}

// saved and updated when new sig is added
message XferRelay {
  bytes relay = 1; //serialized RelayOnChain
  // each sgn node send SendMySig and x/cbridge add to sigs,
  // NOTE sigs need to be sorted by recovered signer address
  repeated AddrSig sorted_sigs = 2;
}

message WithdrawDetail {
  bytes wd_onchain = 1; //serialized WithdrawOnchain
  repeated AddrSig sorted_sigs = 2; // sorted sigs
  bool completed = 3; // if set to true, means applied withdrawDone event
  int64 last_req_time = 4; // to anti-dos, avoid constant re-signing. if last_req_time is still within x seconds of now, won't resign
  bytes xferId = 5; // if refund user transfer, add xfer id here so when we see withdraw done, we'll update xfer status
}

message AddrSig {
  bytes addr = 1; // eth address recovered from sig and data in x/cbridge, eth.Addr[:], not hex string!
  bytes sig = 2;
}