syntax = "proto3";
package sgn.cbridge.v1;

option go_package = "github.com/celer-network/sgn-v2/x/cbridge/types";

// Query defines the gRPC querier service.
service Query {
    rpc ChainTokensConfig (ChainTokensConfigRequest) returns (ChainTokensConfigResponse) {
    }

    rpc GetFee (GetFeeRequest) returns (GetFeeResponse) {
    }

    rpc QueryTransferStatus (QueryTransferStatusRequest) returns (QueryTransferStatusResponse) {
    }

    //LP
    rpc LiquidityDetailList (LiquidityDetailListRequest) returns (LiquidityDetailListResponse) {
    }

    rpc QueryAddLiquidityStatus (QueryAddLiquidityStatusRequest) returns (QueryLiquidityStatusResponse) {
    }

    rpc QueryWithdrawLiquidityStatus (QueryWithdrawLiquidityStatusRequest) returns (QueryLiquidityStatusResponse) {
    }
}

message ChainTokensConfigRequest {
}

message ChainTokensConfigResponse {
    map<uint64, Assets> chain_tokens = 2; //map<chain_id, Assets>
}

message Assets {
    repeated AssetPerChain assets = 1;
}
message AssetPerChain {
    Token token = 1;
    string max_amt = 2;
    string contract_addr = 3;
}

message GetFeeRequest {
    uint64 src_chain_id = 1;
    uint64 dst_chain_id = 2;
    string src_token_addr = 3;
    string amt = 4; //on_src_chain
}

message GetFeeResponse {
    string eq_value_token_amt = 2; //on_dst_chain
    string fee = 3; //on_dst_chain
    uint64 decimal = 4; //on_dst_chain
}

message QueryTransferStatusRequest {
    repeated string transfer_id = 1;
}

message QueryTransferStatusResponse {
    map<string, TransferHistoryStatus> status = 2; //map<transfer_id, status>
}

message LiquidityDetail {
    uint64 chain_id = 1;
    Token token = 2;
    string usr_liquidity = 3; // current liquidity of user
    string usr_lp_fee_earning = 4; // current lp earning of user
    string total_liquidity = 5; // the LPâ€™s liquidity for this (chain, token)
    double lp_fee_rate = 6; // LP fee percentage: A portion (X%) of each {token_symbol} transfer to {chain_name} goes to liquidity providers
}
message ChainTokenAddrPair {
    uint64 chain_id = 1;
    string token_addr = 2;
}
message LiquidityDetailListRequest {
    string lp_addr = 1;
    repeated ChainTokenAddrPair chain_token = 2;
}

message LiquidityDetailListResponse {
    repeated LiquidityDetail liquidity_detail = 2;
}

message QueryAddLiquidityStatusRequest {
    uint64 chain_id = 1;
    uint64 seq_num = 2;
}

message QueryWithdrawLiquidityStatusRequest {
    uint64 seq_num = 1;
}

message QueryLiquidityStatusResponse {
    LPHistoryStatus status = 2;
}

message Token {
    string symbol = 1;
    string address = 2;
    int32 decimal = 3;
}

enum LPHistoryStatus {
    LP_UNKNOWN = 0;
    LP_WAITING_FOR_SGN = 1;
    LP_WAITING_FOR_LP = 2;
    LP_SUBMITTING = 3;
    LP_COMPLETED = 4;
    LP_FAILED = 5;
}

enum TransferHistoryStatus {
    TRANSFER_UNKNOWN = 0;
    TRANSFER_SUBMITTING = 1;
    TRANSFER_FAILED = 2;
    TRANSFER_WAITING_FOR_FUND_RELEASE = 3;
    TRANSFER_COMPLETED = 4;
    TRANSFER_TO_BE_REFUNDED = 5;
    TRANSFER_REQUESTING_REFUND = 6;
    TRANSFER_REFUND_TO_BE_CONFIRMED = 7;
    TRANSFER_CONFIRMING_YOUR_REFUND = 8;
    TRANSFER_REFUNDED = 9;
}
