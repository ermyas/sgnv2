syntax = "proto3";
package sgn.cbridge.v1;

import "sgn/gateway/v1/gateway.proto";

option go_package = "github.com/celer-network/sgn-v2/x/cbridge/types";

// Query defines the gRPC querier service.
service Query {
    rpc ChainTokensConfig (ChainTokensConfigRequest) returns (ChainTokensConfigResponse) {
    }

    rpc GetFee (GetFeeRequest) returns (GetFeeResponse) {
    }

    rpc QueryTransferStatus (QueryTransferStatusRequest) returns (QueryTransferStatusResponse) {
    }

    //LP
    rpc LiquidityDetailList (LiquidityDetailListRequest) returns (LiquidityDetailListResponse) {
    }

    rpc QueryAddLiquidityStatus (QueryAddLiquidityStatusRequest) returns (gateway.v1.QueryLiquidityStatusResponse) {
    }

    rpc QueryWithdrawLiquidityStatus (QueryWithdrawLiquidityStatusRequest) returns (gateway.v1.QueryLiquidityStatusResponse) {
    }
}

message ChainTokensConfigRequest {
}

message ChainTokensConfigResponse {
    gateway.v1.ErrMsg err = 1;
    map<uint64, Assets> chain_tokens = 2; //map<chain_id, Assets>
}

message Assets {
    repeated AssetPerChain assets = 1;
}
message AssetPerChain {
    gateway.v1.Token token = 1;
    string max_amt = 2;
    string contract_addr = 3;
}

message GetFeeRequest {
    uint64 src_chain_id = 1;
    uint64 dst_chain_id = 2;
    string src_token_addr = 3;
    string amt = 4; //on_src_chain
}

message GetFeeResponse {
    gateway.v1.ErrMsg err = 1;
    string eq_value_token_amt = 2; //on_dst_chain
    string fee = 3; //on_dst_chain
    uint64 decimal = 4; //on_dst_chain
}

message QueryTransferStatusRequest {
    repeated string transfer_id = 1;
}

message QueryTransferStatusResponse {
    gateway.v1.ErrMsg err = 1;
    map<string, gateway.v1.TransferHistoryStatus> status = 2; //map<transfer_id, status>
}

message LiquidityDetail {
    uint64 chain_id = 1;
    gateway.v1.Token token = 2;
    string usr_liquidity = 3; // current liquidity of user
    string usr_lp_fee_earning = 4; // current lp earning of user
    string total_liquidity = 5; // the LPâ€™s liquidity for this (chain, token)
    double lp_fee_rate = 6; // LP fee percentage: A portion (X%) of each {token_symbol} transfer to {chain_name} goes to liquidity providers
}
message LiquidityDetailListRequest {
    string addr = 1;
}

message LiquidityDetailListResponse {
    gateway.v1.ErrMsg err = 1;
    repeated LiquidityDetail liquidity_detail = 2;
}

message QueryAddLiquidityStatusRequest {
    uint64 chain_id = 1;
    uint64 seq_num = 2;
}

message QueryWithdrawLiquidityStatusRequest {
    uint64 seq_num = 1;
}
