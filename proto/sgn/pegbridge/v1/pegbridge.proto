syntax = "proto3";
package sgn.pegbridge.v1;

option go_package = "github.com/celer-network/sgn-v2/x/pegbridge/types";
option (gogoproto.equal_all) = true;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "sgn/common/v1/common.proto";

// Params defines the set of params for the pegbridge module.
message Params {
  option (gogoproto.goproto_stringer) = false;

  // trigger_sign_cooldown defines the minimal time between two trigger signing requests.
  google.protobuf.Duration trigger_sign_cooldown = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "trigger_sign_cooldown,omitempty",
    (gogoproto.moretags) = "yaml:\"trigger_sign_cooldown\""
  ];
}

message ContractInfo {
  sgn.common.v1.ContractInfo contract = 1
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"pegged_token_bridges\""];
  uint32 version = 2 [(gogoproto.moretags) = "yaml:\"version\""];
}

// PegConfig describes the pegbridge specific configs.
message PegConfig {
  // pegged_token_bridges defines the PeggedTokenBridge contracts.
  repeated ContractInfo pegged_token_bridges = 1
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"pegged_token_bridges\""];

  // original_token_vaults defines the OriginalTokenVault contracts.
  repeated ContractInfo original_token_vaults = 2
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"original_token_vaults\""];

  // orig_pegged_pairs defines the original-pegged token pairs.
  repeated OrigPeggedPair orig_pegged_pairs = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"orig_pegged_pairs\""];
}

// OrigPeggedPair describes a pair of original-pegged ERC20 tokens on two EVM-compatible chains.
message OrigPeggedPair {
  // orig defines the original token.
  sgn.common.v1.ERC20Token orig = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"orig\""];

  // pegged defines the pegged token.
  sgn.common.v1.ERC20Token pegged = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"pegged\""];

  // mint_fee_bps defines the fee percentage in points to mint pegged tokens. 1 pip = 0.0001%
  uint32 mint_fee_pips = 3 [(gogoproto.moretags) = "yaml:\"mint_fee_pips\""];

  // max_mint_fee defines the max mint fee chargeable.
  string max_mint_fee = 4 [(gogoproto.moretags) = "yaml:\"max_mint_fee\""];

  // burn_fee_bps defines the fee percentage in points to burn pegged tokens. 1 pip = 0.0001%
  uint32 burn_fee_pips = 5 [(gogoproto.moretags) = "yaml:\"burn_fee_pips\""];

  // max_burn_fee defines the max burn fee chargeable.
  string max_burn_fee = 6 [(gogoproto.moretags) = "yaml:\"max_burn_fee\""];

  // supply_cap defines the max mint amount of the bridge used by this pair
  string supply_cap = 7 [(gogoproto.moretags) = "yaml:\"supply_cap\""];

  uint32 vault_version = 8 [(gogoproto.moretags) = "yaml:\"vault_version\""];

  uint32 bridge_version = 9 [(gogoproto.moretags) = "yaml:\"bridge_version\""];
}

// PeggedOrigIndex describes the reverse lookup index from a pegged token to the original token, if exists.
message PeggedOrigIndex {
  // pegged defines the pegged token info.
  sgn.common.v1.ContractInfo pegged = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"pegged\""];

  // orig defines the original token info.
  sgn.common.v1.ContractInfo orig = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"orig\""];
}

// DepositInfo describes the info for an on-chain deposit tx submitted by a user to OriginalTokenVaults.
message DepositInfo {
  option (gogoproto.goproto_stringer) = false;

  // chain_id defines the EVM chain ID on which the deposit happened.
  uint64 chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];

  // deposit_id defines the deposit ID.
  bytes deposit_id = 2 [(gogoproto.moretags) = "yaml:\"deposit_id\""];

  // mint_id defines the corresponding mint ID.
  bytes mint_id = 3 [(gogoproto.moretags) = "yaml:\"mint_id\""];

  uint32 vault_version = 4 [(gogoproto.moretags) = "yaml:\"vault_version\""];
}

// MintInfo describes the info for an on-chain mint request to be submitted to PeggedTokenBridge.
message MintInfo {
  option (gogoproto.goproto_stringer) = false;

  // chain_id defines the EVM chain ID to mint the pegged token.
  uint64 chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];

  // mint_proto_bytes defines the serialized mint protobuf to be submitted to PeggedTokenBridge.
  bytes mint_proto_bytes = 2 [(gogoproto.moretags) = "yaml:\"mint_proto_bytes\""];

  // signatures defines the signatures to be verified on PeggedTokenBridge.
  repeated sgn.common.v1.Signature signatures = 3 [(gogoproto.moretags) = "yaml:\"signatures\"", (gogoproto.nullable) = false];

  // base_fee defines the base fee charged for the mintage.
  string base_fee = 4 [(gogoproto.moretags) = "yaml:\"base_fee\""];

  // percentage_fee defines the percentage fee charged for the mintage.
  string percentage_fee = 5 [(gogoproto.moretags) = "yaml:\"percentage_fee\""];

  // success defines whether the minting has been completed on-chain.
  bool success = 6 [(gogoproto.moretags) = "yaml:\"success\""];

  int64 last_req_time = 7;  // to anti-dos, avoid constant re-signing. if last_req_time is still within x seconds of now, won't resign

  uint32 bridge_version = 8 [(gogoproto.moretags) = "yaml:\"bridge_version\""];;
}

// BurnInfo describes the info for an on-chain burn tx submitted by a user to PeggedTokenBridge.
message BurnInfo {
  option (gogoproto.goproto_stringer) = false;

  // chain_id defines the EVM chain ID on which the burn happened.
  uint64 chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];

  // burn_id defines the burn ID.
  bytes burn_id = 2 [(gogoproto.moretags) = "yaml:\"burn_id\""];

  // withdraw_id defines the corresponding withdraw ID.
  bytes withdraw_id = 3 [(gogoproto.moretags) = "yaml:\"withdraw_id\""];

  // mint_id defines the corresponding mint ID.
  bytes mint_id = 4 [(gogoproto.moretags) = "yaml:\"mint_id\""];

  uint32 bridge_version = 5 [(gogoproto.moretags) = "yaml:\"bridge_version\""];;
}

// WithdrawInfo describes the info for an on-chain withdraw request to be submitted to OriginalTokenVault.
message WithdrawInfo {
  option (gogoproto.goproto_stringer) = false;

  // chain_id defines the EVM chain ID to withdraw the original token
  uint64 chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];

  // withdraw_proto_bytes defines the serialized withdraw protobuf to be submitted to OriginalTokenVault.
  bytes withdraw_proto_bytes = 2 [(gogoproto.moretags) = "yaml:\"withdraw_proto_bytes\""];

  // signatures defines the signatures to be verified on OriginalTokenVault.
  repeated sgn.common.v1.Signature signatures = 3 [(gogoproto.moretags) = "yaml:\"signatures\"", (gogoproto.nullable) = false];

  // base_fee defines the base fee charged for the withdrawal.
  string base_fee = 4 [(gogoproto.moretags) = "yaml:\"base_fee\""];

  // percentage_fee defines the percentage fee charged for the withdrawal.
  string percentage_fee = 5 [(gogoproto.moretags) = "yaml:\"percentage_fee\""];

  // success defines whether the withdrawal has been completed on-chain.
  bool success = 6 [(gogoproto.moretags) = "yaml:\"success\""];

  int64 last_req_time = 7;  // to anti-dos, avoid constant re-signing. if last_req_time is still within x seconds of now, won't resign

  uint32 vault_version = 8 [(gogoproto.moretags) = "yaml:\"vault_version\""];
}

// FeeClaimInfo describes the info for a pegbridge fee claim.
message FeeClaimInfo {
  // withdraw_id defines the corresponding withdraw ID
  bytes withdraw_id = 1 [(gogoproto.moretags) = "yaml:\"withdraw_id\""];

  uint32 vault_version = 2 [(gogoproto.moretags) = "yaml:\"vault_version\""];
}

// MintOnChain describes the mint protobuf to be submitted on-chain.
message MintOnChain {
  option (gogoproto.goproto_stringer) = false;

  // token defines the token address.
  bytes token = 1;

  // account defines the account address that the tokens should be mint to.
  bytes account = 2;

  // amount defines the mint amount.
  bytes amount = 3;

  // depositor defines the account address that made deposit at the original token chain.
  // Not applicable to refund claims and governance-triggered mints.
  bytes depositor = 4;

  // ref_chain_id defines the reference chain ID, taking values of:
  // 1. The common case of deposit-mint: the chain ID on which the corresponding deposit happened;
  // 2. Pegbridge refund claim: the chain ID on which the corresponding burn happened;
  // 3. Governance-triggered mint: the chain ID on which the minting will happen.
  uint64 ref_chain_id = 5;

  // ref_id defines a unique reference ID, taking values of:
  // 1. The common case of deposit-mint: the deposit ID;
  // 2. Refund for wrong burn: the burn ID;
  // 3. Governance-triggered mint: ID as needed.
  bytes ref_id = 6;
}

// WithdrawOnChain describes the withdraw protobuf to be submitted on-chain.
message WithdrawOnChain {
  option (gogoproto.goproto_stringer) = false;

  // token defines the token address.
  bytes token = 1;

  // receiver defines the account address that the tokens should be withdrawn to.
  bytes receiver = 2;

  // amount defines the withdraw amount.
  bytes amount = 3;

  // burn_account defines the account that burned the pegged token.
  // Not applicable to fee claims, refund claims and governance-triggered withdrawals.
  bytes burn_account = 4;

  // ref_chain_id defines the reference chain ID, taking values of:
  // 1. The common case of burn-withdraw: the chain ID on which the corresponding burn happened;
  // 2. Pegbridge fee claim: zero / Not applicable;
  // 3. Pegbridge refund claim: the chain ID on which the corresponding deposit happened;
  // 4. Other governance-triggered withdrawals: the chain ID on which the withdrawal will happen.
  uint64 ref_chain_id = 5;

  // ref_id defines a unique reference ID, taking values of:
  // 1. The common case of burn-withdraw: the burn ID;
  // 2. Pegbridge fee claim: a per-account nonce;
  // 3. Refund for wrong deposit: the deposit ID;
  // 4. Governance-triggered withdrawal: ID as needed.
  bytes ref_id = 6;
}

// -------------------- Governance Proposals --------------------

// PegProposal describes a pegbridge config proposal, note it must be a whole json
message PegProposal {
  option (cosmos_proto.implements_interface) = "Content";
  option (gogoproto.equal) = false;

  string title = 1;
  string description = 2;
  PegConfig peg_config = 3;
  // deposit defines the amount for MsgSubmitProposal
  string deposit = 4 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
}

message PairDeleteProposal {
  option (cosmos_proto.implements_interface) = "Content";
  option (gogoproto.equal) = false;

  string title = 1;
  string description = 2;
  OrigPeggedPair pair_to_delete = 3;
  // deposit defines the amount for MsgSubmitProposal
  string deposit = 4 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
}

// TotalSupplyUpdateProposal describes a proposal to update the current totalSupply of a certain pair.
// No need to supply a full-content pair, only orig and pegged will be used.
// This proposal is only used for backward compatibility (manually set the total supply for pegged tokens
// that were already supported before this supply tracking feature is launched).
message TotalSupplyUpdateProposal {
  option (cosmos_proto.implements_interface) = "Content";
  option (gogoproto.equal) = false;

  string title = 1;
  string description = 2;
  OrigPeggedPair pair = 3;
  // total supply amount that will be set for the pair
  string total_supply = 4;
  // deposit defines the amount for MsgSubmitProposal
  string deposit = 5 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
}
