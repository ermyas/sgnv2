syntax = "proto3";
package sgn.pegbridge.v1;

option go_package = "github.com/celer-network/sgn-v2/x/pegbridge/types";
option (gogoproto.equal_all) = true;

import "gogoproto/gogo.proto";

// Msg defines the Msg service.
service Msg {
  // SignMint defines a method for validators to co-sign a mint request to
  // a PeggedTokenBridge contract.
  rpc SignMint(MsgSignMint) returns (MsgSignMintResponse);

  // SignWithdraw defines a method for validators to co-sign a withdraw request to
  // an OriginalTokenVault contract.
  rpc SignWithdraw(MsgSignWithdraw) returns (MsgSignWithdrawResponse);

  // TriggerSignMint defines a method to trigger validators to co-sign a mint request.
  // Used if automatic event syncing failed.
  rpc TriggerSignMint(MsgTriggerSignMint) returns (MsgTriggerSignMintResponse);

  // TriggerSignWithdraw defines a method to trigger validators to co-sign a withdraw request.
  // Used if automatic event syncing failed.
  rpc TriggerSignWithdraw(MsgTriggerSignWithdraw) returns (MsgTriggerSignWithdrawResponse);

  // ClaimFee defines a method for SGN delegators to trigger a claim of pegbridge fee.
  rpc ClaimFee(MsgClaimFee) returns (MsgClaimFeeResponse);

  // ClaimRefund defines a method to trigger a refund process
  rpc ClaimRefund(MsgClaimRefund) returns (MsgClaimRefundResponse);
}

// MsgSignMint signs a mint request.
message MsgSignMint {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // mint_id defines the mint ID calculated with
  // keccak256(abi.encodePacked("mint", request.token, request.account, request.amount, request.nonce));
  string mint_id = 1 [(gogoproto.moretags) = "yaml:\"mint_id\""];

  // sender defines the SGN account sending the signing Msg.
  string sender = 2 [(gogoproto.moretags) = "yaml:\"sender\""];

  // signature defines the signature.
  bytes signature = 3 [(gogoproto.moretags) = "yaml:\"signature\""];
}

// MsgSignMintResponse defines the Msg/SignMint response type.
message MsgSignMintResponse {}

// MsgSignWithdraw signs a mint request.
message MsgSignWithdraw {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // withdraw_id defines the withdraw ID calculated with
  // keccak256(abi.encodePacked(request.receiver, request.token, request.amount, request.burnChainId, request.nonce)
  string withdraw_id = 1 [(gogoproto.moretags) = "yaml:\"withdraw_id\""];

  // sender defines the SGN account sending the signing Msg.
  string sender = 2 [(gogoproto.moretags) = "yaml:\"sender\""];

  // signature defines the signature.
  bytes signature = 3 [(gogoproto.moretags) = "yaml:\"signature\""];
}

// MsgSignWithdrawResponse defines the Msg/SignWithdraw response type.
message MsgSignWithdrawResponse {}

message MsgTriggerSignMint {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // mint_id defines the mint ID
  string mint_id = 1;

  // sender defines the SGN account sending the trigger Msg.
  string sender = 2;
}

message MsgTriggerSignMintResponse {}

message MsgTriggerSignWithdraw {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // withdraw_id defines the withdraw ID
  string withdraw_id = 1;

  // sender defines the SGN account sending the trigger Msg.
  string sender = 2;
}

message MsgTriggerSignWithdrawResponse {}

// MsgClaimFee defines the Msg/ClaimFee request type.
message MsgClaimFee {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // delegator_address defines the delegator's Ethereum address.
  string delegator_address = 1 [(gogoproto.moretags) = "yaml:\"delegator_address\""];

  // chain_id defines the EVM chain ID for which the fees are claimed.
  uint64 chain_id = 2 [(gogoproto.moretags) = "yaml:\"chain_id\""];

  // token_address defines the fee token address.
  string token_address = 3 [(gogoproto.moretags) = "yaml:\"token_address\""];

  // nonce defines a per-account nonce for the claim. Can be timestamp in practice.
  uint64 nonce = 4 [(gogoproto.moretags) = "yaml:\"nonce\""];

  // signature defines a delegator signature of:
  // keccak256(abi.encodePacked("PegClaimFee", delegator_address, chain_id, token_address, nonce))
  bytes signature = 5 [(gogoproto.moretags) = "yaml:\"signature\""];

  // sender defines the SGN account sending the claim Msg.
  string sender = 6 [(gogoproto.moretags) = "yaml:\"sender\""];
}

// MsgClaimFeeResponse defines the Msg/ClaimFee response type.
message MsgClaimFeeResponse {}

// MsgClaimRefund defines the Msg/ClaimRefund request type.
message MsgClaimRefund {
  // deposit_id defines the deposit ID
  string deposit_id = 1 [(gogoproto.moretags) = "yaml:\"deposit_id\""];
  // signature defines a user signature of deposit_id
  bytes signature = 2 [(gogoproto.moretags) = "yaml:\"signature\""];
  // sender defines the SGN account sending this Msg
  string sender = 3 [(gogoproto.moretags) = "yaml:\"sender\""];
}

// MsgClaimRefundResponse defines the Msg/ClaimRefund response type.
message MsgClaimRefundResponse {
}
