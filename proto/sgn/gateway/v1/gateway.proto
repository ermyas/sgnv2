syntax = "proto3";
package sgn.gateway.v1;

import "google/api/annotations.proto";

option go_package = "github.com/celer-network/sgn-v2/gateway/webapi";

service Web {
    // current only for slippage_tolerance setting
    rpc SetAdvancedInfo (SetAdvancedInfoRequest) returns (SetAdvancedInfoResponse) {
        option (google.api.http) = {
      post: "/v1/setAdvancedInfo"
      body: "*"
    };
    }

    // get chain and token selector
    // after getting these info, remember to record them(especially decimal)
    rpc GetTransferConfigs (GetTransferConfigsRequest) returns (GetTransferConfigsResponse) {
        option (google.api.http) = {
      get: "/v1/getTransferConfigs"
    };
    }

    // estimate transfer fee
    rpc EstimateAmt (EstimateAmtRequest) returns (EstimateAmtResponse) {
        option (google.api.http) = {
      get: "/v1/estimateAmt"
    };
    }

    // same as V1, call this api after user confirm transfer on metamask
    rpc MarkTransferBegin (MarkTransferBeginRequest) returns (MarkTransferBeginResponse) {
        option (google.api.http) = {
      post: "/v1/markTransferBegin"
      body: "*"
    };
    }

    //LP
    // get LP table info
    rpc GetLPInfoList (GetLPInfoListRequest) returns (GetLPInfoListResponse) {
        option (google.api.http) = {
      get: "/v1/getLPInfoList"
    };
    }

    rpc MarkLiquidityAdd (MarkLiquidityAddRequest) returns (MarkLiquidityAddResponse) {
        option (google.api.http) = {
      post: "/v1/markLiquidityAdd"
      body: "*"
    };
    }

    //https://github.com/celer-network/sgn-v2/blob/main/proto/sgn/cbridge/v1/tx.proto#L10
    // remove liquidity or refund transfer calling this api
    rpc WithdrawLiquidity (WithdrawLiquidityRequest) returns (WithdrawLiquidityResponse) {
        option (google.api.http) = {
      post: "/v1/withdrawLiquidity"
      body: "*"
    };
    }

    // bcz it's time cost for sgn voting, so we need a polling api to check the status
    rpc QueryLiquidityStatus (QueryLiquidityStatusRequest) returns (QueryLiquidityStatusResponse) {
        option (google.api.http) = {
      get: "/v1/queryLiquidityStatus"
    };
    }

    //History
    rpc TransferHistory (TransferHistoryRequest) returns (TransferHistoryResponse) {
        option (google.api.http) = {
      get: "/v1/transferHistory"
    };
    }

    rpc LPHistory (LPHistoryRequest) returns (LPHistoryResponse) {
        option (google.api.http) = {
      get: "/v1/lpHistory"
    };
    }
}

message Chain {
    uint64 id = 1;
    string name = 2;
    string icon = 3;
}

message ChainTokenInfo {
    repeated TokenInfo token = 1;
}

message Token {
    string symbol = 1;
    string address = 2;
    int32 decimal = 3;
}

message TokenInfo {
    Token token = 1;
    string name = 2;
    string icon = 3;
    string max_amt = 4; // showing in token list, max bridge amount, only for dst chain
    string contract_addr = 5; // contract addr
}

message TransferInfo {
    Chain chain = 1;
    Token token = 2;
    string amount = 3;
}

message SetAdvancedInfoRequest {
    string addr = 1;
    uint32 slippage_tolerance = 5; // slippage * 1M, eg. 0.5% is 5000
}

message SetAdvancedInfoResponse {
    ErrMsg err = 1;
}


message GetTransferConfigsRequest {

}

message GetTransferConfigsResponse {
    ErrMsg err = 1;
    repeated Chain chains = 2;
    map<uint64, ChainTokenInfo> chain_token = 3; //map<chain_id, ChainTokenInfo>
}

message EstimateAmtRequest {
    uint64 src_chain_id = 1;
    uint64 dst_chain_id = 2;
    string token_symbol = 3;
    string amt = 4;
}

message EstimateAmtResponse {
    ErrMsg err = 1;
    string eq_value_token_amt = 2; //on_dst_chain, to cal minimum_received_amt = eq_value_token_amt*(1-slippage_tolerance) -  fee
    float bridge_rate = 3;
    string fee = 4; //on_dst_chain
    uint32 slippage_tolerance = 5; // slippage * 1M, eg. 0.5% is 5000
}

message MarkTransferBeginRequest {
    string transfer_id = 1;
    TransferInfo src_send_info = 2;
    TransferInfo dst_min_received_info = 3;
    string addr = 4;
}

message MarkTransferBeginResponse {
    ErrMsg err = 1;
}

message GetLPInfoListRequest {
    string addr = 1;
}

message LPInfo {
    Chain chain = 1;
    TokenInfo token = 2;
    double liquidity = 3; // current liquidity of user in usd
    bool has_farming_sessions = 4;
    double lp_fee_earning = 5; // in usd
    double farming_reward_earning = 6; // in usd
    double tvl = 7; // in usd
    double volume_24h = 8; //gateway cal this based on local db
    double lp_fee_rate = 9;
    double lp_fee_earning_apy = 10;
    double farming_apy = 11;
}
message GetLPInfoListResponse {
    ErrMsg err = 1;
    repeated LPInfo lp_info = 2;
}

message WithdrawLiquidityRequest {
    string transfer_id = 1; // if set, user refund src transfer id
    // lp withdraw, only set if xfer_id is nil
    string receiver_addr = 2;
    string amount = 3;
    string token_addr = 4;
    uint64 chain_id = 5;

    string creator = 6; // check with junda what it is
}

message WithdrawLiquidityResponse {
    ErrMsg err = 1;
    uint64 seq_num = 2; // nonce
    string withdraw_id = 3;
}

message MarkLiquidityAddRequest {
    string lp_addr = 1;
    string amt_added = 2;
    string token_addr = 3;
    uint64 chain_id = 4;
    uint64 seq_num = 5;
}

message MarkLiquidityAddResponse {
    ErrMsg err = 1;
}

message QueryLiquidityStatusRequest {
    string withdraw_id = 1;
}

message QueryLiquidityStatusResponse {
    ErrMsg err = 1;
    LPHistoryStatus status = 2;
}

enum TransferHistoryStatus {
    TRANSFER_UNKNOWN = 0;
    TRANSFER_SUBMITTING = 1;
    TRANSFER_FAILED = 2;
    TRANSFER_WAITING_FOR_FUND_RELEASE = 3;
    TRANSFER_COMPLETED = 4;
    TRANSFER_TO_BE_REFUNDED = 5;
    TRANSFER_REQUESTING_REFUND = 6;
    TRANSFER_REFUND_TO_BE_CONFIRMED = 7;
    TRANSFER_CONFIRMING_YOUR_REFUND = 8;
    TRANSFER_REFUNDED = 9;
}

enum LPHistoryStatus {
    LP_UNKNOWN = 0;
    LP_WAITING_FOR_SGN = 1;
    LP_WAITING_FOR_LP = 2;
    LP_SUBMITTING = 3;
    LP_COMPLETED = 4;
    LP_FAILED = 5;
}
enum LPType {
    LP_TYPE_UNKNOWN = 0;
    LP_TYPE_ADD = 1;
    LP_TYPE_REMOVE = 2;
}

message TransferHistory {
    string transfer_id = 1;
    TransferInfo src_send_info = 2;
    TransferInfo dst_received_info = 3;
    uint64 ts = 4;
    string src_block_tx_link = 5;
    string dst_block_tx_link = 6;
    TransferHistoryStatus status = 7;
}

message LPHistory {
    Chain chain = 1;
    TokenInfo token = 2;
    string amount = 3;
    uint64 ts = 4;
    string block_tx_link = 5;
    LPHistoryStatus status = 6;
    LPType type = 7;
    string withdraw_id = 8; // for withdraw only
    uint64 seq_num = 9; // for add only
}

message TransferHistoryRequest {
    string next_page_token = 1; // for first page, it's ""
    uint64 page_size = 2;
}

message TransferHistoryResponse {
    ErrMsg err = 1;
    repeated TransferHistory history = 2;
}

message LPHistoryRequest {
    string next_page_token = 1; // for first page, it's ""
    uint64 page_size = 2;
}

message LPHistoryResponse {
    ErrMsg err = 1;
    repeated LPHistory history = 2;
}

message ErrMsg {
    ErrCode code = 1;
    string msg = 2;
}

enum ErrCode {
    ERROR_CODE_UNDEFINED = 0;
    ERROR_CODE_COMMON = 500;
}
