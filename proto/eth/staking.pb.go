// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/staking.proto

package eth

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Slash struct {
	Validator   []byte         `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Nonce       uint64         `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	SlashFactor uint64         `protobuf:"varint,3,opt,name=slash_factor,json=slashFactor,proto3" json:"slash_factor,omitempty"`
	ExpireTime  uint64         `protobuf:"varint,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	JailPeriod  uint64         `protobuf:"varint,5,opt,name=jail_period,json=jailPeriod,proto3" json:"jail_period,omitempty"`
	Collectors  []*AcctAmtPair `protobuf:"bytes,6,rep,name=collectors,proto3" json:"collectors,omitempty"`
}

func (m *Slash) Reset()         { *m = Slash{} }
func (m *Slash) String() string { return proto.CompactTextString(m) }
func (*Slash) ProtoMessage()    {}
func (*Slash) Descriptor() ([]byte, []int) {
	return fileDescriptor_a119100e37990352, []int{0}
}
func (m *Slash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Slash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Slash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Slash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slash.Merge(m, src)
}
func (m *Slash) XXX_Size() int {
	return m.Size()
}
func (m *Slash) XXX_DiscardUnknown() {
	xxx_messageInfo_Slash.DiscardUnknown(m)
}

var xxx_messageInfo_Slash proto.InternalMessageInfo

func (m *Slash) GetValidator() []byte {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *Slash) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Slash) GetSlashFactor() uint64 {
	if m != nil {
		return m.SlashFactor
	}
	return 0
}

func (m *Slash) GetExpireTime() uint64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *Slash) GetJailPeriod() uint64 {
	if m != nil {
		return m.JailPeriod
	}
	return 0
}

func (m *Slash) GetCollectors() []*AcctAmtPair {
	if m != nil {
		return m.Collectors
	}
	return nil
}

type AcctAmtPair struct {
	Account []byte `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Amount  []byte `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *AcctAmtPair) Reset()         { *m = AcctAmtPair{} }
func (m *AcctAmtPair) String() string { return proto.CompactTextString(m) }
func (*AcctAmtPair) ProtoMessage()    {}
func (*AcctAmtPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_a119100e37990352, []int{1}
}
func (m *AcctAmtPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcctAmtPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcctAmtPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcctAmtPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcctAmtPair.Merge(m, src)
}
func (m *AcctAmtPair) XXX_Size() int {
	return m.Size()
}
func (m *AcctAmtPair) XXX_DiscardUnknown() {
	xxx_messageInfo_AcctAmtPair.DiscardUnknown(m)
}

var xxx_messageInfo_AcctAmtPair proto.InternalMessageInfo

func (m *AcctAmtPair) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AcctAmtPair) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

var E_Soltype = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         1004,
	Name:          "eth.soltype",
	Tag:           "bytes,1004,opt,name=soltype",
	Filename:      "eth/staking.proto",
}

func init() {
	proto.RegisterType((*Slash)(nil), "eth.Slash")
	proto.RegisterType((*AcctAmtPair)(nil), "eth.AcctAmtPair")
	proto.RegisterExtension(E_Soltype)
}

func init() { proto.RegisterFile("eth/staking.proto", fileDescriptor_a119100e37990352) }

var fileDescriptor_a119100e37990352 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x8b, 0xd4, 0x30,
	0x14, 0x80, 0x27, 0x3b, 0x3b, 0x53, 0x36, 0xdd, 0x83, 0x06, 0x0f, 0x45, 0xb0, 0xd6, 0xc1, 0x43,
	0x3d, 0x6c, 0x2b, 0x23, 0x8a, 0x78, 0x10, 0x76, 0x85, 0xbd, 0xba, 0x54, 0x41, 0xf0, 0x32, 0x64,
	0xd2, 0xb7, 0x6d, 0xdc, 0x34, 0x29, 0xc9, 0xeb, 0xa8, 0xff, 0xc2, 0x9f, 0xe5, 0x71, 0x8e, 0x9e,
	0x44, 0x3a, 0x57, 0x7f, 0x84, 0x34, 0x75, 0x74, 0x0e, 0x7b, 0x4b, 0xbe, 0xef, 0xe3, 0x41, 0x5e,
	0xe8, 0x5d, 0xc0, 0x3a, 0x77, 0xc8, 0x6f, 0xa4, 0xae, 0xb2, 0xd6, 0x1a, 0x34, 0x6c, 0x0a, 0x58,
	0xdf, 0x4f, 0x2a, 0x63, 0x2a, 0x05, 0xb9, 0x47, 0xeb, 0xee, 0x3a, 0x2f, 0xc1, 0x09, 0x2b, 0x5b,
	0x34, 0x76, 0xcc, 0x16, 0x3f, 0x09, 0x9d, 0xbd, 0x53, 0xdc, 0xd5, 0x2c, 0xa5, 0x27, 0x1b, 0xae,
	0x64, 0xc9, 0xd1, 0xd8, 0x88, 0x24, 0x24, 0x3d, 0xbd, 0xa0, 0xfd, 0xeb, 0x80, 0x97, 0xa5, 0x05,
	0xe7, 0x8a, 0xff, 0x92, 0xdd, 0xa3, 0x33, 0x6d, 0xb4, 0x80, 0xe8, 0x28, 0x21, 0xe9, 0x71, 0x31,
	0x5e, 0xd8, 0x23, 0x7a, 0xea, 0x86, 0x41, 0xab, 0x6b, 0x2e, 0x86, 0x11, 0x53, 0x2f, 0x43, 0xcf,
	0x2e, 0x3d, 0x62, 0x0f, 0x69, 0x08, 0x5f, 0x5a, 0x69, 0x61, 0x85, 0xb2, 0x81, 0xe8, 0xd8, 0x17,
	0x74, 0x44, 0xef, 0x65, 0x03, 0x43, 0xf0, 0x89, 0x4b, 0xb5, 0x6a, 0xc1, 0x4a, 0x53, 0x46, 0xb3,
	0x31, 0x18, 0xd0, 0x95, 0x27, 0xec, 0x29, 0xa5, 0xc2, 0x28, 0x05, 0xc3, 0x38, 0x17, 0xcd, 0x93,
	0x69, 0x1a, 0x2e, 0xef, 0x64, 0x80, 0x75, 0x76, 0x2e, 0x04, 0x9e, 0x37, 0x78, 0xc5, 0xa5, 0x2d,
	0x0e, 0x9a, 0xc5, 0x07, 0x1a, 0x1e, 0x28, 0xf6, 0x98, 0x06, 0x5c, 0x08, 0xd3, 0x69, 0xbc, 0xe5,
	0x8d, 0x7b, 0xc5, 0x16, 0x74, 0xce, 0x1b, 0x1f, 0x1d, 0xfd, 0x8b, 0x3a, 0xa9, 0x71, 0xf9, 0xfc,
	0x45, 0xf1, 0xd7, 0xbc, 0x7a, 0x49, 0x03, 0x67, 0x14, 0x7e, 0x6d, 0x81, 0x3d, 0xc8, 0xc6, 0x3d,
	0x67, 0xfb, 0x3d, 0x67, 0x97, 0x12, 0x54, 0xf9, 0xb6, 0x45, 0x69, 0xb4, 0x8b, 0x7e, 0x07, 0x09,
	0x49, 0x4f, 0x8a, 0x7d, 0x7e, 0xf1, 0xe6, 0x7b, 0x1f, 0x93, 0x6d, 0x1f, 0x93, 0x5f, 0x7d, 0x4c,
	0xbe, 0xed, 0xe2, 0xc9, 0x76, 0x17, 0x4f, 0x7e, 0xec, 0xe2, 0xc9, 0xc7, 0x27, 0x95, 0xc4, 0xba,
	0x5b, 0x67, 0xc2, 0x34, 0xb9, 0x00, 0x05, 0xf6, 0x4c, 0x03, 0x7e, 0x36, 0xf6, 0x26, 0x77, 0x95,
	0x3e, 0xdb, 0x2c, 0xc7, 0x8f, 0xcc, 0x01, 0xeb, 0xf5, 0xdc, 0x1f, 0x9f, 0xfd, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x4c, 0x2b, 0x89, 0x19, 0xfb, 0x01, 0x00, 0x00,
}

func (m *Slash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Slash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Slash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Collectors) > 0 {
		for iNdEx := len(m.Collectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.JailPeriod != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.JailPeriod))
		i--
		dAtA[i] = 0x28
	}
	if m.ExpireTime != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x20
	}
	if m.SlashFactor != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.SlashFactor))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AcctAmtPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcctAmtPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcctAmtPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovStaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Slash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovStaking(uint64(m.Nonce))
	}
	if m.SlashFactor != 0 {
		n += 1 + sovStaking(uint64(m.SlashFactor))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovStaking(uint64(m.ExpireTime))
	}
	if m.JailPeriod != 0 {
		n += 1 + sovStaking(uint64(m.JailPeriod))
	}
	if len(m.Collectors) > 0 {
		for _, e := range m.Collectors {
			l = e.Size()
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	return n
}

func (m *AcctAmtPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	return n
}

func sovStaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStaking(x uint64) (n int) {
	return sovStaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Slash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Slash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Slash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = append(m.Validator[:0], dAtA[iNdEx:postIndex]...)
			if m.Validator == nil {
				m.Validator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFactor", wireType)
			}
			m.SlashFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashFactor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailPeriod", wireType)
			}
			m.JailPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collectors = append(m.Collectors, &AcctAmtPair{})
			if err := m.Collectors[len(m.Collectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcctAmtPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcctAmtPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcctAmtPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount[:0], dAtA[iNdEx:postIndex]...)
			if m.Amount == nil {
				m.Amount = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStaking = fmt.Errorf("proto: unexpected end of group")
)
