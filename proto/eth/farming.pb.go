// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/farming.proto

package eth

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FarmingRewards struct {
	// recipient defines the reward recipient
	Recipient []byte `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// chain_id defines the EVM chain ID to receive rewards
	ChainId []byte `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// token_addresses defines the list of reward token addresses
	TokenAddresses [][]byte `protobuf:"bytes,3,rep,name=token_addresses,json=tokenAddresses,proto3" json:"token_addresses,omitempty"`
	// cumulative_reward_amounts defines the cumulative amount of rewards
	CumulativeRewardAmounts [][]byte `protobuf:"bytes,4,rep,name=cumulative_reward_amounts,json=cumulativeRewardAmounts,proto3" json:"cumulative_reward_amounts,omitempty"`
}

func (m *FarmingRewards) Reset()         { *m = FarmingRewards{} }
func (m *FarmingRewards) String() string { return proto.CompactTextString(m) }
func (*FarmingRewards) ProtoMessage()    {}
func (*FarmingRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_6611f35c6d3d08ba, []int{0}
}
func (m *FarmingRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FarmingRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FarmingRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FarmingRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FarmingRewards.Merge(m, src)
}
func (m *FarmingRewards) XXX_Size() int {
	return m.Size()
}
func (m *FarmingRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_FarmingRewards.DiscardUnknown(m)
}

var xxx_messageInfo_FarmingRewards proto.InternalMessageInfo

func (m *FarmingRewards) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *FarmingRewards) GetChainId() []byte {
	if m != nil {
		return m.ChainId
	}
	return nil
}

func (m *FarmingRewards) GetTokenAddresses() [][]byte {
	if m != nil {
		return m.TokenAddresses
	}
	return nil
}

func (m *FarmingRewards) GetCumulativeRewardAmounts() [][]byte {
	if m != nil {
		return m.CumulativeRewardAmounts
	}
	return nil
}

func init() {
	proto.RegisterType((*FarmingRewards)(nil), "eth.FarmingRewards")
}

func init() { proto.RegisterFile("eth/farming.proto", fileDescriptor_6611f35c6d3d08ba) }

var fileDescriptor_6611f35c6d3d08ba = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x2d, 0xc9, 0xd0,
	0x4f, 0x4b, 0x2c, 0xca, 0xcd, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e,
	0x2d, 0xc9, 0x50, 0x5a, 0xc7, 0xc8, 0xc5, 0xe7, 0x06, 0x11, 0x0e, 0x4a, 0x2d, 0x4f, 0x2c, 0x4a,
	0x29, 0x16, 0x92, 0xe1, 0xe2, 0x2c, 0x4a, 0x4d, 0xce, 0x2c, 0xc8, 0x4c, 0xcd, 0x2b, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x09, 0x42, 0x08, 0x08, 0x49, 0x72, 0x71, 0x24, 0x67, 0x24, 0x66, 0xe6,
	0xc5, 0x67, 0xa6, 0x48, 0x30, 0x81, 0x25, 0xd9, 0xc1, 0x7c, 0xcf, 0x14, 0x21, 0x75, 0x2e, 0xfe,
	0x92, 0xfc, 0xec, 0xd4, 0xbc, 0xf8, 0xc4, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0xe2, 0xd4, 0x62, 0x09,
	0x66, 0x05, 0x66, 0x0d, 0x9e, 0x20, 0x3e, 0xb0, 0xb0, 0x23, 0x4c, 0x54, 0xc8, 0x8a, 0x4b, 0x32,
	0xb9, 0x34, 0xb7, 0x34, 0x27, 0xb1, 0x24, 0xb3, 0x2c, 0x35, 0xbe, 0x08, 0x6c, 0x6f, 0x7c, 0x62,
	0x6e, 0x7e, 0x69, 0x5e, 0x49, 0xb1, 0x04, 0x0b, 0x58, 0x8b, 0x38, 0x42, 0x01, 0xc4, 0x5d, 0x8e,
	0x10, 0x69, 0x27, 0xe7, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e,
	0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x4c,
	0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x4e, 0xcd, 0x49, 0x2d, 0xd2,
	0xcd, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x2f, 0x4e, 0xcf, 0xd3, 0x2d, 0x33, 0xd2, 0x07,
	0x7b, 0x5b, 0x3f, 0xb5, 0x24, 0x23, 0x89, 0x0d, 0xcc, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xf4, 0x96, 0x8b, 0x70, 0x16, 0x01, 0x00, 0x00,
}

func (m *FarmingRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FarmingRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FarmingRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CumulativeRewardAmounts) > 0 {
		for iNdEx := len(m.CumulativeRewardAmounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CumulativeRewardAmounts[iNdEx])
			copy(dAtA[i:], m.CumulativeRewardAmounts[iNdEx])
			i = encodeVarintFarming(dAtA, i, uint64(len(m.CumulativeRewardAmounts[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TokenAddresses) > 0 {
		for iNdEx := len(m.TokenAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenAddresses[iNdEx])
			copy(dAtA[i:], m.TokenAddresses[iNdEx])
			i = encodeVarintFarming(dAtA, i, uint64(len(m.TokenAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFarming(dAtA []byte, offset int, v uint64) int {
	offset -= sovFarming(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FarmingRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	if len(m.TokenAddresses) > 0 {
		for _, b := range m.TokenAddresses {
			l = len(b)
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	if len(m.CumulativeRewardAmounts) > 0 {
		for _, b := range m.CumulativeRewardAmounts {
			l = len(b)
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	return n
}

func sovFarming(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFarming(x uint64) (n int) {
	return sovFarming(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FarmingRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FarmingRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FarmingRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = append(m.ChainId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainId == nil {
				m.ChainId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddresses = append(m.TokenAddresses, make([]byte, postIndex-iNdEx))
			copy(m.TokenAddresses[len(m.TokenAddresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeRewardAmounts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeRewardAmounts = append(m.CumulativeRewardAmounts, make([]byte, postIndex-iNdEx))
			copy(m.CumulativeRewardAmounts[len(m.CumulativeRewardAmounts)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFarming(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFarming
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFarming
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFarming
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFarming        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFarming          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFarming = fmt.Errorf("proto: unexpected end of group")
)
