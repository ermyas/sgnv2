// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/slashing/v1/slashing.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	types "github.com/celer-network/sgn-v2/common/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	EnableSlash           bool                                   `protobuf:"varint,1,opt,name=enable_slash,json=enableSlash,proto3" json:"enable_slash,omitempty" yaml:"enable_slash"`
	SignedBlocksWindow    int64                                  `protobuf:"varint,2,opt,name=signed_blocks_window,json=signedBlocksWindow,proto3" json:"signed_blocks_window,omitempty" yaml:"signed_blocks_window"`
	SlashTimeout          uint64                                 `protobuf:"varint,3,opt,name=slash_timeout,json=slashTimeout,proto3" json:"slash_timeout,omitempty" yaml:"slash_timeout"`
	SlashFactorDoubleSign uint64                                 `protobuf:"varint,4,opt,name=slash_factor_double_sign,json=slashFactorDoubleSign,proto3" json:"slash_factor_double_sign,omitempty" yaml:"slash_factor_double_sign"`
	SlashFactorDowntime   uint64                                 `protobuf:"varint,5,opt,name=slash_factor_downtime,json=slashFactorDowntime,proto3" json:"slash_factor_downtime,omitempty" yaml:"slash_factor_downtime"`
	JailPeriod            uint64                                 `protobuf:"varint,6,opt,name=jail_period,json=jailPeriod,proto3" json:"jail_period,omitempty" yaml:"jail_period"`
	MinSignedPerWindow    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=min_signed_per_window,json=minSignedPerWindow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_signed_per_window" yaml:"min_signed_per_window"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_148c19847bc412bb, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEnableSlash() bool {
	if m != nil {
		return m.EnableSlash
	}
	return false
}

func (m *Params) GetSignedBlocksWindow() int64 {
	if m != nil {
		return m.SignedBlocksWindow
	}
	return 0
}

func (m *Params) GetSlashTimeout() uint64 {
	if m != nil {
		return m.SlashTimeout
	}
	return 0
}

func (m *Params) GetSlashFactorDoubleSign() uint64 {
	if m != nil {
		return m.SlashFactorDoubleSign
	}
	return 0
}

func (m *Params) GetSlashFactorDowntime() uint64 {
	if m != nil {
		return m.SlashFactorDowntime
	}
	return 0
}

func (m *Params) GetJailPeriod() uint64 {
	if m != nil {
		return m.JailPeriod
	}
	return 0
}

type AcctAmtPair struct {
	// bech32-encoded sgn address (sdk.AccAddress)
	Account string                                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty" yaml:"account"`
	Amount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *AcctAmtPair) Reset()         { *m = AcctAmtPair{} }
func (m *AcctAmtPair) String() string { return proto.CompactTextString(m) }
func (*AcctAmtPair) ProtoMessage()    {}
func (*AcctAmtPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_148c19847bc412bb, []int{1}
}
func (m *AcctAmtPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcctAmtPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcctAmtPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcctAmtPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcctAmtPair.Merge(m, src)
}
func (m *AcctAmtPair) XXX_Size() int {
	return m.Size()
}
func (m *AcctAmtPair) XXX_DiscardUnknown() {
	xxx_messageInfo_AcctAmtPair.DiscardUnknown(m)
}

var xxx_messageInfo_AcctAmtPair proto.InternalMessageInfo

func (m *AcctAmtPair) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type Slash struct {
	// bech32-encoded sgn address (sdk.AccAddress)
	Validator     string            `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty" yaml:"validator"`
	Nonce         uint64            `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	SlashFactor   uint64            `protobuf:"varint,3,opt,name=slash_factor,json=slashFactor,proto3" json:"slash_factor,omitempty"`
	ExpireTime    uint64            `protobuf:"varint,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	JailPeriod    uint64            `protobuf:"varint,5,opt,name=jail_period,json=jailPeriod,proto3" json:"jail_period,omitempty"`
	Collectors    []AcctAmtPair     `protobuf:"bytes,6,rep,name=collectors,proto3" json:"collectors"`
	Reason        string            `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	EthSlashBytes []byte            `protobuf:"bytes,8,opt,name=eth_slash_bytes,json=ethSlashBytes,proto3" json:"eth_slash_bytes,omitempty" yaml:"eth_slash_bytes"`
	Signatures    []types.Signature `protobuf:"bytes,9,rep,name=signatures,proto3" json:"signatures"`
}

func (m *Slash) Reset()         { *m = Slash{} }
func (m *Slash) String() string { return proto.CompactTextString(m) }
func (*Slash) ProtoMessage()    {}
func (*Slash) Descriptor() ([]byte, []int) {
	return fileDescriptor_148c19847bc412bb, []int{2}
}
func (m *Slash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Slash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Slash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Slash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slash.Merge(m, src)
}
func (m *Slash) XXX_Size() int {
	return m.Size()
}
func (m *Slash) XXX_DiscardUnknown() {
	xxx_messageInfo_Slash.DiscardUnknown(m)
}

var xxx_messageInfo_Slash proto.InternalMessageInfo

func (m *Slash) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *Slash) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Slash) GetSlashFactor() uint64 {
	if m != nil {
		return m.SlashFactor
	}
	return 0
}

func (m *Slash) GetExpireTime() uint64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *Slash) GetJailPeriod() uint64 {
	if m != nil {
		return m.JailPeriod
	}
	return 0
}

func (m *Slash) GetCollectors() []AcctAmtPair {
	if m != nil {
		return m.Collectors
	}
	return nil
}

func (m *Slash) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Slash) GetEthSlashBytes() []byte {
	if m != nil {
		return m.EthSlashBytes
	}
	return nil
}

func (m *Slash) GetSignatures() []types.Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type QuerySlashParams struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QuerySlashParams) Reset()         { *m = QuerySlashParams{} }
func (m *QuerySlashParams) String() string { return proto.CompactTextString(m) }
func (*QuerySlashParams) ProtoMessage()    {}
func (*QuerySlashParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_148c19847bc412bb, []int{3}
}
func (m *QuerySlashParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySlashParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySlashParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySlashParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySlashParams.Merge(m, src)
}
func (m *QuerySlashParams) XXX_Size() int {
	return m.Size()
}
func (m *QuerySlashParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySlashParams.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySlashParams proto.InternalMessageInfo

func (m *QuerySlashParams) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "sgn.slashing.v1.Params")
	proto.RegisterType((*AcctAmtPair)(nil), "sgn.slashing.v1.AcctAmtPair")
	proto.RegisterType((*Slash)(nil), "sgn.slashing.v1.Slash")
	proto.RegisterType((*QuerySlashParams)(nil), "sgn.slashing.v1.QuerySlashParams")
}

func init() { proto.RegisterFile("sgn/slashing/v1/slashing.proto", fileDescriptor_148c19847bc412bb) }

var fileDescriptor_148c19847bc412bb = []byte{
	// 741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6a, 0xdb, 0x4a,
	0x18, 0xb5, 0xe2, 0x9f, 0xc4, 0x63, 0xe7, 0x26, 0x4c, 0x9c, 0x5c, 0x5d, 0xdf, 0x20, 0xf9, 0xea,
	0x42, 0xf1, 0xa2, 0x91, 0x9b, 0x74, 0x51, 0x08, 0xb4, 0x10, 0x11, 0x02, 0xdd, 0x04, 0x67, 0x1c,
	0x28, 0x94, 0x82, 0x90, 0xe5, 0xa9, 0xac, 0x46, 0x9a, 0x31, 0x9a, 0xb1, 0x1d, 0x2f, 0x4b, 0x5f,
	0xa0, 0xab, 0x3e, 0x43, 0xdf, 0xa4, 0x59, 0x66, 0x59, 0xba, 0x10, 0xc5, 0x79, 0x03, 0x3d, 0x41,
	0xd1, 0x8c, 0x6c, 0x2b, 0x69, 0x36, 0x5d, 0x49, 0xdf, 0x77, 0xce, 0x1c, 0x1d, 0xbe, 0xef, 0x68,
	0x80, 0xc6, 0x3c, 0xd2, 0x61, 0x81, 0xc3, 0x86, 0x3e, 0xf1, 0x3a, 0x93, 0xc3, 0xe5, 0xbb, 0x39,
	0x8a, 0x28, 0xa7, 0x70, 0x8b, 0x79, 0xc4, 0x5c, 0xf6, 0x26, 0x87, 0xcd, 0x86, 0x47, 0x3d, 0x2a,
	0xb0, 0x4e, 0xfa, 0x26, 0x69, 0xcd, 0x7f, 0x5c, 0xca, 0x42, 0xca, 0x6c, 0x09, 0xc8, 0x22, 0x83,
	0x9a, 0xe9, 0x17, 0x5c, 0x1a, 0x86, 0x94, 0xa4, 0xfa, 0xf2, 0x4d, 0x62, 0xc6, 0xb7, 0x12, 0xa8,
	0x74, 0x9d, 0xc8, 0x09, 0x19, 0x3c, 0x06, 0x75, 0x4c, 0x9c, 0x7e, 0x80, 0x6d, 0xf1, 0x35, 0x55,
	0x69, 0x29, 0xed, 0x0d, 0xeb, 0xef, 0x24, 0xd6, 0x77, 0x66, 0x4e, 0x18, 0x1c, 0x1b, 0x79, 0xd4,
	0x40, 0x35, 0x59, 0xf6, 0xd2, 0x0a, 0x5e, 0x80, 0x06, 0xf3, 0x3d, 0x82, 0x07, 0x76, 0x3f, 0xa0,
	0xee, 0x15, 0xb3, 0xa7, 0x3e, 0x19, 0xd0, 0xa9, 0xba, 0xd6, 0x52, 0xda, 0x45, 0x4b, 0x4f, 0x62,
	0xfd, 0x5f, 0xa9, 0xf1, 0x18, 0xcb, 0x40, 0x50, 0xb6, 0x2d, 0xd1, 0x7d, 0x23, 0x9a, 0xf0, 0x25,
	0xd8, 0x14, 0x5f, 0xb2, 0xb9, 0x1f, 0x62, 0x3a, 0xe6, 0x6a, 0xb1, 0xa5, 0xb4, 0x4b, 0x96, 0x9a,
	0xc4, 0x7a, 0x23, 0xd3, 0xca, 0xc3, 0x06, 0xaa, 0x8b, 0xfa, 0x52, 0x96, 0xf0, 0x1d, 0x50, 0x25,
	0xfe, 0xde, 0x71, 0x39, 0x8d, 0xec, 0x01, 0x1d, 0x0b, 0xf3, 0xbe, 0x47, 0xd4, 0x92, 0x50, 0xfa,
	0x3f, 0x89, 0x75, 0x3d, 0xaf, 0xf4, 0x3b, 0xd3, 0x40, 0xbb, 0x02, 0x3a, 0x13, 0xc8, 0xa9, 0x00,
	0x7a, 0xbe, 0x47, 0xe0, 0x25, 0xd8, 0x7d, 0x70, 0x66, 0x4a, 0x52, 0x23, 0x6a, 0x59, 0x48, 0xb7,
	0x92, 0x58, 0xdf, 0x7f, 0x54, 0x5a, 0xd2, 0x0c, 0xb4, 0x73, 0x4f, 0x57, 0x76, 0xe1, 0x0b, 0x50,
	0xfb, 0xe0, 0xf8, 0x81, 0x3d, 0xc2, 0x91, 0x4f, 0x07, 0x6a, 0x45, 0x68, 0xed, 0x25, 0xb1, 0x0e,
	0xa5, 0x56, 0x0e, 0x34, 0x10, 0x48, 0xab, 0xae, 0x28, 0xe0, 0x47, 0x05, 0xec, 0x86, 0x3e, 0xb1,
	0xb3, 0xe9, 0x8e, 0x70, 0xb4, 0x58, 0xc0, 0x7a, 0x4b, 0x69, 0xd7, 0xad, 0xf3, 0x9b, 0x58, 0x2f,
	0xfc, 0x88, 0xf5, 0x27, 0x9e, 0xcf, 0x87, 0xe3, 0xbe, 0xe9, 0xd2, 0x30, 0x8b, 0x48, 0xf6, 0x38,
	0x60, 0x83, 0xab, 0x0e, 0x9f, 0x8d, 0x30, 0x33, 0x4f, 0xb1, 0xbb, 0x72, 0xff, 0xa8, 0xa8, 0x81,
	0x60, 0xe8, 0x93, 0x9e, 0x68, 0x77, 0x71, 0x24, 0xf7, 0x65, 0x7c, 0x52, 0x40, 0xed, 0xc4, 0x75,
	0xf9, 0x49, 0xc8, 0xbb, 0x8e, 0x1f, 0xc1, 0xa7, 0x60, 0xdd, 0x71, 0x5d, 0x3a, 0x26, 0x5c, 0x24,
	0xa9, 0x6a, 0xc1, 0x24, 0xd6, 0xff, 0x92, 0xb2, 0x19, 0x60, 0xa0, 0x05, 0x05, 0x9e, 0x81, 0x8a,
	0x13, 0x0a, 0xf2, 0x9a, 0x20, 0x9b, 0x7f, 0xe0, 0xf8, 0x35, 0xe1, 0x28, 0x3b, 0x6d, 0x7c, 0x29,
	0x82, 0xb2, 0x8c, 0xe4, 0x11, 0xa8, 0x4e, 0x9c, 0xc0, 0x1f, 0x38, 0x9c, 0x46, 0x99, 0x83, 0x46,
	0x12, 0xeb, 0xdb, 0xd2, 0xc1, 0x12, 0x32, 0xd0, 0x8a, 0x06, 0x1b, 0xa0, 0x4c, 0x28, 0x71, 0xb1,
	0x30, 0x51, 0x42, 0xb2, 0x80, 0xff, 0x81, 0x7a, 0x7e, 0x8b, 0x32, 0x88, 0xa8, 0x96, 0xdb, 0x20,
	0xd4, 0x41, 0x0d, 0x5f, 0x8f, 0xfc, 0x08, 0x8b, 0x38, 0xca, 0x80, 0x21, 0x20, 0x5b, 0x69, 0x22,
	0x53, 0x42, 0x7e, 0xb5, 0x65, 0x49, 0xc8, 0xad, 0xd0, 0x02, 0xc0, 0xa5, 0x41, 0x80, 0x53, 0x39,
	0xa6, 0x56, 0x5a, 0xc5, 0x76, 0xed, 0x68, 0xdf, 0x7c, 0xf0, 0xef, 0x9b, 0xb9, 0x01, 0x5b, 0xa5,
	0x74, 0x44, 0x28, 0x77, 0x0a, 0xee, 0x81, 0x4a, 0x84, 0x1d, 0x46, 0x89, 0x58, 0x7b, 0x15, 0x65,
	0x15, 0xb4, 0xc0, 0x16, 0xe6, 0x43, 0xf9, 0xe3, 0xda, 0xfd, 0x19, 0xc7, 0x4c, 0xdd, 0x10, 0xb9,
	0x68, 0x26, 0xb1, 0xbe, 0x97, 0xfd, 0xdc, 0xf7, 0x09, 0x06, 0xda, 0xc4, 0x7c, 0x28, 0x26, 0x69,
	0xa5, 0x35, 0x7c, 0x05, 0x40, 0x1a, 0x04, 0x87, 0x8f, 0x23, 0xcc, 0xd4, 0xaa, 0xf0, 0xa7, 0x0a,
	0x7f, 0xd9, 0x7d, 0x32, 0x39, 0x34, 0x7b, 0x0b, 0xc2, 0xc2, 0xdb, 0xea, 0x84, 0xd1, 0x06, 0xdb,
	0x17, 0x63, 0x1c, 0xcd, 0x84, 0x64, 0x76, 0xe3, 0x2c, 0xc7, 0xad, 0xe4, 0xc6, 0x6d, 0x9d, 0x7f,
	0x9d, 0x6b, 0xca, 0xcd, 0x5c, 0x53, 0x6e, 0xe7, 0x9a, 0xf2, 0x73, 0xae, 0x29, 0x9f, 0xef, 0xb4,
	0xc2, 0xed, 0x9d, 0x56, 0xf8, 0x7e, 0xa7, 0x15, 0xde, 0x3e, 0xcb, 0x07, 0x02, 0x07, 0x38, 0x3a,
	0x20, 0x98, 0x4f, 0x69, 0x74, 0xd5, 0x61, 0x1e, 0x39, 0x98, 0x1c, 0x75, 0xae, 0x57, 0x97, 0xa9,
	0x88, 0x47, 0xbf, 0x22, 0x6e, 0xba, 0xe7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x20, 0xe6,
	0x57, 0x69, 0x05, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EnableSlash != that1.EnableSlash {
		return false
	}
	if this.SignedBlocksWindow != that1.SignedBlocksWindow {
		return false
	}
	if this.SlashTimeout != that1.SlashTimeout {
		return false
	}
	if this.SlashFactorDoubleSign != that1.SlashFactorDoubleSign {
		return false
	}
	if this.SlashFactorDowntime != that1.SlashFactorDowntime {
		return false
	}
	if this.JailPeriod != that1.JailPeriod {
		return false
	}
	if !this.MinSignedPerWindow.Equal(that1.MinSignedPerWindow) {
		return false
	}
	return true
}
func (this *AcctAmtPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AcctAmtPair)
	if !ok {
		that2, ok := that.(AcctAmtPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Account != that1.Account {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *Slash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Slash)
	if !ok {
		that2, ok := that.(Slash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Validator != that1.Validator {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.SlashFactor != that1.SlashFactor {
		return false
	}
	if this.ExpireTime != that1.ExpireTime {
		return false
	}
	if this.JailPeriod != that1.JailPeriod {
		return false
	}
	if len(this.Collectors) != len(that1.Collectors) {
		return false
	}
	for i := range this.Collectors {
		if !this.Collectors[i].Equal(&that1.Collectors[i]) {
			return false
		}
	}
	if this.Reason != that1.Reason {
		return false
	}
	if !bytes.Equal(this.EthSlashBytes, that1.EthSlashBytes) {
		return false
	}
	if len(this.Signatures) != len(that1.Signatures) {
		return false
	}
	for i := range this.Signatures {
		if !this.Signatures[i].Equal(&that1.Signatures[i]) {
			return false
		}
	}
	return true
}
func (this *QuerySlashParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuerySlashParams)
	if !ok {
		that2, ok := that.(QuerySlashParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinSignedPerWindow.Size()
		i -= size
		if _, err := m.MinSignedPerWindow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSlashing(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.JailPeriod != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.JailPeriod))
		i--
		dAtA[i] = 0x30
	}
	if m.SlashFactorDowntime != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.SlashFactorDowntime))
		i--
		dAtA[i] = 0x28
	}
	if m.SlashFactorDoubleSign != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.SlashFactorDoubleSign))
		i--
		dAtA[i] = 0x20
	}
	if m.SlashTimeout != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.SlashTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.SignedBlocksWindow != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.SignedBlocksWindow))
		i--
		dAtA[i] = 0x10
	}
	if m.EnableSlash {
		i--
		if m.EnableSlash {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AcctAmtPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcctAmtPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcctAmtPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSlashing(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintSlashing(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Slash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Slash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Slash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSlashing(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.EthSlashBytes) > 0 {
		i -= len(m.EthSlashBytes)
		copy(dAtA[i:], m.EthSlashBytes)
		i = encodeVarintSlashing(dAtA, i, uint64(len(m.EthSlashBytes)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintSlashing(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Collectors) > 0 {
		for iNdEx := len(m.Collectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSlashing(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.JailPeriod != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.JailPeriod))
		i--
		dAtA[i] = 0x28
	}
	if m.ExpireTime != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x20
	}
	if m.SlashFactor != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.SlashFactor))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintSlashing(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySlashParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySlashParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySlashParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSlashing(dAtA []byte, offset int, v uint64) int {
	offset -= sovSlashing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableSlash {
		n += 2
	}
	if m.SignedBlocksWindow != 0 {
		n += 1 + sovSlashing(uint64(m.SignedBlocksWindow))
	}
	if m.SlashTimeout != 0 {
		n += 1 + sovSlashing(uint64(m.SlashTimeout))
	}
	if m.SlashFactorDoubleSign != 0 {
		n += 1 + sovSlashing(uint64(m.SlashFactorDoubleSign))
	}
	if m.SlashFactorDowntime != 0 {
		n += 1 + sovSlashing(uint64(m.SlashFactorDowntime))
	}
	if m.JailPeriod != 0 {
		n += 1 + sovSlashing(uint64(m.JailPeriod))
	}
	l = m.MinSignedPerWindow.Size()
	n += 1 + l + sovSlashing(uint64(l))
	return n
}

func (m *AcctAmtPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovSlashing(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovSlashing(uint64(l))
	return n
}

func (m *Slash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovSlashing(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovSlashing(uint64(m.Nonce))
	}
	if m.SlashFactor != 0 {
		n += 1 + sovSlashing(uint64(m.SlashFactor))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovSlashing(uint64(m.ExpireTime))
	}
	if m.JailPeriod != 0 {
		n += 1 + sovSlashing(uint64(m.JailPeriod))
	}
	if len(m.Collectors) > 0 {
		for _, e := range m.Collectors {
			l = e.Size()
			n += 1 + l + sovSlashing(uint64(l))
		}
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovSlashing(uint64(l))
	}
	l = len(m.EthSlashBytes)
	if l > 0 {
		n += 1 + l + sovSlashing(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovSlashing(uint64(l))
		}
	}
	return n
}

func (m *QuerySlashParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovSlashing(uint64(m.Nonce))
	}
	return n
}

func sovSlashing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSlashing(x uint64) (n int) {
	return sovSlashing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlashing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSlash", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableSlash = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedBlocksWindow", wireType)
			}
			m.SignedBlocksWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedBlocksWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashTimeout", wireType)
			}
			m.SlashTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFactorDoubleSign", wireType)
			}
			m.SlashFactorDoubleSign = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashFactorDoubleSign |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFactorDowntime", wireType)
			}
			m.SlashFactorDowntime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashFactorDowntime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailPeriod", wireType)
			}
			m.JailPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSignedPerWindow", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSignedPerWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSlashing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlashing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcctAmtPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlashing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcctAmtPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcctAmtPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSlashing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlashing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Slash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlashing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Slash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Slash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFactor", wireType)
			}
			m.SlashFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashFactor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailPeriod", wireType)
			}
			m.JailPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collectors = append(m.Collectors, AcctAmtPair{})
			if err := m.Collectors[len(m.Collectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSlashBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSlashBytes = append(m.EthSlashBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.EthSlashBytes == nil {
				m.EthSlashBytes = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, types.Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSlashing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlashing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySlashParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlashing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySlashParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySlashParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSlashing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlashing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSlashing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSlashing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSlashing
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSlashing
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSlashing
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSlashing        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSlashing          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSlashing = fmt.Errorf("proto: unexpected end of group")
)
