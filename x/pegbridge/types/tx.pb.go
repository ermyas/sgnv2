// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/pegbridge/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSignMint signs a mint request.
type MsgSignMint struct {
	// mint_id defines the mint ID calculated with
	// keccak256(abi.encodePacked("mint", request.token, request.account, request.amount, request.nonce));
	MintId string `protobuf:"bytes,1,opt,name=mint_id,json=mintId,proto3" json:"mint_id,omitempty" yaml:"mint_id"`
	// sender defines the SGN account sending the signing Msg.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	// signature defines the signature.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty" yaml:"signature"`
}

func (m *MsgSignMint) Reset()         { *m = MsgSignMint{} }
func (m *MsgSignMint) String() string { return proto.CompactTextString(m) }
func (*MsgSignMint) ProtoMessage()    {}
func (*MsgSignMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{0}
}
func (m *MsgSignMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignMint.Merge(m, src)
}
func (m *MsgSignMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignMint proto.InternalMessageInfo

// MsgSignMintResponse defines the Msg/SignMint response type.
type MsgSignMintResponse struct {
}

func (m *MsgSignMintResponse) Reset()         { *m = MsgSignMintResponse{} }
func (m *MsgSignMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignMintResponse) ProtoMessage()    {}
func (*MsgSignMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{1}
}
func (m *MsgSignMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignMintResponse.Merge(m, src)
}
func (m *MsgSignMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignMintResponse proto.InternalMessageInfo

// MsgSignWithdraw signs a mint request.
type MsgSignWithdraw struct {
	// withdraw_id defines the withdraw ID calculated with
	// keccak256(abi.encodePacked(request.receiver, request.token, request.amount, request.burnChainId, request.nonce)
	WithdrawId string `protobuf:"bytes,1,opt,name=withdraw_id,json=withdrawId,proto3" json:"withdraw_id,omitempty" yaml:"withdraw_id"`
	// sender defines the SGN account sending the signing Msg.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	// signature defines the signature.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty" yaml:"signature"`
}

func (m *MsgSignWithdraw) Reset()         { *m = MsgSignWithdraw{} }
func (m *MsgSignWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgSignWithdraw) ProtoMessage()    {}
func (*MsgSignWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{2}
}
func (m *MsgSignWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignWithdraw.Merge(m, src)
}
func (m *MsgSignWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignWithdraw proto.InternalMessageInfo

// MsgSignWithdrawResponse defines the Msg/SignWithdraw response type.
type MsgSignWithdrawResponse struct {
}

func (m *MsgSignWithdrawResponse) Reset()         { *m = MsgSignWithdrawResponse{} }
func (m *MsgSignWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignWithdrawResponse) ProtoMessage()    {}
func (*MsgSignWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{3}
}
func (m *MsgSignWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignWithdrawResponse.Merge(m, src)
}
func (m *MsgSignWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignWithdrawResponse proto.InternalMessageInfo

type MsgTriggerSignMint struct {
	// mint_id defines the mint ID
	MintId string `protobuf:"bytes,1,opt,name=mint_id,json=mintId,proto3" json:"mint_id,omitempty"`
	// sender defines the SGN account sending the trigger Msg.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgTriggerSignMint) Reset()         { *m = MsgTriggerSignMint{} }
func (m *MsgTriggerSignMint) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerSignMint) ProtoMessage()    {}
func (*MsgTriggerSignMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{4}
}
func (m *MsgTriggerSignMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerSignMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerSignMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerSignMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerSignMint.Merge(m, src)
}
func (m *MsgTriggerSignMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerSignMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerSignMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerSignMint proto.InternalMessageInfo

type MsgTriggerSignMintResponse struct {
}

func (m *MsgTriggerSignMintResponse) Reset()         { *m = MsgTriggerSignMintResponse{} }
func (m *MsgTriggerSignMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerSignMintResponse) ProtoMessage()    {}
func (*MsgTriggerSignMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{5}
}
func (m *MsgTriggerSignMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerSignMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerSignMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerSignMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerSignMintResponse.Merge(m, src)
}
func (m *MsgTriggerSignMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerSignMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerSignMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerSignMintResponse proto.InternalMessageInfo

type MsgTriggerSignWithdraw struct {
	// withdraw_id defines the withdraw ID
	WithdrawId string `protobuf:"bytes,1,opt,name=withdraw_id,json=withdrawId,proto3" json:"withdraw_id,omitempty"`
	// sender defines the SGN account sending the trigger Msg.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgTriggerSignWithdraw) Reset()         { *m = MsgTriggerSignWithdraw{} }
func (m *MsgTriggerSignWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerSignWithdraw) ProtoMessage()    {}
func (*MsgTriggerSignWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{6}
}
func (m *MsgTriggerSignWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerSignWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerSignWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerSignWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerSignWithdraw.Merge(m, src)
}
func (m *MsgTriggerSignWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerSignWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerSignWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerSignWithdraw proto.InternalMessageInfo

type MsgTriggerSignWithdrawResponse struct {
}

func (m *MsgTriggerSignWithdrawResponse) Reset()         { *m = MsgTriggerSignWithdrawResponse{} }
func (m *MsgTriggerSignWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerSignWithdrawResponse) ProtoMessage()    {}
func (*MsgTriggerSignWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{7}
}
func (m *MsgTriggerSignWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerSignWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerSignWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerSignWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerSignWithdrawResponse.Merge(m, src)
}
func (m *MsgTriggerSignWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerSignWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerSignWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerSignWithdrawResponse proto.InternalMessageInfo

// MsgClaimFee defines the Msg/ClaimFee request type.
type MsgClaimFee struct {
	// delegator_address defines the delegator's Ethereum address.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	// chain_id defines the EVM chain ID for which the fees are claimed.
	ChainId uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// token_address defines the fee token address.
	TokenAddress string `protobuf:"bytes,3,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty" yaml:"token_address"`
	// nonce defines a per-account nonce for the claim. Can be timestamp in practice.
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty" yaml:"nonce"`
	// signature defines a delegator signature of:
	// keccak256(abi.encodePacked("PegClaimFee", delegator_address, chain_id, token_address, nonce))
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty" yaml:"signature"`
	// sender defines the SGN account sending the claim Msg.
	Sender      string `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	IsValidator bool   `protobuf:"varint,7,opt,name=is_validator,json=isValidator,proto3" json:"is_validator,omitempty" yaml:"is_validator"`
}

func (m *MsgClaimFee) Reset()         { *m = MsgClaimFee{} }
func (m *MsgClaimFee) String() string { return proto.CompactTextString(m) }
func (*MsgClaimFee) ProtoMessage()    {}
func (*MsgClaimFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{8}
}
func (m *MsgClaimFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimFee.Merge(m, src)
}
func (m *MsgClaimFee) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimFee) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimFee.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimFee proto.InternalMessageInfo

// MsgClaimFeeResponse defines the Msg/ClaimFee response type.
type MsgClaimFeeResponse struct {
}

func (m *MsgClaimFeeResponse) Reset()         { *m = MsgClaimFeeResponse{} }
func (m *MsgClaimFeeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimFeeResponse) ProtoMessage()    {}
func (*MsgClaimFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{9}
}
func (m *MsgClaimFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimFeeResponse.Merge(m, src)
}
func (m *MsgClaimFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimFeeResponse proto.InternalMessageInfo

// MsgClaimRefund defines the Msg/ClaimRefund request type.
type MsgClaimRefund struct {
	// ref_id defines the reference ID, represents the deposit/burn to be refunded
	RefId string `protobuf:"bytes,1,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty" yaml:"ref_id"`
	// sender defines the SGN account sending this Msg
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
}

func (m *MsgClaimRefund) Reset()         { *m = MsgClaimRefund{} }
func (m *MsgClaimRefund) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRefund) ProtoMessage()    {}
func (*MsgClaimRefund) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{10}
}
func (m *MsgClaimRefund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRefund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRefund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRefund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRefund.Merge(m, src)
}
func (m *MsgClaimRefund) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRefund) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRefund.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRefund proto.InternalMessageInfo

func (m *MsgClaimRefund) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *MsgClaimRefund) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgClaimRefundResponse defines the Msg/ClaimRefund response type.
type MsgClaimRefundResponse struct {
}

func (m *MsgClaimRefundResponse) Reset()         { *m = MsgClaimRefundResponse{} }
func (m *MsgClaimRefundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRefundResponse) ProtoMessage()    {}
func (*MsgClaimRefundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22fb312247f21ccd, []int{11}
}
func (m *MsgClaimRefundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRefundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRefundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRefundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRefundResponse.Merge(m, src)
}
func (m *MsgClaimRefundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRefundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRefundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRefundResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSignMint)(nil), "sgn.pegbridge.v1.MsgSignMint")
	proto.RegisterType((*MsgSignMintResponse)(nil), "sgn.pegbridge.v1.MsgSignMintResponse")
	proto.RegisterType((*MsgSignWithdraw)(nil), "sgn.pegbridge.v1.MsgSignWithdraw")
	proto.RegisterType((*MsgSignWithdrawResponse)(nil), "sgn.pegbridge.v1.MsgSignWithdrawResponse")
	proto.RegisterType((*MsgTriggerSignMint)(nil), "sgn.pegbridge.v1.MsgTriggerSignMint")
	proto.RegisterType((*MsgTriggerSignMintResponse)(nil), "sgn.pegbridge.v1.MsgTriggerSignMintResponse")
	proto.RegisterType((*MsgTriggerSignWithdraw)(nil), "sgn.pegbridge.v1.MsgTriggerSignWithdraw")
	proto.RegisterType((*MsgTriggerSignWithdrawResponse)(nil), "sgn.pegbridge.v1.MsgTriggerSignWithdrawResponse")
	proto.RegisterType((*MsgClaimFee)(nil), "sgn.pegbridge.v1.MsgClaimFee")
	proto.RegisterType((*MsgClaimFeeResponse)(nil), "sgn.pegbridge.v1.MsgClaimFeeResponse")
	proto.RegisterType((*MsgClaimRefund)(nil), "sgn.pegbridge.v1.MsgClaimRefund")
	proto.RegisterType((*MsgClaimRefundResponse)(nil), "sgn.pegbridge.v1.MsgClaimRefundResponse")
}

func init() { proto.RegisterFile("sgn/pegbridge/v1/tx.proto", fileDescriptor_22fb312247f21ccd) }

var fileDescriptor_22fb312247f21ccd = []byte{
	// 724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x6f, 0x20, 0x84, 0x93, 0x00, 0x61, 0xc2, 0x05, 0x13, 0x71, 0xed, 0xdc, 0x51, 0x5b,
	0x05, 0xb5, 0xc4, 0x85, 0x2e, 0x2a, 0x21, 0x75, 0xd1, 0x54, 0xaa, 0xc4, 0x22, 0x02, 0xb9, 0x55,
	0xab, 0xfe, 0x48, 0xc8, 0xc4, 0xc3, 0x30, 0x22, 0x19, 0xa7, 0x1e, 0x13, 0xe0, 0x0d, 0xba, 0xec,
	0xa2, 0x0f, 0x80, 0xd4, 0x4d, 0xf7, 0xdd, 0xf6, 0x01, 0xba, 0x64, 0xd9, 0x95, 0x55, 0x85, 0x4d,
	0xd7, 0x7e, 0x82, 0x2a, 0x76, 0x3c, 0x38, 0x21, 0x34, 0x74, 0xd3, 0xdd, 0xcc, 0xf9, 0xbe, 0x73,
	0xbe, 0x33, 0xe7, 0xc7, 0x86, 0x65, 0x41, 0xb9, 0xd1, 0x26, 0x74, 0xcf, 0x65, 0x36, 0x25, 0x46,
	0x67, 0xdd, 0xf0, 0x4e, 0xaa, 0x6d, 0xd7, 0xf1, 0x1c, 0x54, 0x10, 0x94, 0x57, 0x25, 0x54, 0xed,
	0xac, 0x97, 0x16, 0xa8, 0x43, 0x9d, 0x10, 0x34, 0x7a, 0xa7, 0x88, 0x87, 0x3f, 0x29, 0x90, 0xab,
	0x0b, 0xfa, 0x8c, 0x51, 0x5e, 0x67, 0xdc, 0x43, 0x77, 0x61, 0xaa, 0xc5, 0xb8, 0xb7, 0xcb, 0x6c,
	0x55, 0x29, 0x2b, 0x95, 0xe9, 0x1a, 0x0a, 0x7c, 0x7d, 0xf6, 0xd4, 0x6a, 0x35, 0x37, 0x71, 0x1f,
	0xc0, 0x66, 0xa6, 0x77, 0xda, 0xb2, 0xd1, 0x2a, 0x64, 0x04, 0xe1, 0x36, 0x71, 0xd5, 0x7f, 0x42,
	0xee, 0x7c, 0xe0, 0xeb, 0x33, 0x11, 0x37, 0xb2, 0x63, 0xb3, 0x4f, 0x40, 0x1b, 0x30, 0x2d, 0x18,
	0xe5, 0x96, 0x77, 0xe4, 0x12, 0x35, 0x5d, 0x56, 0x2a, 0xf9, 0xda, 0x42, 0xe0, 0xeb, 0x85, 0x3e,
	0x3b, 0x86, 0xb0, 0x79, 0x49, 0xdb, 0xcc, 0xbe, 0x3f, 0xd3, 0x53, 0x3f, 0xcf, 0xf4, 0x14, 0xfe,
	0x17, 0x8a, 0x89, 0x24, 0x4d, 0x22, 0xda, 0x0e, 0x17, 0x04, 0x7f, 0x51, 0x60, 0xae, 0x6f, 0x7f,
	0xc9, 0xbc, 0x03, 0xdb, 0xb5, 0x8e, 0xd1, 0x43, 0xc8, 0x1d, 0xf7, 0xcf, 0x97, 0x8f, 0x58, 0x0c,
	0x7c, 0x1d, 0x45, 0x52, 0x09, 0x10, 0x9b, 0x10, 0xdf, 0xfe, 0xe6, 0x63, 0x96, 0x61, 0x69, 0x28,
	0x69, 0xf9, 0xa0, 0x6d, 0x40, 0x75, 0x41, 0x9f, 0xbb, 0x8c, 0x52, 0xe2, 0xca, 0x9e, 0x2c, 0x0d,
	0xf5, 0x44, 0xd6, 0x7f, 0x71, 0x30, 0xe5, 0x38, 0xbf, 0x84, 0xd6, 0x0a, 0x94, 0xae, 0x06, 0x94,
	0x72, 0x6f, 0x60, 0x71, 0x10, 0x95, 0x55, 0xd4, 0x47, 0x54, 0x71, 0xa0, 0x5a, 0xe3, 0xa5, 0xcb,
	0xa0, 0x8d, 0x0e, 0x2e, 0xe5, 0x3f, 0xa6, 0xc3, 0xd9, 0x7b, 0xd2, 0xb4, 0x58, 0xeb, 0x29, 0x21,
	0x68, 0x0b, 0xe6, 0x6d, 0xd2, 0x24, 0xd4, 0xf2, 0x1c, 0x77, 0xd7, 0xb2, 0x6d, 0x97, 0x08, 0xd1,
	0x6f, 0xe0, 0x4a, 0xe0, 0xeb, 0x6a, 0x54, 0xde, 0x2b, 0x14, 0x6c, 0x16, 0xa4, 0xed, 0x71, 0x64,
	0x42, 0x55, 0xc8, 0x36, 0x0e, 0x2c, 0xc6, 0x7b, 0xc9, 0xf7, 0x12, 0x9c, 0xa8, 0x15, 0x03, 0x5f,
	0x9f, 0x8b, 0x22, 0xc4, 0x08, 0x36, 0xa7, 0xc2, 0xe3, 0x96, 0x8d, 0x1e, 0xc1, 0x8c, 0xe7, 0x1c,
	0x12, 0x2e, 0x65, 0xd3, 0xa1, 0xac, 0x1a, 0xf8, 0xfa, 0x42, 0xe4, 0x34, 0x00, 0x63, 0x33, 0x1f,
	0xde, 0x63, 0xb9, 0x3b, 0x30, 0xc9, 0x1d, 0xde, 0x20, 0xea, 0x44, 0xa8, 0x55, 0x08, 0x7c, 0x3d,
	0x1f, 0xb9, 0x85, 0x66, 0x6c, 0x46, 0xf0, 0xe0, 0xe0, 0x4c, 0xde, 0x68, 0x70, 0x12, 0x73, 0x99,
	0x19, 0x37, 0x97, 0x9b, 0x90, 0x67, 0x62, 0xb7, 0x63, 0x35, 0x99, 0xdd, 0x2b, 0x86, 0x3a, 0x55,
	0x56, 0x2a, 0xd9, 0xda, 0x52, 0xe0, 0xeb, 0xc5, 0xc8, 0x21, 0x89, 0x62, 0x33, 0xc7, 0xc4, 0x8b,
	0xf8, 0x76, 0x65, 0xd9, 0xe2, 0xae, 0xc8, 0x6e, 0x11, 0x98, 0x8d, 0xcd, 0x26, 0xd9, 0x3f, 0xe2,
	0x36, 0xaa, 0x40, 0xc6, 0x25, 0xfb, 0x97, 0x5b, 0x96, 0xc8, 0x2c, 0xb2, 0x63, 0x73, 0xd2, 0x25,
	0xfb, 0x7f, 0xb4, 0x5b, 0x58, 0x0d, 0x67, 0x32, 0x21, 0x13, 0x27, 0xb0, 0xf1, 0x75, 0x02, 0xd2,
	0x75, 0x41, 0xd1, 0x0e, 0x64, 0xe5, 0x6a, 0xfc, 0x57, 0x1d, 0xfe, 0xce, 0x55, 0x13, 0x1f, 0x8a,
	0xd2, 0xed, 0xdf, 0xc2, 0x71, 0x64, 0xf4, 0x16, 0xf2, 0x03, 0xd3, 0xff, 0xff, 0xb5, 0x6e, 0x31,
	0xa5, 0xb4, 0x3a, 0x96, 0x22, 0xa3, 0x13, 0x98, 0x1b, 0xde, 0xe8, 0x5b, 0x23, 0xbd, 0x87, 0x58,
	0xa5, 0x7b, 0x37, 0x61, 0x49, 0x99, 0x77, 0x50, 0x1c, 0xb5, 0xc9, 0x95, 0x71, 0x41, 0xe4, 0x93,
	0xee, 0xdf, 0x94, 0x29, 0x25, 0x77, 0x20, 0x2b, 0x97, 0x77, 0x74, 0x27, 0x62, 0xf8, 0x9a, 0x4e,
	0x0c, 0x0f, 0x19, 0x7a, 0x05, 0xb9, 0xe4, 0x84, 0x95, 0xaf, 0xf7, 0x8a, 0x18, 0xa5, 0xca, 0x38,
	0x46, 0x1c, 0xba, 0xb6, 0xfd, 0xb9, 0xab, 0x29, 0xdf, 0xba, 0x9a, 0x72, 0xde, 0xd5, 0x94, 0x1f,
	0x5d, 0x4d, 0xf9, 0x70, 0xa1, 0xa5, 0xce, 0x2f, 0xb4, 0xd4, 0xf7, 0x0b, 0x2d, 0xf5, 0x7a, 0x9d,
	0x32, 0xef, 0xe0, 0x68, 0xaf, 0xda, 0x70, 0x5a, 0x46, 0x83, 0x34, 0x89, 0xbb, 0xc6, 0x89, 0x77,
	0xec, 0xb8, 0x87, 0x86, 0xa0, 0x7c, 0xad, 0xb3, 0x61, 0x9c, 0x24, 0x7e, 0xb4, 0xde, 0x69, 0x9b,
	0x88, 0xbd, 0x4c, 0xf8, 0x07, 0x7d, 0xf0, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x80, 0x31, 0x9e, 0xf3,
	0x86, 0x07, 0x00, 0x00,
}

func (this *MsgSignMintResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSignMintResponse)
	if !ok {
		that2, ok := that.(MsgSignMintResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgSignWithdrawResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSignWithdrawResponse)
	if !ok {
		that2, ok := that.(MsgSignWithdrawResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgTriggerSignMintResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgTriggerSignMintResponse)
	if !ok {
		that2, ok := that.(MsgTriggerSignMintResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgTriggerSignWithdrawResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgTriggerSignWithdrawResponse)
	if !ok {
		that2, ok := that.(MsgTriggerSignWithdrawResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgClaimFeeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgClaimFeeResponse)
	if !ok {
		that2, ok := that.(MsgClaimFeeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgClaimRefund) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgClaimRefund)
	if !ok {
		that2, ok := that.(MsgClaimRefund)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RefId != that1.RefId {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgClaimRefundResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgClaimRefundResponse)
	if !ok {
		that2, ok := that.(MsgClaimRefundResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SignMint defines a method for validators to co-sign a mint request to
	// a PeggedTokenBridge contract.
	SignMint(ctx context.Context, in *MsgSignMint, opts ...grpc.CallOption) (*MsgSignMintResponse, error)
	// SignWithdraw defines a method for validators to co-sign a withdraw request to
	// an OriginalTokenVault contract.
	SignWithdraw(ctx context.Context, in *MsgSignWithdraw, opts ...grpc.CallOption) (*MsgSignWithdrawResponse, error)
	// TriggerSignMint defines a method to trigger validators to co-sign a mint request.
	// Used if automatic event syncing failed.
	TriggerSignMint(ctx context.Context, in *MsgTriggerSignMint, opts ...grpc.CallOption) (*MsgTriggerSignMintResponse, error)
	// TriggerSignWithdraw defines a method to trigger validators to co-sign a withdraw request.
	// Used if automatic event syncing failed.
	TriggerSignWithdraw(ctx context.Context, in *MsgTriggerSignWithdraw, opts ...grpc.CallOption) (*MsgTriggerSignWithdrawResponse, error)
	// ClaimFee defines a method for SGN delegators to trigger a claim of pegbridge fee.
	ClaimFee(ctx context.Context, in *MsgClaimFee, opts ...grpc.CallOption) (*MsgClaimFeeResponse, error)
	// ClaimRefund defines a method to trigger a refund process
	ClaimRefund(ctx context.Context, in *MsgClaimRefund, opts ...grpc.CallOption) (*MsgClaimRefundResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SignMint(ctx context.Context, in *MsgSignMint, opts ...grpc.CallOption) (*MsgSignMintResponse, error) {
	out := new(MsgSignMintResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Msg/SignMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignWithdraw(ctx context.Context, in *MsgSignWithdraw, opts ...grpc.CallOption) (*MsgSignWithdrawResponse, error) {
	out := new(MsgSignWithdrawResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Msg/SignWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TriggerSignMint(ctx context.Context, in *MsgTriggerSignMint, opts ...grpc.CallOption) (*MsgTriggerSignMintResponse, error) {
	out := new(MsgTriggerSignMintResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Msg/TriggerSignMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TriggerSignWithdraw(ctx context.Context, in *MsgTriggerSignWithdraw, opts ...grpc.CallOption) (*MsgTriggerSignWithdrawResponse, error) {
	out := new(MsgTriggerSignWithdrawResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Msg/TriggerSignWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimFee(ctx context.Context, in *MsgClaimFee, opts ...grpc.CallOption) (*MsgClaimFeeResponse, error) {
	out := new(MsgClaimFeeResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Msg/ClaimFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimRefund(ctx context.Context, in *MsgClaimRefund, opts ...grpc.CallOption) (*MsgClaimRefundResponse, error) {
	out := new(MsgClaimRefundResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Msg/ClaimRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SignMint defines a method for validators to co-sign a mint request to
	// a PeggedTokenBridge contract.
	SignMint(context.Context, *MsgSignMint) (*MsgSignMintResponse, error)
	// SignWithdraw defines a method for validators to co-sign a withdraw request to
	// an OriginalTokenVault contract.
	SignWithdraw(context.Context, *MsgSignWithdraw) (*MsgSignWithdrawResponse, error)
	// TriggerSignMint defines a method to trigger validators to co-sign a mint request.
	// Used if automatic event syncing failed.
	TriggerSignMint(context.Context, *MsgTriggerSignMint) (*MsgTriggerSignMintResponse, error)
	// TriggerSignWithdraw defines a method to trigger validators to co-sign a withdraw request.
	// Used if automatic event syncing failed.
	TriggerSignWithdraw(context.Context, *MsgTriggerSignWithdraw) (*MsgTriggerSignWithdrawResponse, error)
	// ClaimFee defines a method for SGN delegators to trigger a claim of pegbridge fee.
	ClaimFee(context.Context, *MsgClaimFee) (*MsgClaimFeeResponse, error)
	// ClaimRefund defines a method to trigger a refund process
	ClaimRefund(context.Context, *MsgClaimRefund) (*MsgClaimRefundResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SignMint(ctx context.Context, req *MsgSignMint) (*MsgSignMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMint not implemented")
}
func (*UnimplementedMsgServer) SignWithdraw(ctx context.Context, req *MsgSignWithdraw) (*MsgSignWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignWithdraw not implemented")
}
func (*UnimplementedMsgServer) TriggerSignMint(ctx context.Context, req *MsgTriggerSignMint) (*MsgTriggerSignMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSignMint not implemented")
}
func (*UnimplementedMsgServer) TriggerSignWithdraw(ctx context.Context, req *MsgTriggerSignWithdraw) (*MsgTriggerSignWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSignWithdraw not implemented")
}
func (*UnimplementedMsgServer) ClaimFee(ctx context.Context, req *MsgClaimFee) (*MsgClaimFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimFee not implemented")
}
func (*UnimplementedMsgServer) ClaimRefund(ctx context.Context, req *MsgClaimRefund) (*MsgClaimRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRefund not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SignMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Msg/SignMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignMint(ctx, req.(*MsgSignMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Msg/SignWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignWithdraw(ctx, req.(*MsgSignWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TriggerSignMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTriggerSignMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TriggerSignMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Msg/TriggerSignMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TriggerSignMint(ctx, req.(*MsgTriggerSignMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TriggerSignWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTriggerSignWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TriggerSignWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Msg/TriggerSignWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TriggerSignWithdraw(ctx, req.(*MsgTriggerSignWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Msg/ClaimFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimFee(ctx, req.(*MsgClaimFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimRefund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Msg/ClaimRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimRefund(ctx, req.(*MsgClaimRefund))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgn.pegbridge.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignMint",
			Handler:    _Msg_SignMint_Handler,
		},
		{
			MethodName: "SignWithdraw",
			Handler:    _Msg_SignWithdraw_Handler,
		},
		{
			MethodName: "TriggerSignMint",
			Handler:    _Msg_TriggerSignMint_Handler,
		},
		{
			MethodName: "TriggerSignWithdraw",
			Handler:    _Msg_TriggerSignWithdraw_Handler,
		},
		{
			MethodName: "ClaimFee",
			Handler:    _Msg_ClaimFee_Handler,
		},
		{
			MethodName: "ClaimRefund",
			Handler:    _Msg_ClaimRefund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgn/pegbridge/v1/tx.proto",
}

func (m *MsgSignMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MintId) > 0 {
		i -= len(m.MintId)
		copy(dAtA[i:], m.MintId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MintId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSignWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithdrawId) > 0 {
		i -= len(m.WithdrawId)
		copy(dAtA[i:], m.WithdrawId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTriggerSignMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerSignMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerSignMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MintId) > 0 {
		i -= len(m.MintId)
		copy(dAtA[i:], m.MintId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MintId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTriggerSignMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerSignMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerSignMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTriggerSignWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerSignWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerSignWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithdrawId) > 0 {
		i -= len(m.WithdrawId)
		copy(dAtA[i:], m.WithdrawId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTriggerSignWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerSignWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerSignWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsValidator {
		i--
		if m.IsValidator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TokenAddress) > 0 {
		i -= len(m.TokenAddress)
		copy(dAtA[i:], m.TokenAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimRefund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRefund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRefund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRefundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRefundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRefundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSignMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSignWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTriggerSignMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTriggerSignMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTriggerSignWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTriggerSignWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.TokenAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsValidator {
		n += 2
	}
	return n
}

func (m *MsgClaimFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimRefund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimRefundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSignMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerSignMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerSignMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerSignMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerSignMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerSignMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerSignMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerSignWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerSignWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerSignWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerSignWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerSignWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerSignWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValidator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValidator = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRefund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRefund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRefund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRefundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRefundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRefundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
