// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/pegbridge/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/celer-network/sgn-v2/common/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryConfigRequest struct {
}

func (m *QueryConfigRequest) Reset()         { *m = QueryConfigRequest{} }
func (m *QueryConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConfigRequest) ProtoMessage()    {}
func (*QueryConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{2}
}
func (m *QueryConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConfigRequest.Merge(m, src)
}
func (m *QueryConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConfigRequest proto.InternalMessageInfo

// QueryOrigPeggedPairsRequest is the request type for the Query/OrigPeggedPairs RPC method.
type QueryOrigPeggedPairsRequest struct {
	Orig   *types.ContractInfo `protobuf:"bytes,1,opt,name=orig,proto3" json:"orig,omitempty"`
	Pegged *types.ContractInfo `protobuf:"bytes,2,opt,name=pegged,proto3" json:"pegged,omitempty"`
}

func (m *QueryOrigPeggedPairsRequest) Reset()         { *m = QueryOrigPeggedPairsRequest{} }
func (m *QueryOrigPeggedPairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrigPeggedPairsRequest) ProtoMessage()    {}
func (*QueryOrigPeggedPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{3}
}
func (m *QueryOrigPeggedPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrigPeggedPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrigPeggedPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrigPeggedPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrigPeggedPairsRequest.Merge(m, src)
}
func (m *QueryOrigPeggedPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrigPeggedPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrigPeggedPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrigPeggedPairsRequest proto.InternalMessageInfo

func (m *QueryOrigPeggedPairsRequest) GetOrig() *types.ContractInfo {
	if m != nil {
		return m.Orig
	}
	return nil
}

func (m *QueryOrigPeggedPairsRequest) GetPegged() *types.ContractInfo {
	if m != nil {
		return m.Pegged
	}
	return nil
}

// QueryOrigPeggedPairsResponse is the response type for the Query/OrigPeggedPairs RPC method.
type QueryOrigPeggedPairsResponse struct {
	Pairs []OrigPeggedPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
}

func (m *QueryOrigPeggedPairsResponse) Reset()         { *m = QueryOrigPeggedPairsResponse{} }
func (m *QueryOrigPeggedPairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrigPeggedPairsResponse) ProtoMessage()    {}
func (*QueryOrigPeggedPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{4}
}
func (m *QueryOrigPeggedPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrigPeggedPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrigPeggedPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrigPeggedPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrigPeggedPairsResponse.Merge(m, src)
}
func (m *QueryOrigPeggedPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrigPeggedPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrigPeggedPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrigPeggedPairsResponse proto.InternalMessageInfo

func (m *QueryOrigPeggedPairsResponse) GetPairs() []OrigPeggedPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

// QueryEstimatedAmountFeesRequest is the request type for the Query/EstimatedAmountFees RPC method.
type QueryEstimatedAmountFeesRequest struct {
	Pair          OrigPeggedPair `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair"`
	RequestAmount string         `protobuf:"bytes,2,opt,name=request_amount,json=requestAmount,proto3" json:"request_amount,omitempty"`
	Mint          bool           `protobuf:"varint,3,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (m *QueryEstimatedAmountFeesRequest) Reset()         { *m = QueryEstimatedAmountFeesRequest{} }
func (m *QueryEstimatedAmountFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimatedAmountFeesRequest) ProtoMessage()    {}
func (*QueryEstimatedAmountFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{5}
}
func (m *QueryEstimatedAmountFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimatedAmountFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimatedAmountFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimatedAmountFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimatedAmountFeesRequest.Merge(m, src)
}
func (m *QueryEstimatedAmountFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimatedAmountFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimatedAmountFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimatedAmountFeesRequest proto.InternalMessageInfo

func (m *QueryEstimatedAmountFeesRequest) GetPair() OrigPeggedPair {
	if m != nil {
		return m.Pair
	}
	return OrigPeggedPair{}
}

func (m *QueryEstimatedAmountFeesRequest) GetRequestAmount() string {
	if m != nil {
		return m.RequestAmount
	}
	return ""
}

func (m *QueryEstimatedAmountFeesRequest) GetMint() bool {
	if m != nil {
		return m.Mint
	}
	return false
}

// QueryEstimatedAmountFeesResponse is the response type for the Query/EstimatedAmountFees RPC method.
type QueryEstimatedAmountFeesResponse struct {
	ReceiveAmount string `protobuf:"bytes,1,opt,name=receive_amount,json=receiveAmount,proto3" json:"receive_amount,omitempty"`
	BaseFee       string `protobuf:"bytes,2,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	PercentageFee string `protobuf:"bytes,3,opt,name=percentage_fee,json=percentageFee,proto3" json:"percentage_fee,omitempty"`
}

func (m *QueryEstimatedAmountFeesResponse) Reset()         { *m = QueryEstimatedAmountFeesResponse{} }
func (m *QueryEstimatedAmountFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimatedAmountFeesResponse) ProtoMessage()    {}
func (*QueryEstimatedAmountFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{6}
}
func (m *QueryEstimatedAmountFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimatedAmountFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimatedAmountFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimatedAmountFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimatedAmountFeesResponse.Merge(m, src)
}
func (m *QueryEstimatedAmountFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimatedAmountFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimatedAmountFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimatedAmountFeesResponse proto.InternalMessageInfo

func (m *QueryEstimatedAmountFeesResponse) GetReceiveAmount() string {
	if m != nil {
		return m.ReceiveAmount
	}
	return ""
}

func (m *QueryEstimatedAmountFeesResponse) GetBaseFee() string {
	if m != nil {
		return m.BaseFee
	}
	return ""
}

func (m *QueryEstimatedAmountFeesResponse) GetPercentageFee() string {
	if m != nil {
		return m.PercentageFee
	}
	return ""
}

// QueryDepositInfoRequest is the request type for the Query/DepositInfo RPC method.
type QueryDepositInfoRequest struct {
	DepositId string `protobuf:"bytes,1,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
}

func (m *QueryDepositInfoRequest) Reset()         { *m = QueryDepositInfoRequest{} }
func (m *QueryDepositInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositInfoRequest) ProtoMessage()    {}
func (*QueryDepositInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{7}
}
func (m *QueryDepositInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositInfoRequest.Merge(m, src)
}
func (m *QueryDepositInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositInfoRequest proto.InternalMessageInfo

func (m *QueryDepositInfoRequest) GetDepositId() string {
	if m != nil {
		return m.DepositId
	}
	return ""
}

// QueryDepositInfoResponse is the response type for the Query/DepositInfo RPC method.
type QueryDepositInfoResponse struct {
	DepositInfo DepositInfo `protobuf:"bytes,1,opt,name=deposit_info,json=depositInfo,proto3" json:"deposit_info"`
}

func (m *QueryDepositInfoResponse) Reset()         { *m = QueryDepositInfoResponse{} }
func (m *QueryDepositInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositInfoResponse) ProtoMessage()    {}
func (*QueryDepositInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{8}
}
func (m *QueryDepositInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositInfoResponse.Merge(m, src)
}
func (m *QueryDepositInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositInfoResponse proto.InternalMessageInfo

func (m *QueryDepositInfoResponse) GetDepositInfo() DepositInfo {
	if m != nil {
		return m.DepositInfo
	}
	return DepositInfo{}
}

// QueryWithdrawInfoRequest is the request type for the Query/WithdrawInfo RPC method.
type QueryWithdrawInfoRequest struct {
	WithdrawId string `protobuf:"bytes,1,opt,name=withdraw_id,json=withdrawId,proto3" json:"withdraw_id,omitempty"`
}

func (m *QueryWithdrawInfoRequest) Reset()         { *m = QueryWithdrawInfoRequest{} }
func (m *QueryWithdrawInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawInfoRequest) ProtoMessage()    {}
func (*QueryWithdrawInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{9}
}
func (m *QueryWithdrawInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawInfoRequest.Merge(m, src)
}
func (m *QueryWithdrawInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawInfoRequest proto.InternalMessageInfo

func (m *QueryWithdrawInfoRequest) GetWithdrawId() string {
	if m != nil {
		return m.WithdrawId
	}
	return ""
}

// QueryWithdrawInfoResponse is the response type for the Query/WithdrawInfo RPC method.
type QueryWithdrawInfoResponse struct {
	WithdrawInfo WithdrawInfo `protobuf:"bytes,1,opt,name=withdraw_info,json=withdrawInfo,proto3" json:"withdraw_info"`
}

func (m *QueryWithdrawInfoResponse) Reset()         { *m = QueryWithdrawInfoResponse{} }
func (m *QueryWithdrawInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawInfoResponse) ProtoMessage()    {}
func (*QueryWithdrawInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{10}
}
func (m *QueryWithdrawInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawInfoResponse.Merge(m, src)
}
func (m *QueryWithdrawInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawInfoResponse proto.InternalMessageInfo

func (m *QueryWithdrawInfoResponse) GetWithdrawInfo() WithdrawInfo {
	if m != nil {
		return m.WithdrawInfo
	}
	return WithdrawInfo{}
}

// QueryMintInfoRequest is the request type for the Query/MintInfo RPC method.
type QueryMintInfoRequest struct {
	MintId string `protobuf:"bytes,1,opt,name=mint_id,json=mintId,proto3" json:"mint_id,omitempty"`
}

func (m *QueryMintInfoRequest) Reset()         { *m = QueryMintInfoRequest{} }
func (m *QueryMintInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMintInfoRequest) ProtoMessage()    {}
func (*QueryMintInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{11}
}
func (m *QueryMintInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMintInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMintInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMintInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMintInfoRequest.Merge(m, src)
}
func (m *QueryMintInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMintInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMintInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMintInfoRequest proto.InternalMessageInfo

func (m *QueryMintInfoRequest) GetMintId() string {
	if m != nil {
		return m.MintId
	}
	return ""
}

// QueryMintInfoResponse is the response type for the Query/MintInfo RPC method.
type QueryMintInfoResponse struct {
	MintInfo MintInfo `protobuf:"bytes,1,opt,name=mint_info,json=mintInfo,proto3" json:"mint_info"`
}

func (m *QueryMintInfoResponse) Reset()         { *m = QueryMintInfoResponse{} }
func (m *QueryMintInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMintInfoResponse) ProtoMessage()    {}
func (*QueryMintInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{12}
}
func (m *QueryMintInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMintInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMintInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMintInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMintInfoResponse.Merge(m, src)
}
func (m *QueryMintInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMintInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMintInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMintInfoResponse proto.InternalMessageInfo

func (m *QueryMintInfoResponse) GetMintInfo() MintInfo {
	if m != nil {
		return m.MintInfo
	}
	return MintInfo{}
}

// QueryBurnInfoRequest is the request type for the Query/BurnInfo RPC method.
type QueryBurnInfoRequest struct {
	BurnId string `protobuf:"bytes,1,opt,name=burn_id,json=burnId,proto3" json:"burn_id,omitempty"`
}

func (m *QueryBurnInfoRequest) Reset()         { *m = QueryBurnInfoRequest{} }
func (m *QueryBurnInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBurnInfoRequest) ProtoMessage()    {}
func (*QueryBurnInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{13}
}
func (m *QueryBurnInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBurnInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBurnInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBurnInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBurnInfoRequest.Merge(m, src)
}
func (m *QueryBurnInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBurnInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBurnInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBurnInfoRequest proto.InternalMessageInfo

func (m *QueryBurnInfoRequest) GetBurnId() string {
	if m != nil {
		return m.BurnId
	}
	return ""
}

// QueryBurnInfoResponse is the response type for the Query/BurnInfo RPC method.
type QueryBurnInfoResponse struct {
	BurnInfo BurnInfo `protobuf:"bytes,1,opt,name=burn_info,json=burnInfo,proto3" json:"burn_info"`
}

func (m *QueryBurnInfoResponse) Reset()         { *m = QueryBurnInfoResponse{} }
func (m *QueryBurnInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBurnInfoResponse) ProtoMessage()    {}
func (*QueryBurnInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{14}
}
func (m *QueryBurnInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBurnInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBurnInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBurnInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBurnInfoResponse.Merge(m, src)
}
func (m *QueryBurnInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBurnInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBurnInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBurnInfoResponse proto.InternalMessageInfo

func (m *QueryBurnInfoResponse) GetBurnInfo() BurnInfo {
	if m != nil {
		return m.BurnInfo
	}
	return BurnInfo{}
}

// QueryFeeClaimInfoRequest is the request type for the Query/FeeClaimInfo RPC method.
type QueryFeeClaimInfoRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Nonce   uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryFeeClaimInfoRequest) Reset()         { *m = QueryFeeClaimInfoRequest{} }
func (m *QueryFeeClaimInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeClaimInfoRequest) ProtoMessage()    {}
func (*QueryFeeClaimInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{15}
}
func (m *QueryFeeClaimInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeClaimInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeClaimInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeClaimInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeClaimInfoRequest.Merge(m, src)
}
func (m *QueryFeeClaimInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeClaimInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeClaimInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeClaimInfoRequest proto.InternalMessageInfo

func (m *QueryFeeClaimInfoRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryFeeClaimInfoRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryFeeClaimInfoResponse is the response type for the Query/FeeClaimInfo RPC method.
type QueryFeeClaimInfoResponse struct {
	FeeClaimInfo FeeClaimInfo `protobuf:"bytes,1,opt,name=fee_claim_info,json=feeClaimInfo,proto3" json:"fee_claim_info"`
}

func (m *QueryFeeClaimInfoResponse) Reset()         { *m = QueryFeeClaimInfoResponse{} }
func (m *QueryFeeClaimInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeClaimInfoResponse) ProtoMessage()    {}
func (*QueryFeeClaimInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{16}
}
func (m *QueryFeeClaimInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeClaimInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeClaimInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeClaimInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeClaimInfoResponse.Merge(m, src)
}
func (m *QueryFeeClaimInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeClaimInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeClaimInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeClaimInfoResponse proto.InternalMessageInfo

func (m *QueryFeeClaimInfoResponse) GetFeeClaimInfo() FeeClaimInfo {
	if m != nil {
		return m.FeeClaimInfo
	}
	return FeeClaimInfo{}
}

// QuerySupplyInfoRequest is the request type for the Query/SupplyInfo RPC method.
type QuerySupplyInfoRequest struct {
	PeggedChainId uint64 `protobuf:"varint,1,opt,name=pegged_chain_id,json=peggedChainId,proto3" json:"pegged_chain_id,omitempty"`
	PeggedAddress string `protobuf:"bytes,2,opt,name=pegged_address,json=peggedAddress,proto3" json:"pegged_address,omitempty"`
}

func (m *QuerySupplyInfoRequest) Reset()         { *m = QuerySupplyInfoRequest{} }
func (m *QuerySupplyInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySupplyInfoRequest) ProtoMessage()    {}
func (*QuerySupplyInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{17}
}
func (m *QuerySupplyInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupplyInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupplyInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupplyInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupplyInfoRequest.Merge(m, src)
}
func (m *QuerySupplyInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupplyInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupplyInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupplyInfoRequest proto.InternalMessageInfo

func (m *QuerySupplyInfoRequest) GetPeggedChainId() uint64 {
	if m != nil {
		return m.PeggedChainId
	}
	return 0
}

func (m *QuerySupplyInfoRequest) GetPeggedAddress() string {
	if m != nil {
		return m.PeggedAddress
	}
	return ""
}

// QuerySupplyInfoResponse is the response type for the Query/SupplyInfo RPC method.
type QuerySupplyInfoResponse struct {
	Total string `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Cap   string `protobuf:"bytes,2,opt,name=cap,proto3" json:"cap,omitempty"`
}

func (m *QuerySupplyInfoResponse) Reset()         { *m = QuerySupplyInfoResponse{} }
func (m *QuerySupplyInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySupplyInfoResponse) ProtoMessage()    {}
func (*QuerySupplyInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{18}
}
func (m *QuerySupplyInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupplyInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupplyInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupplyInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupplyInfoResponse.Merge(m, src)
}
func (m *QuerySupplyInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupplyInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupplyInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupplyInfoResponse proto.InternalMessageInfo

func (m *QuerySupplyInfoResponse) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *QuerySupplyInfoResponse) GetCap() string {
	if m != nil {
		return m.Cap
	}
	return ""
}

// QueryRefundClaimInfoRequest is the request type for the Query/RefundClaimInfo RPC method.
type QueryRefundClaimInfoRequest struct {
	DepositId string `protobuf:"bytes,1,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
}

func (m *QueryRefundClaimInfoRequest) Reset()         { *m = QueryRefundClaimInfoRequest{} }
func (m *QueryRefundClaimInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRefundClaimInfoRequest) ProtoMessage()    {}
func (*QueryRefundClaimInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{19}
}
func (m *QueryRefundClaimInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRefundClaimInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRefundClaimInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRefundClaimInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRefundClaimInfoRequest.Merge(m, src)
}
func (m *QueryRefundClaimInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRefundClaimInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRefundClaimInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRefundClaimInfoRequest proto.InternalMessageInfo

func (m *QueryRefundClaimInfoRequest) GetDepositId() string {
	if m != nil {
		return m.DepositId
	}
	return ""
}

// QueryRefundClaimInfoResponse is the response type for the Query/RefundClaimInfo RPC method.
type QueryRefundClaimInfoResponse struct {
	WithdrawId string `protobuf:"bytes,1,opt,name=withdraw_id,json=withdrawId,proto3" json:"withdraw_id,omitempty"`
}

func (m *QueryRefundClaimInfoResponse) Reset()         { *m = QueryRefundClaimInfoResponse{} }
func (m *QueryRefundClaimInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRefundClaimInfoResponse) ProtoMessage()    {}
func (*QueryRefundClaimInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26edb5787af23cdd, []int{20}
}
func (m *QueryRefundClaimInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRefundClaimInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRefundClaimInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRefundClaimInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRefundClaimInfoResponse.Merge(m, src)
}
func (m *QueryRefundClaimInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRefundClaimInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRefundClaimInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRefundClaimInfoResponse proto.InternalMessageInfo

func (m *QueryRefundClaimInfoResponse) GetWithdrawId() string {
	if m != nil {
		return m.WithdrawId
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "sgn.pegbridge.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "sgn.pegbridge.v1.QueryParamsResponse")
	proto.RegisterType((*QueryConfigRequest)(nil), "sgn.pegbridge.v1.QueryConfigRequest")
	proto.RegisterType((*QueryOrigPeggedPairsRequest)(nil), "sgn.pegbridge.v1.QueryOrigPeggedPairsRequest")
	proto.RegisterType((*QueryOrigPeggedPairsResponse)(nil), "sgn.pegbridge.v1.QueryOrigPeggedPairsResponse")
	proto.RegisterType((*QueryEstimatedAmountFeesRequest)(nil), "sgn.pegbridge.v1.QueryEstimatedAmountFeesRequest")
	proto.RegisterType((*QueryEstimatedAmountFeesResponse)(nil), "sgn.pegbridge.v1.QueryEstimatedAmountFeesResponse")
	proto.RegisterType((*QueryDepositInfoRequest)(nil), "sgn.pegbridge.v1.QueryDepositInfoRequest")
	proto.RegisterType((*QueryDepositInfoResponse)(nil), "sgn.pegbridge.v1.QueryDepositInfoResponse")
	proto.RegisterType((*QueryWithdrawInfoRequest)(nil), "sgn.pegbridge.v1.QueryWithdrawInfoRequest")
	proto.RegisterType((*QueryWithdrawInfoResponse)(nil), "sgn.pegbridge.v1.QueryWithdrawInfoResponse")
	proto.RegisterType((*QueryMintInfoRequest)(nil), "sgn.pegbridge.v1.QueryMintInfoRequest")
	proto.RegisterType((*QueryMintInfoResponse)(nil), "sgn.pegbridge.v1.QueryMintInfoResponse")
	proto.RegisterType((*QueryBurnInfoRequest)(nil), "sgn.pegbridge.v1.QueryBurnInfoRequest")
	proto.RegisterType((*QueryBurnInfoResponse)(nil), "sgn.pegbridge.v1.QueryBurnInfoResponse")
	proto.RegisterType((*QueryFeeClaimInfoRequest)(nil), "sgn.pegbridge.v1.QueryFeeClaimInfoRequest")
	proto.RegisterType((*QueryFeeClaimInfoResponse)(nil), "sgn.pegbridge.v1.QueryFeeClaimInfoResponse")
	proto.RegisterType((*QuerySupplyInfoRequest)(nil), "sgn.pegbridge.v1.QuerySupplyInfoRequest")
	proto.RegisterType((*QuerySupplyInfoResponse)(nil), "sgn.pegbridge.v1.QuerySupplyInfoResponse")
	proto.RegisterType((*QueryRefundClaimInfoRequest)(nil), "sgn.pegbridge.v1.QueryRefundClaimInfoRequest")
	proto.RegisterType((*QueryRefundClaimInfoResponse)(nil), "sgn.pegbridge.v1.QueryRefundClaimInfoResponse")
}

func init() { proto.RegisterFile("sgn/pegbridge/v1/query.proto", fileDescriptor_26edb5787af23cdd) }

var fileDescriptor_26edb5787af23cdd = []byte{
	// 1169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x97, 0x5f, 0x4f, 0x2b, 0xc5,
	0x1b, 0xc7, 0x59, 0x28, 0x05, 0x1e, 0x38, 0x7f, 0x32, 0x87, 0xdf, 0xef, 0xf4, 0x2c, 0x50, 0x9a,
	0x55, 0x0e, 0x20, 0x69, 0x37, 0x40, 0x34, 0x46, 0x8f, 0x31, 0x80, 0x92, 0xf4, 0x98, 0x13, 0xb1,
	0x26, 0x9a, 0x18, 0x93, 0x66, 0xdb, 0x9d, 0x2e, 0x1b, 0xe9, 0xcc, 0x9e, 0xdd, 0x2d, 0x48, 0x08,
	0x37, 0x7a, 0x63, 0xf4, 0x46, 0xe3, 0x8d, 0x5e, 0xe8, 0x3b, 0xf0, 0x7d, 0x9c, 0xcb, 0x93, 0x18,
	0x13, 0xaf, 0x8c, 0x01, 0x5f, 0x88, 0x99, 0x99, 0x67, 0xbb, 0xdb, 0x4e, 0x97, 0xe2, 0xdd, 0xce,
	0x33, 0xcf, 0xf3, 0x7c, 0x3f, 0x33, 0xd3, 0x99, 0x6f, 0x0a, 0xcb, 0x91, 0xc7, 0xec, 0x80, 0x7a,
	0xad, 0xd0, 0x77, 0x3d, 0x6a, 0x9f, 0x6e, 0xdb, 0xcf, 0x7b, 0x34, 0x3c, 0xaf, 0x05, 0x21, 0x8f,
	0x39, 0xb9, 0x1f, 0x79, 0xac, 0xd6, 0x9f, 0xad, 0x9d, 0x6e, 0x9b, 0x8b, 0x1e, 0xf7, 0xb8, 0x9c,
	0xb4, 0xc5, 0x97, 0xca, 0x33, 0x97, 0x3d, 0xce, 0xbd, 0x13, 0x6a, 0x3b, 0x81, 0x6f, 0x3b, 0x8c,
	0xf1, 0xd8, 0x89, 0x7d, 0xce, 0x22, 0x9c, 0x35, 0x85, 0x46, 0x9b, 0x77, 0xbb, 0x9c, 0x09, 0x01,
	0xf5, 0x85, 0x73, 0x15, 0x4d, 0x3f, 0x95, 0x93, 0x19, 0xd6, 0x22, 0x90, 0x8f, 0x04, 0xd2, 0x91,
	0x13, 0x3a, 0xdd, 0xa8, 0x41, 0x9f, 0xf7, 0x68, 0x14, 0x5b, 0xcf, 0xe0, 0xc1, 0x40, 0x34, 0x0a,
	0x38, 0x8b, 0x28, 0x79, 0x03, 0x8a, 0x81, 0x8c, 0x94, 0x8c, 0x8a, 0xb1, 0x31, 0xbf, 0x53, 0xaa,
	0x0d, 0xaf, 0xa0, 0xa6, 0x2a, 0xf6, 0x0b, 0x2f, 0xfe, 0x5a, 0x9d, 0x68, 0x60, 0x76, 0x5f, 0xe4,
	0x80, 0xb3, 0x8e, 0xef, 0x25, 0x22, 0x5f, 0x1b, 0xb0, 0x24, 0xc3, 0x1f, 0x86, 0xbe, 0x77, 0x44,
	0x3d, 0x8f, 0xba, 0x47, 0x8e, 0x1f, 0x26, 0x10, 0xc4, 0x86, 0x02, 0x0f, 0x7d, 0x0f, 0xb5, 0x96,
	0xa4, 0x16, 0xae, 0xee, 0x74, 0xbb, 0x76, 0xc0, 0x59, 0x1c, 0x3a, 0xed, 0xb8, 0xce, 0x3a, 0xbc,
	0x21, 0x13, 0xc9, 0x2e, 0x14, 0x03, 0xd9, 0xa6, 0x34, 0x39, 0xbe, 0x04, 0x53, 0xad, 0xcf, 0x61,
	0x79, 0x34, 0x04, 0xae, 0xf9, 0x09, 0x4c, 0x07, 0x22, 0x50, 0x32, 0x2a, 0x53, 0x1b, 0xf3, 0x3b,
	0x15, 0x7d, 0xc9, 0x83, 0x95, 0xb8, 0x74, 0x55, 0x64, 0xfd, 0x64, 0xc0, 0xaa, 0x6c, 0xff, 0x7e,
	0x14, 0xfb, 0x5d, 0x27, 0xa6, 0xee, 0x5e, 0x97, 0xf7, 0x58, 0x7c, 0x48, 0x69, 0x7f, 0x9d, 0x6f,
	0x41, 0x41, 0x24, 0xe3, 0x3a, 0x6f, 0x2b, 0x20, 0x6b, 0xc8, 0x1a, 0xdc, 0x0d, 0x55, 0x9b, 0xa6,
	0x23, 0x1b, 0xcb, 0xa5, 0xcf, 0x35, 0xee, 0x60, 0x54, 0xa9, 0x11, 0x02, 0x85, 0xae, 0xcf, 0xe2,
	0xd2, 0x54, 0xc5, 0xd8, 0x98, 0x6d, 0xc8, 0x6f, 0xeb, 0x3b, 0x03, 0x2a, 0xf9, 0x68, 0xb8, 0x7a,
	0xd9, 0xbf, 0x4d, 0xfd, 0x53, 0x9a, 0xf4, 0x37, 0x92, 0xfe, 0x32, 0x8a, 0xfd, 0x1f, 0xc1, 0x6c,
	0xcb, 0x89, 0x68, 0xb3, 0x43, 0x29, 0x02, 0xcc, 0x88, 0xf1, 0x21, 0x95, 0x1d, 0x02, 0x1a, 0xb6,
	0x29, 0x8b, 0x1d, 0x4f, 0x25, 0x4c, 0xa9, 0x0e, 0x69, 0xf4, 0x90, 0x52, 0xeb, 0x4d, 0x78, 0x28,
	0x61, 0xde, 0xa3, 0x01, 0x8f, 0x7c, 0x75, 0x44, 0xb8, 0x3f, 0x2b, 0x00, 0xae, 0x8a, 0x36, 0x7d,
	0x17, 0xf5, 0xe7, 0x30, 0x52, 0x77, 0xad, 0x16, 0x94, 0xf4, 0x4a, 0xc4, 0x3f, 0x84, 0x85, 0x7e,
	0x29, 0xeb, 0x70, 0xdc, 0xe2, 0x15, 0x7d, 0x8b, 0x33, 0xc5, 0xb8, 0xbf, 0xf3, 0x6e, 0x1a, 0xb2,
	0xde, 0x46, 0x8d, 0x4f, 0xfd, 0xf8, 0xd8, 0x0d, 0x9d, 0xb3, 0x2c, 0xde, 0x2a, 0xcc, 0x9f, 0x61,
	0x38, 0xe5, 0x83, 0x24, 0x54, 0x77, 0xad, 0x0e, 0x3c, 0x1a, 0x51, 0x8c, 0x84, 0x75, 0xb8, 0x93,
	0x56, 0xa7, 0x88, 0x65, 0x1d, 0x31, 0x5b, 0x8e, 0x8c, 0x0b, 0x67, 0x99, 0x98, 0x65, 0xc3, 0xa2,
	0xd4, 0x79, 0xe6, 0xb3, 0x81, 0xfd, 0x7b, 0x08, 0x33, 0xe2, 0xc0, 0x53, 0xb8, 0xa2, 0x18, 0xd6,
	0x5d, 0xeb, 0x13, 0xf8, 0xdf, 0x50, 0x01, 0x42, 0xbd, 0x03, 0x73, 0xaa, 0x22, 0x05, 0x32, 0x75,
	0xa0, 0xa4, 0x0c, 0x61, 0x66, 0xbb, 0x38, 0xee, 0x83, 0xec, 0xf7, 0x42, 0x36, 0x04, 0xd2, 0xea,
	0x85, 0x2c, 0x03, 0x22, 0x86, 0x19, 0x90, 0xb4, 0x20, 0x05, 0x51, 0x15, 0x37, 0x82, 0x24, 0x65,
	0x09, 0x48, 0x0b, 0xc7, 0xd6, 0x53, 0x3c, 0xb6, 0x43, 0x4a, 0x0f, 0x4e, 0x1c, 0xbf, 0x9b, 0x85,
	0x29, 0xc1, 0x8c, 0xe3, 0xba, 0x21, 0x8d, 0x22, 0x84, 0x49, 0x86, 0x64, 0x11, 0xa6, 0x19, 0x67,
	0x6d, 0xf5, 0x4b, 0x2e, 0x34, 0xd4, 0xc0, 0xf2, 0xf0, 0x14, 0x07, 0x7b, 0x21, 0xe7, 0x53, 0xb8,
	0xdb, 0xa1, 0xb4, 0xd9, 0x16, 0x13, 0x63, 0x8e, 0x31, 0x5b, 0x9f, 0x1c, 0x63, 0x27, 0x13, 0xb3,
	0x3c, 0xf8, 0xbf, 0x14, 0xfa, 0xb8, 0x17, 0x04, 0x27, 0xe7, 0x59, 0xe4, 0xc7, 0x70, 0x4f, 0x3d,
	0x5a, 0xcd, 0xf6, 0xb1, 0xe3, 0xf7, 0xf7, 0xb1, 0x20, 0xee, 0x92, 0x08, 0x1f, 0x88, 0x68, 0xdd,
	0x55, 0x57, 0x4e, 0xe6, 0x25, 0x2b, 0x9c, 0x4c, 0xae, 0x9c, 0x88, 0xee, 0xa9, 0xa0, 0xb5, 0x87,
	0x57, 0x2e, 0x2b, 0x84, 0xeb, 0x59, 0x84, 0xe9, 0x98, 0xc7, 0xce, 0x09, 0x6e, 0x8d, 0x1a, 0x90,
	0xfb, 0x30, 0xd5, 0x76, 0x02, 0x6c, 0x26, 0x3e, 0xad, 0x27, 0xf8, 0x82, 0x37, 0x68, 0xa7, 0xc7,
	0x5c, 0x6d, 0x8f, 0xc7, 0xdc, 0xdc, 0x77, 0xf1, 0xe9, 0xd5, 0xaa, 0x91, 0x62, 0xdc, 0xcd, 0xda,
	0xf9, 0x63, 0x01, 0xa6, 0x65, 0x07, 0x72, 0x06, 0x45, 0xe5, 0x3c, 0xe4, 0x55, 0x7d, 0xcb, 0x75,
	0x83, 0x33, 0xd7, 0xc6, 0x64, 0x29, 0x02, 0xab, 0xf2, 0xd5, 0xef, 0xff, 0xfc, 0x38, 0x69, 0x92,
	0x92, 0xad, 0x1b, 0xa9, 0x92, 0xeb, 0x42, 0x51, 0xb9, 0x5a, 0xae, 0xf0, 0x80, 0xe9, 0x99, 0x4b,
	0x23, 0x2c, 0x93, 0x7a, 0x2a, 0xe7, 0x26, 0xb9, 0xb6, 0x12, 0xf9, 0xc5, 0x80, 0x7b, 0x43, 0x4e,
	0x45, 0xaa, 0x39, 0xc2, 0xa3, 0x6d, 0xd5, 0xac, 0xdd, 0x36, 0x1d, 0xf7, 0x60, 0x4b, 0x42, 0xad,
	0x91, 0x57, 0x74, 0x28, 0xe1, 0xba, 0x4d, 0xfc, 0xa9, 0x49, 0xbf, 0x23, 0xbf, 0x19, 0xf0, 0x60,
	0x84, 0x9f, 0x90, 0xed, 0x1c, 0xd1, 0x7c, 0x5b, 0x34, 0x77, 0xfe, 0x4b, 0x09, 0xb2, 0xda, 0x92,
	0x75, 0x93, 0xac, 0xeb, 0xac, 0x34, 0x29, 0x43, 0x23, 0x13, 0x56, 0x14, 0x91, 0x9f, 0x0d, 0x98,
	0xcf, 0xbc, 0xfd, 0x64, 0x33, 0x47, 0x54, 0xb7, 0x25, 0xf3, 0xb5, 0xdb, 0xa4, 0x22, 0xd7, 0xae,
	0xe4, 0xaa, 0x92, 0x2d, 0x9d, 0x2b, 0xeb, 0x4f, 0xf6, 0x45, 0x7a, 0x5d, 0x2e, 0xc9, 0xaf, 0x06,
	0x2c, 0x64, 0x1f, 0x7d, 0x92, 0xa7, 0x38, 0xc2, 0x95, 0xcc, 0xad, 0x5b, 0xe5, 0x22, 0xde, 0xeb,
	0x12, 0xcf, 0x26, 0x55, 0x1d, 0x6f, 0xc0, 0x9c, 0xec, 0x8b, 0xcc, 0x7d, 0xbc, 0x24, 0xdf, 0x1a,
	0x30, 0x9b, 0x98, 0x00, 0x79, 0x9c, 0x23, 0x38, 0xe4, 0x46, 0xe6, 0xfa, 0xd8, 0x3c, 0x84, 0xaa,
	0x4a, 0xa8, 0x75, 0xb2, 0xa6, 0x43, 0xf5, 0xcd, 0xc9, 0xbe, 0x40, 0x67, 0x53, 0x30, 0x89, 0x11,
	0xe4, 0xc2, 0x0c, 0x39, 0x52, 0x2e, 0xcc, 0xb0, 0x11, 0xdd, 0x04, 0xd3, 0x37, 0x28, 0xfb, 0x02,
	0xdd, 0xed, 0x92, 0xfc, 0x60, 0xc0, 0x42, 0xf6, 0xa1, 0xcf, 0x3d, 0xba, 0x11, 0xce, 0x94, 0x7b,
	0x74, 0xa3, 0x9c, 0xc7, 0xda, 0x90, 0x60, 0x16, 0xa9, 0xe8, 0x60, 0x83, 0x8e, 0x44, 0xbe, 0x31,
	0x00, 0xd2, 0xa7, 0x9e, 0x6c, 0xe4, 0xa8, 0x68, 0xb6, 0x63, 0x6e, 0xde, 0x22, 0x13, 0x69, 0xd6,
	0x24, 0xcd, 0x2a, 0x59, 0xd1, 0x69, 0x22, 0x99, 0xad, 0x50, 0xc4, 0x2b, 0x36, 0xf4, 0xe8, 0xe7,
	0xbe, 0x62, 0xa3, 0xad, 0x25, 0xf7, 0x15, 0xcb, 0xf1, 0x92, 0x9b, 0x5e, 0xb1, 0x50, 0x96, 0x64,
	0xb6, 0x6a, 0xff, 0x83, 0x17, 0x57, 0x65, 0xe3, 0xe5, 0x55, 0xd9, 0xf8, 0xfb, 0xaa, 0x6c, 0x7c,
	0x7f, 0x5d, 0x9e, 0x78, 0x79, 0x5d, 0x9e, 0xf8, 0xf3, 0xba, 0x3c, 0xf1, 0xd9, 0xb6, 0xe7, 0xc7,
	0xc7, 0xbd, 0x96, 0xf8, 0x53, 0x61, 0xb7, 0xe9, 0x09, 0x0d, 0xab, 0x8c, 0xc6, 0x67, 0x3c, 0xfc,
	0x42, 0xb4, 0xad, 0x9e, 0xee, 0xd8, 0x5f, 0x66, 0x7a, 0xc7, 0xe7, 0x01, 0x8d, 0x5a, 0x45, 0xf9,
	0x47, 0x6b, 0xf7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x30, 0x4b, 0x7b, 0x0c, 0x0e, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries params of the pegbridge module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Config queries config of the pegbridge module.
	Config(ctx context.Context, in *QueryConfigRequest, opts ...grpc.CallOption) (*PegConfig, error)
	// OrigPeggedPairs queries the original-pegged pairs, following:
	// 1. If orig specified:
	//   - 1.1. If pegged chain ID specified, returns single pair if found;
	//   - 1.2. Else, returns all pairs from orig;
	// 2. If orig not specified but pegged specified, returns a single pair if found;
	// 3. Else, returns all pairs.
	OrigPeggedPairs(ctx context.Context, in *QueryOrigPeggedPairsRequest, opts ...grpc.CallOption) (*QueryOrigPeggedPairsResponse, error)
	// EstimatedAmountFees queries the estimated received amount and charged fees for a mint / withdraw request.
	EstimatedAmountFees(ctx context.Context, in *QueryEstimatedAmountFeesRequest, opts ...grpc.CallOption) (*QueryEstimatedAmountFeesResponse, error)
	// DepositInfo queries the deposit info
	DepositInfo(ctx context.Context, in *QueryDepositInfoRequest, opts ...grpc.CallOption) (*QueryDepositInfoResponse, error)
	// WithdrawInfo queries the withdraw info
	WithdrawInfo(ctx context.Context, in *QueryWithdrawInfoRequest, opts ...grpc.CallOption) (*QueryWithdrawInfoResponse, error)
	// MintInfo queries the mint info
	MintInfo(ctx context.Context, in *QueryMintInfoRequest, opts ...grpc.CallOption) (*QueryMintInfoResponse, error)
	// BurnInfo queries the burn info
	BurnInfo(ctx context.Context, in *QueryBurnInfoRequest, opts ...grpc.CallOption) (*QueryBurnInfoResponse, error)
	// FeeClaimInfo queries the fee claim info
	FeeClaimInfo(ctx context.Context, in *QueryFeeClaimInfoRequest, opts ...grpc.CallOption) (*QueryFeeClaimInfoResponse, error)
	// SupplyInfo queries the total supply and supply cap
	SupplyInfo(ctx context.Context, in *QuerySupplyInfoRequest, opts ...grpc.CallOption) (*QuerySupplyInfoResponse, error)
	// RefundClaimInfo queries the corresponding withdrawId of certain depositId
	RefundClaimInfo(ctx context.Context, in *QueryRefundClaimInfoRequest, opts ...grpc.CallOption) (*QueryRefundClaimInfoResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Config(ctx context.Context, in *QueryConfigRequest, opts ...grpc.CallOption) (*PegConfig, error) {
	out := new(PegConfig)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Query/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrigPeggedPairs(ctx context.Context, in *QueryOrigPeggedPairsRequest, opts ...grpc.CallOption) (*QueryOrigPeggedPairsResponse, error) {
	out := new(QueryOrigPeggedPairsResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Query/OrigPeggedPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimatedAmountFees(ctx context.Context, in *QueryEstimatedAmountFeesRequest, opts ...grpc.CallOption) (*QueryEstimatedAmountFeesResponse, error) {
	out := new(QueryEstimatedAmountFeesResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Query/EstimatedAmountFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositInfo(ctx context.Context, in *QueryDepositInfoRequest, opts ...grpc.CallOption) (*QueryDepositInfoResponse, error) {
	out := new(QueryDepositInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Query/DepositInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawInfo(ctx context.Context, in *QueryWithdrawInfoRequest, opts ...grpc.CallOption) (*QueryWithdrawInfoResponse, error) {
	out := new(QueryWithdrawInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Query/WithdrawInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintInfo(ctx context.Context, in *QueryMintInfoRequest, opts ...grpc.CallOption) (*QueryMintInfoResponse, error) {
	out := new(QueryMintInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Query/MintInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BurnInfo(ctx context.Context, in *QueryBurnInfoRequest, opts ...grpc.CallOption) (*QueryBurnInfoResponse, error) {
	out := new(QueryBurnInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Query/BurnInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeClaimInfo(ctx context.Context, in *QueryFeeClaimInfoRequest, opts ...grpc.CallOption) (*QueryFeeClaimInfoResponse, error) {
	out := new(QueryFeeClaimInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Query/FeeClaimInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SupplyInfo(ctx context.Context, in *QuerySupplyInfoRequest, opts ...grpc.CallOption) (*QuerySupplyInfoResponse, error) {
	out := new(QuerySupplyInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Query/SupplyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RefundClaimInfo(ctx context.Context, in *QueryRefundClaimInfoRequest, opts ...grpc.CallOption) (*QueryRefundClaimInfoResponse, error) {
	out := new(QueryRefundClaimInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.pegbridge.v1.Query/RefundClaimInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries params of the pegbridge module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Config queries config of the pegbridge module.
	Config(context.Context, *QueryConfigRequest) (*PegConfig, error)
	// OrigPeggedPairs queries the original-pegged pairs, following:
	// 1. If orig specified:
	//   - 1.1. If pegged chain ID specified, returns single pair if found;
	//   - 1.2. Else, returns all pairs from orig;
	// 2. If orig not specified but pegged specified, returns a single pair if found;
	// 3. Else, returns all pairs.
	OrigPeggedPairs(context.Context, *QueryOrigPeggedPairsRequest) (*QueryOrigPeggedPairsResponse, error)
	// EstimatedAmountFees queries the estimated received amount and charged fees for a mint / withdraw request.
	EstimatedAmountFees(context.Context, *QueryEstimatedAmountFeesRequest) (*QueryEstimatedAmountFeesResponse, error)
	// DepositInfo queries the deposit info
	DepositInfo(context.Context, *QueryDepositInfoRequest) (*QueryDepositInfoResponse, error)
	// WithdrawInfo queries the withdraw info
	WithdrawInfo(context.Context, *QueryWithdrawInfoRequest) (*QueryWithdrawInfoResponse, error)
	// MintInfo queries the mint info
	MintInfo(context.Context, *QueryMintInfoRequest) (*QueryMintInfoResponse, error)
	// BurnInfo queries the burn info
	BurnInfo(context.Context, *QueryBurnInfoRequest) (*QueryBurnInfoResponse, error)
	// FeeClaimInfo queries the fee claim info
	FeeClaimInfo(context.Context, *QueryFeeClaimInfoRequest) (*QueryFeeClaimInfoResponse, error)
	// SupplyInfo queries the total supply and supply cap
	SupplyInfo(context.Context, *QuerySupplyInfoRequest) (*QuerySupplyInfoResponse, error)
	// RefundClaimInfo queries the corresponding withdrawId of certain depositId
	RefundClaimInfo(context.Context, *QueryRefundClaimInfoRequest) (*QueryRefundClaimInfoResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Config(ctx context.Context, req *QueryConfigRequest) (*PegConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (*UnimplementedQueryServer) OrigPeggedPairs(ctx context.Context, req *QueryOrigPeggedPairsRequest) (*QueryOrigPeggedPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrigPeggedPairs not implemented")
}
func (*UnimplementedQueryServer) EstimatedAmountFees(ctx context.Context, req *QueryEstimatedAmountFeesRequest) (*QueryEstimatedAmountFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimatedAmountFees not implemented")
}
func (*UnimplementedQueryServer) DepositInfo(ctx context.Context, req *QueryDepositInfoRequest) (*QueryDepositInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositInfo not implemented")
}
func (*UnimplementedQueryServer) WithdrawInfo(ctx context.Context, req *QueryWithdrawInfoRequest) (*QueryWithdrawInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawInfo not implemented")
}
func (*UnimplementedQueryServer) MintInfo(ctx context.Context, req *QueryMintInfoRequest) (*QueryMintInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintInfo not implemented")
}
func (*UnimplementedQueryServer) BurnInfo(ctx context.Context, req *QueryBurnInfoRequest) (*QueryBurnInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnInfo not implemented")
}
func (*UnimplementedQueryServer) FeeClaimInfo(ctx context.Context, req *QueryFeeClaimInfoRequest) (*QueryFeeClaimInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeClaimInfo not implemented")
}
func (*UnimplementedQueryServer) SupplyInfo(ctx context.Context, req *QuerySupplyInfoRequest) (*QuerySupplyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyInfo not implemented")
}
func (*UnimplementedQueryServer) RefundClaimInfo(ctx context.Context, req *QueryRefundClaimInfoRequest) (*QueryRefundClaimInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundClaimInfo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Query/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Config(ctx, req.(*QueryConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrigPeggedPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrigPeggedPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrigPeggedPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Query/OrigPeggedPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrigPeggedPairs(ctx, req.(*QueryOrigPeggedPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimatedAmountFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimatedAmountFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimatedAmountFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Query/EstimatedAmountFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimatedAmountFees(ctx, req.(*QueryEstimatedAmountFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Query/DepositInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositInfo(ctx, req.(*QueryDepositInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Query/WithdrawInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawInfo(ctx, req.(*QueryWithdrawInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMintInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Query/MintInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintInfo(ctx, req.(*QueryMintInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BurnInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBurnInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BurnInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Query/BurnInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BurnInfo(ctx, req.(*QueryBurnInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeClaimInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeClaimInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeClaimInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Query/FeeClaimInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeClaimInfo(ctx, req.(*QueryFeeClaimInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SupplyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySupplyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SupplyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Query/SupplyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SupplyInfo(ctx, req.(*QuerySupplyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RefundClaimInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefundClaimInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RefundClaimInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.pegbridge.v1.Query/RefundClaimInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RefundClaimInfo(ctx, req.(*QueryRefundClaimInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgn.pegbridge.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _Query_Config_Handler,
		},
		{
			MethodName: "OrigPeggedPairs",
			Handler:    _Query_OrigPeggedPairs_Handler,
		},
		{
			MethodName: "EstimatedAmountFees",
			Handler:    _Query_EstimatedAmountFees_Handler,
		},
		{
			MethodName: "DepositInfo",
			Handler:    _Query_DepositInfo_Handler,
		},
		{
			MethodName: "WithdrawInfo",
			Handler:    _Query_WithdrawInfo_Handler,
		},
		{
			MethodName: "MintInfo",
			Handler:    _Query_MintInfo_Handler,
		},
		{
			MethodName: "BurnInfo",
			Handler:    _Query_BurnInfo_Handler,
		},
		{
			MethodName: "FeeClaimInfo",
			Handler:    _Query_FeeClaimInfo_Handler,
		},
		{
			MethodName: "SupplyInfo",
			Handler:    _Query_SupplyInfo_Handler,
		},
		{
			MethodName: "RefundClaimInfo",
			Handler:    _Query_RefundClaimInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgn/pegbridge/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOrigPeggedPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrigPeggedPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrigPeggedPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pegged != nil {
		{
			size, err := m.Pegged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Orig != nil {
		{
			size, err := m.Orig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrigPeggedPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrigPeggedPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrigPeggedPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimatedAmountFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimatedAmountFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimatedAmountFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mint {
		i--
		if m.Mint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.RequestAmount) > 0 {
		i -= len(m.RequestAmount)
		copy(dAtA[i:], m.RequestAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RequestAmount)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Pair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimatedAmountFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimatedAmountFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimatedAmountFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PercentageFee) > 0 {
		i -= len(m.PercentageFee)
		copy(dAtA[i:], m.PercentageFee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PercentageFee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseFee) > 0 {
		i -= len(m.BaseFee)
		copy(dAtA[i:], m.BaseFee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseFee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReceiveAmount) > 0 {
		i -= len(m.ReceiveAmount)
		copy(dAtA[i:], m.ReceiveAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReceiveAmount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositId) > 0 {
		i -= len(m.DepositId)
		copy(dAtA[i:], m.DepositId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DepositInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawId) > 0 {
		i -= len(m.WithdrawId)
		copy(dAtA[i:], m.WithdrawId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WithdrawId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.WithdrawInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMintInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMintInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMintInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintId) > 0 {
		i -= len(m.MintId)
		copy(dAtA[i:], m.MintId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MintId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMintInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMintInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMintInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MintInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBurnInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBurnInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBurnInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BurnId) > 0 {
		i -= len(m.BurnId)
		copy(dAtA[i:], m.BurnId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BurnId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBurnInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBurnInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBurnInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BurnInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFeeClaimInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeClaimInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeClaimInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeClaimInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeClaimInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeClaimInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeClaimInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySupplyInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupplyInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupplyInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeggedAddress) > 0 {
		i -= len(m.PeggedAddress)
		copy(dAtA[i:], m.PeggedAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PeggedAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PeggedChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PeggedChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySupplyInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupplyInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupplyInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cap) > 0 {
		i -= len(m.Cap)
		copy(dAtA[i:], m.Cap)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cap)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Total) > 0 {
		i -= len(m.Total)
		copy(dAtA[i:], m.Total)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Total)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRefundClaimInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRefundClaimInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRefundClaimInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositId) > 0 {
		i -= len(m.DepositId)
		copy(dAtA[i:], m.DepositId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRefundClaimInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRefundClaimInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRefundClaimInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawId) > 0 {
		i -= len(m.WithdrawId)
		copy(dAtA[i:], m.WithdrawId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WithdrawId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOrigPeggedPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Orig != nil {
		l = m.Orig.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pegged != nil {
		l = m.Pegged.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrigPeggedPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryEstimatedAmountFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.RequestAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Mint {
		n += 2
	}
	return n
}

func (m *QueryEstimatedAmountFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReceiveAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BaseFee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PercentageFee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DepositInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWithdrawInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.WithdrawInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMintInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMintInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MintInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBurnInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BurnId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBurnInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BurnInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeeClaimInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryFeeClaimInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeClaimInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySupplyInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeggedChainId != 0 {
		n += 1 + sovQuery(uint64(m.PeggedChainId))
	}
	l = len(m.PeggedAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySupplyInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Cap)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRefundClaimInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRefundClaimInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrigPeggedPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrigPeggedPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrigPeggedPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Orig == nil {
				m.Orig = &types.ContractInfo{}
			}
			if err := m.Orig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pegged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pegged == nil {
				m.Pegged = &types.ContractInfo{}
			}
			if err := m.Pegged.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrigPeggedPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrigPeggedPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrigPeggedPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, OrigPeggedPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimatedAmountFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimatedAmountFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimatedAmountFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mint = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimatedAmountFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimatedAmountFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimatedAmountFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiveAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentageFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PercentageFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMintInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMintInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMintInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMintInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMintInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMintInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBurnInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBurnInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBurnInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBurnInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBurnInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBurnInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeClaimInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeClaimInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeClaimInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeClaimInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeClaimInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeClaimInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeClaimInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeClaimInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupplyInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupplyInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupplyInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedChainId", wireType)
			}
			m.PeggedChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeggedChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupplyInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupplyInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupplyInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRefundClaimInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRefundClaimInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRefundClaimInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRefundClaimInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRefundClaimInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRefundClaimInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
