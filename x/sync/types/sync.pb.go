// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/sync/v1/sync.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DataType int32

const (
	DataType_Invalid          DataType = 0
	DataType_ValidatorSgnAddr DataType = 1
	DataType_ValidatorParams  DataType = 2
	DataType_ValidatorStates  DataType = 3
	DataType_DelegatorShares  DataType = 4
	DataType_CbrOnchainEvent  DataType = 5
)

var DataType_name = map[int32]string{
	0: "Invalid",
	1: "ValidatorSgnAddr",
	2: "ValidatorParams",
	3: "ValidatorStates",
	4: "DelegatorShares",
	5: "CbrOnchainEvent",
}

var DataType_value = map[string]int32{
	"Invalid":          0,
	"ValidatorSgnAddr": 1,
	"ValidatorParams":  2,
	"ValidatorStates":  3,
	"DelegatorShares":  4,
	"CbrOnchainEvent":  5,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a6a5b6796757764a, []int{0}
}

type VoteOption int32

const (
	VoteOption_Empty   VoteOption = 0
	VoteOption_Yes     VoteOption = 1
	VoteOption_Abstain VoteOption = 2
	VoteOption_No      VoteOption = 3
)

var VoteOption_name = map[int32]string{
	0: "Empty",
	1: "Yes",
	2: "Abstain",
	3: "No",
}

var VoteOption_value = map[string]int32{
	"Empty":   0,
	"Yes":     1,
	"Abstain": 2,
	"No":      3,
}

func (x VoteOption) String() string {
	return proto.EnumName(VoteOption_name, int32(x))
}

func (VoteOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a6a5b6796757764a, []int{1}
}

type Vote struct {
	Voter  string     `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	Option VoteOption `protobuf:"varint,2,opt,name=option,proto3,enum=sgn.sync.v1.VoteOption" json:"option,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a5b6796757764a, []int{0}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *Vote) GetOption() VoteOption {
	if m != nil {
		return m.Option
	}
	return VoteOption_Empty
}

type PendingUpdate struct {
	Id         uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       DataType `protobuf:"varint,2,opt,name=type,proto3,enum=sgn.sync.v1.DataType" json:"type,omitempty"`
	Data       []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	ChainId    uint64   `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ChainBlock uint64   `protobuf:"varint,5,opt,name=chain_block,json=chainBlock,proto3" json:"chain_block,omitempty"`
	Proposer   string   `protobuf:"bytes,6,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Votes      []*Vote  `protobuf:"bytes,7,rep,name=votes,proto3" json:"votes,omitempty"`
	ProposeTs  uint64   `protobuf:"varint,8,opt,name=propose_ts,json=proposeTs,proto3" json:"propose_ts,omitempty"`
	ClosingTs  uint64   `protobuf:"varint,9,opt,name=closing_ts,json=closingTs,proto3" json:"closing_ts,omitempty"`
}

func (m *PendingUpdate) Reset()         { *m = PendingUpdate{} }
func (m *PendingUpdate) String() string { return proto.CompactTextString(m) }
func (*PendingUpdate) ProtoMessage()    {}
func (*PendingUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a5b6796757764a, []int{1}
}
func (m *PendingUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingUpdate.Merge(m, src)
}
func (m *PendingUpdate) XXX_Size() int {
	return m.Size()
}
func (m *PendingUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PendingUpdate proto.InternalMessageInfo

func (m *PendingUpdate) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PendingUpdate) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_Invalid
}

func (m *PendingUpdate) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PendingUpdate) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *PendingUpdate) GetChainBlock() uint64 {
	if m != nil {
		return m.ChainBlock
	}
	return 0
}

func (m *PendingUpdate) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *PendingUpdate) GetVotes() []*Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *PendingUpdate) GetProposeTs() uint64 {
	if m != nil {
		return m.ProposeTs
	}
	return 0
}

func (m *PendingUpdate) GetClosingTs() uint64 {
	if m != nil {
		return m.ClosingTs
	}
	return 0
}

type Params struct {
	VotingPeriod   uint64                                 `protobuf:"varint,1,opt,name=voting_period,json=votingPeriod,proto3" json:"voting_period,omitempty"`
	TallyThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=tally_threshold,json=tallyThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"threshold,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6a5b6796757764a, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetVotingPeriod() uint64 {
	if m != nil {
		return m.VotingPeriod
	}
	return 0
}

func init() {
	proto.RegisterEnum("sgn.sync.v1.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("sgn.sync.v1.VoteOption", VoteOption_name, VoteOption_value)
	proto.RegisterType((*Vote)(nil), "sgn.sync.v1.Vote")
	proto.RegisterType((*PendingUpdate)(nil), "sgn.sync.v1.PendingUpdate")
	proto.RegisterType((*Params)(nil), "sgn.sync.v1.Params")
}

func init() { proto.RegisterFile("sgn/sync/v1/sync.proto", fileDescriptor_a6a5b6796757764a) }

var fileDescriptor_a6a5b6796757764a = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xcd, 0x4e, 0xdc, 0x3c,
	0x14, 0x86, 0x93, 0x4c, 0xe6, 0xef, 0x0c, 0x3f, 0xf9, 0x0c, 0x5f, 0x9b, 0x22, 0x35, 0x33, 0xa2,
	0x52, 0x3b, 0x45, 0x90, 0x08, 0xaa, 0x5e, 0x00, 0x14, 0x2a, 0xb1, 0x68, 0x41, 0x61, 0x8a, 0xd4,
	0x6e, 0x90, 0x27, 0xb6, 0x32, 0x16, 0x19, 0x3b, 0xb2, 0xdd, 0xb4, 0xb3, 0xec, 0x1d, 0xf4, 0x06,
	0xb8, 0x1f, 0x96, 0x2c, 0xab, 0x2e, 0x50, 0x05, 0xbb, 0x5e, 0x45, 0x15, 0x27, 0x4c, 0x41, 0x5d,
	0xf9, 0x9c, 0xe7, 0x3d, 0x7e, 0xe3, 0x73, 0x1c, 0xc3, 0x23, 0x95, 0xf2, 0x48, 0xcd, 0x78, 0x12,
	0x15, 0xdb, 0x66, 0x0d, 0x73, 0x29, 0xb4, 0x40, 0x3d, 0x95, 0xf2, 0xd0, 0xe4, 0xc5, 0xf6, 0xda,
	0x6a, 0x2a, 0x52, 0x61, 0x78, 0x54, 0x46, 0x55, 0xc9, 0xfa, 0x3b, 0x70, 0x4f, 0x85, 0xa6, 0x68,
	0x15, 0x9a, 0x85, 0xd0, 0x54, 0xfa, 0xf6, 0xc0, 0x1e, 0x76, 0xe3, 0x2a, 0x41, 0x11, 0xb4, 0x44,
	0xae, 0x99, 0xe0, 0xbe, 0x33, 0xb0, 0x87, 0x4b, 0x3b, 0x8f, 0xc3, 0x7b, 0x8e, 0x61, 0xb9, 0xf1,
	0xc8, 0xc8, 0x71, 0x5d, 0xb6, 0x7e, 0xe1, 0xc0, 0xe2, 0x31, 0xe5, 0x84, 0xf1, 0xf4, 0x43, 0x4e,
	0xb0, 0xa6, 0x68, 0x09, 0x1c, 0x46, 0x8c, 0xab, 0x1b, 0x3b, 0x8c, 0xa0, 0x97, 0xe0, 0xea, 0x59,
	0x4e, 0x6b, 0xc3, 0xff, 0x1f, 0x18, 0xee, 0x63, 0x8d, 0x47, 0xb3, 0x9c, 0xc6, 0xa6, 0x04, 0x21,
	0x70, 0x09, 0xd6, 0xd8, 0x6f, 0x0c, 0xec, 0xe1, 0x42, 0x6c, 0x62, 0xf4, 0x04, 0x3a, 0xc9, 0x04,
	0x33, 0x7e, 0xc6, 0x88, 0xef, 0x1a, 0xd3, 0xb6, 0xc9, 0x0f, 0x09, 0xea, 0x43, 0xaf, 0x92, 0xc6,
	0x99, 0x48, 0xce, 0xfd, 0xa6, 0x51, 0xc1, 0xa0, 0xbd, 0x92, 0xa0, 0x35, 0xe8, 0xe4, 0x52, 0xe4,
	0x42, 0x51, 0xe9, 0xb7, 0x4c, 0x9b, 0xf3, 0x1c, 0xbd, 0xa8, 0xfa, 0x57, 0x7e, 0x7b, 0xd0, 0x18,
	0xf6, 0x76, 0xfe, 0xfb, 0xa7, 0xd1, 0x6a, 0x24, 0x0a, 0x3d, 0x05, 0xa8, 0x37, 0x9d, 0x69, 0xe5,
	0x77, 0xcc, 0x47, 0xba, 0x35, 0x19, 0x19, 0x39, 0xc9, 0x84, 0x62, 0x3c, 0x2d, 0xe5, 0x6e, 0x25,
	0xd7, 0x64, 0xa4, 0xd6, 0x2f, 0x6c, 0x68, 0x1d, 0x63, 0x89, 0xa7, 0x0a, 0x3d, 0x83, 0xc5, 0x42,
	0xe8, 0xb2, 0x30, 0xa7, 0x92, 0x89, 0xbb, 0x19, 0x2d, 0x54, 0xf0, 0xd8, 0x30, 0xc4, 0x61, 0x59,
	0xe3, 0x2c, 0x9b, 0x9d, 0xe9, 0x89, 0xa4, 0x6a, 0x22, 0x32, 0x62, 0x06, 0xb7, 0xb0, 0x77, 0x70,
	0x79, 0xdd, 0xb7, 0x7e, 0x5e, 0xf7, 0x9f, 0xa7, 0x4c, 0x4f, 0x3e, 0x8f, 0xc3, 0x44, 0x4c, 0xa3,
	0x44, 0xa8, 0xa9, 0x50, 0xf5, 0xb2, 0xa5, 0xc8, 0x79, 0x54, 0x8e, 0x51, 0x85, 0xfb, 0x34, 0xf9,
	0x7d, 0xdd, 0x5f, 0x99, 0x5b, 0x6c, 0x8a, 0x29, 0xd3, 0x74, 0x9a, 0xeb, 0x59, 0xbc, 0x64, 0xdc,
	0x47, 0x77, 0xca, 0xc6, 0x37, 0x1b, 0x3a, 0x77, 0xb7, 0x80, 0x7a, 0xd0, 0x3e, 0xe4, 0x05, 0xce,
	0x18, 0xf1, 0x2c, 0xb4, 0x0a, 0xde, 0x69, 0x19, 0x62, 0x2d, 0xe4, 0x49, 0xca, 0x77, 0x09, 0x91,
	0x9e, 0x8d, 0x56, 0x60, 0x79, 0x4e, 0xab, 0xbe, 0x3c, 0xe7, 0x01, 0x3c, 0xd1, 0x58, 0x53, 0xe5,
	0x35, 0x4a, 0xb8, 0x4f, 0x33, 0x9a, 0x1a, 0x38, 0xc1, 0x92, 0x2a, 0xcf, 0x2d, 0xe1, 0x9b, 0xb1,
	0x3c, 0xe2, 0xe6, 0x92, 0x0e, 0x0a, 0xca, 0xb5, 0xd7, 0xdc, 0x78, 0x0d, 0xf0, 0xf7, 0xcf, 0x42,
	0x5d, 0x68, 0x1e, 0x94, 0x47, 0xf5, 0x2c, 0xd4, 0x86, 0xc6, 0x47, 0xaa, 0x3c, 0xbb, 0x3c, 0xd8,
	0xee, 0x58, 0x69, 0xcc, 0xb8, 0xe7, 0xa0, 0x16, 0x38, 0xef, 0x85, 0xd7, 0xd8, 0x7b, 0x7b, 0x79,
	0x13, 0xd8, 0x57, 0x37, 0x81, 0xfd, 0xeb, 0x26, 0xb0, 0xbf, 0xdf, 0x06, 0xd6, 0xd5, 0x6d, 0x60,
	0xfd, 0xb8, 0x0d, 0xac, 0x4f, 0x9b, 0xf7, 0x67, 0x44, 0x33, 0x2a, 0xb7, 0x38, 0xd5, 0x5f, 0x84,
	0x3c, 0x8f, 0x54, 0xca, 0xb7, 0x8a, 0x9d, 0xe8, 0x6b, 0xf5, 0x78, 0xcc, 0xb4, 0xc6, 0x2d, 0xf3,
	0x30, 0x5e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xb0, 0x90, 0x88, 0x55, 0x03, 0x00, 0x00,
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Option != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClosingTs != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.ClosingTs))
		i--
		dAtA[i] = 0x48
	}
	if m.ProposeTs != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.ProposeTs))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Votes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSync(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x32
	}
	if m.ChainBlock != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.ChainBlock))
		i--
		dAtA[i] = 0x28
	}
	if m.ChainId != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TallyThreshold.Size()
		i -= size
		if _, err := m.TallyThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSync(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VotingPeriod != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.VotingPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSync(dAtA []byte, offset int, v uint64) int {
	offset -= sovSync(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.Option != 0 {
		n += 1 + sovSync(uint64(m.Option))
	}
	return n
}

func (m *PendingUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSync(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovSync(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovSync(uint64(m.ChainId))
	}
	if m.ChainBlock != 0 {
		n += 1 + sovSync(uint64(m.ChainBlock))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if len(m.Votes) > 0 {
		for _, e := range m.Votes {
			l = e.Size()
			n += 1 + l + sovSync(uint64(l))
		}
	}
	if m.ProposeTs != 0 {
		n += 1 + sovSync(uint64(m.ProposeTs))
	}
	if m.ClosingTs != 0 {
		n += 1 + sovSync(uint64(m.ClosingTs))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotingPeriod != 0 {
		n += 1 + sovSync(uint64(m.VotingPeriod))
	}
	l = m.TallyThreshold.Size()
	n += 1 + l + sovSync(uint64(l))
	return n
}

func sovSync(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSync(x uint64) (n int) {
	return sovSync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainBlock", wireType)
			}
			m.ChainBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, &Vote{})
			if err := m.Votes[len(m.Votes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposeTs", wireType)
			}
			m.ProposeTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposeTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingTs", wireType)
			}
			m.ClosingTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosingTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			m.VotingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyThreshold", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TallyThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSync
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSync
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSync
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSync        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSync          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSync = fmt.Errorf("proto: unexpected end of group")
)
