// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/sync/v1/tx.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProposeUpdate struct {
	Type       DataType `protobuf:"varint,1,opt,name=type,proto3,enum=sgn.sync.v1.DataType" json:"type,omitempty"`
	Data       []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ChainId    uint64   `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ChainBlock uint64   `protobuf:"varint,4,opt,name=chain_block,json=chainBlock,proto3" json:"chain_block,omitempty"`
}

func (m *ProposeUpdate) Reset()         { *m = ProposeUpdate{} }
func (m *ProposeUpdate) String() string { return proto.CompactTextString(m) }
func (*ProposeUpdate) ProtoMessage()    {}
func (*ProposeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ad821b1b2c2dd8, []int{0}
}
func (m *ProposeUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposeUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeUpdate.Merge(m, src)
}
func (m *ProposeUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ProposeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeUpdate proto.InternalMessageInfo

func (m *ProposeUpdate) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_Invalid
}

func (m *ProposeUpdate) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ProposeUpdate) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ProposeUpdate) GetChainBlock() uint64 {
	if m != nil {
		return m.ChainBlock
	}
	return 0
}

type MsgProposeUpdates struct {
	Updates []*ProposeUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	Sender  string           `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgProposeUpdates) Reset()         { *m = MsgProposeUpdates{} }
func (m *MsgProposeUpdates) String() string { return proto.CompactTextString(m) }
func (*MsgProposeUpdates) ProtoMessage()    {}
func (*MsgProposeUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ad821b1b2c2dd8, []int{1}
}
func (m *MsgProposeUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeUpdates.Merge(m, src)
}
func (m *MsgProposeUpdates) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeUpdates proto.InternalMessageInfo

type VoteUpdate struct {
	Id     uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Option VoteOption `protobuf:"varint,2,opt,name=option,proto3,enum=sgn.sync.v1.VoteOption" json:"option,omitempty"`
}

func (m *VoteUpdate) Reset()         { *m = VoteUpdate{} }
func (m *VoteUpdate) String() string { return proto.CompactTextString(m) }
func (*VoteUpdate) ProtoMessage()    {}
func (*VoteUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ad821b1b2c2dd8, []int{2}
}
func (m *VoteUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteUpdate.Merge(m, src)
}
func (m *VoteUpdate) XXX_Size() int {
	return m.Size()
}
func (m *VoteUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_VoteUpdate proto.InternalMessageInfo

func (m *VoteUpdate) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VoteUpdate) GetOption() VoteOption {
	if m != nil {
		return m.Option
	}
	return VoteOption_Empty
}

type MsgVoteUpdates struct {
	Votes  []*VoteUpdate `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
	Sender string        `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgVoteUpdates) Reset()         { *m = MsgVoteUpdates{} }
func (m *MsgVoteUpdates) String() string { return proto.CompactTextString(m) }
func (*MsgVoteUpdates) ProtoMessage()    {}
func (*MsgVoteUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ad821b1b2c2dd8, []int{3}
}
func (m *MsgVoteUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteUpdates.Merge(m, src)
}
func (m *MsgVoteUpdates) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteUpdates proto.InternalMessageInfo

func (m *MsgVoteUpdates) GetVotes() []*VoteUpdate {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *MsgVoteUpdates) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func init() {
	proto.RegisterType((*ProposeUpdate)(nil), "sgn.sync.v1.ProposeUpdate")
	proto.RegisterType((*MsgProposeUpdates)(nil), "sgn.sync.v1.MsgProposeUpdates")
	proto.RegisterType((*VoteUpdate)(nil), "sgn.sync.v1.VoteUpdate")
	proto.RegisterType((*MsgVoteUpdates)(nil), "sgn.sync.v1.MsgVoteUpdates")
}

func init() { proto.RegisterFile("sgn/sync/v1/tx.proto", fileDescriptor_c0ad821b1b2c2dd8) }

var fileDescriptor_c0ad821b1b2c2dd8 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x0e, 0xd2, 0x40,
	0x10, 0xc6, 0xbb, 0x50, 0x01, 0x07, 0x6d, 0xe2, 0x06, 0xb1, 0x72, 0x28, 0x4d, 0x4f, 0x35, 0x91,
	0x6e, 0xa8, 0x9e, 0x3c, 0x12, 0x63, 0xe2, 0x81, 0x68, 0x1a, 0xff, 0x24, 0x5e, 0x4c, 0x69, 0x37,
	0x4b, 0x03, 0xee, 0x36, 0xdd, 0xa5, 0xc2, 0x1b, 0x18, 0x4f, 0x3e, 0x02, 0x8f, 0xe3, 0x91, 0xa3,
	0x47, 0x03, 0x17, 0x1f, 0xc3, 0x74, 0x0b, 0x81, 0xc6, 0x78, 0x9b, 0xfd, 0xe6, 0x37, 0xb3, 0xdf,
	0xe4, 0x83, 0x81, 0x64, 0x9c, 0xc8, 0x1d, 0x4f, 0x48, 0x39, 0x25, 0x6a, 0x1b, 0xe4, 0x85, 0x50,
	0x02, 0xf7, 0x25, 0xe3, 0x41, 0xa5, 0x06, 0xe5, 0x74, 0x34, 0x60, 0x82, 0x09, 0xad, 0x93, 0xaa,
	0xaa, 0x91, 0xd1, 0xf0, 0x76, 0x50, 0xa3, 0x5a, 0xf7, 0xbe, 0x23, 0xb8, 0xff, 0xb6, 0x10, 0xb9,
	0x90, 0xf4, 0x7d, 0x9e, 0xc6, 0x8a, 0xe2, 0x27, 0x60, 0xaa, 0x5d, 0x4e, 0x6d, 0xe4, 0x22, 0xdf,
	0x0a, 0x1f, 0x06, 0x37, 0xbb, 0x83, 0x97, 0xb1, 0x8a, 0xdf, 0xed, 0x72, 0x1a, 0x69, 0x04, 0x63,
	0x30, 0xd3, 0x58, 0xc5, 0x76, 0xcb, 0x45, 0xfe, 0xbd, 0x48, 0xd7, 0xf8, 0x31, 0xf4, 0x92, 0x65,
	0x9c, 0xf1, 0xcf, 0x59, 0x6a, 0xb7, 0x5d, 0xe4, 0x9b, 0x51, 0x57, 0xbf, 0x5f, 0xa7, 0x78, 0x0c,
	0xfd, 0xba, 0xb5, 0x58, 0x8b, 0x64, 0x65, 0x9b, 0xba, 0x0b, 0x5a, 0x9a, 0x55, 0x8a, 0xb7, 0x82,
	0x07, 0x73, 0xc9, 0x1a, 0x76, 0x24, 0x7e, 0x0e, 0xdd, 0x4d, 0x5d, 0xda, 0xc8, 0x6d, 0xfb, 0xfd,
	0x70, 0xd4, 0xb0, 0xd4, 0xa0, 0xa3, 0x0b, 0x8a, 0x87, 0xd0, 0x91, 0x94, 0xa7, 0xb4, 0xd0, 0xe6,
	0xee, 0x46, 0xe7, 0xd7, 0x8b, 0xde, 0xb7, 0xfd, 0xd8, 0xf8, 0xb3, 0x1f, 0x1b, 0xde, 0x1c, 0xe0,
	0x83, 0x50, 0x97, 0xab, 0x2d, 0x68, 0x65, 0xa9, 0xbe, 0xd9, 0x8c, 0x5a, 0x59, 0x8a, 0x09, 0x74,
	0x44, 0xae, 0x32, 0xc1, 0xf5, 0xbc, 0x15, 0x3e, 0x6a, 0x7c, 0x5a, 0x0d, 0xbe, 0xd1, 0xed, 0xe8,
	0x8c, 0x79, 0x1f, 0xc1, 0x9a, 0x4b, 0x76, 0xdd, 0x28, 0xf1, 0x04, 0xee, 0x94, 0xe2, 0x6a, 0xfb,
	0xdf, 0x0d, 0x67, 0xcf, 0x35, 0xf5, 0x3f, 0xc7, 0xb3, 0x57, 0x3f, 0x8f, 0x0e, 0x3a, 0x1c, 0x1d,
	0xf4, 0xfb, 0xe8, 0xa0, 0x1f, 0x27, 0xc7, 0x38, 0x9c, 0x1c, 0xe3, 0xd7, 0xc9, 0x31, 0x3e, 0x3d,
	0x65, 0x99, 0x5a, 0x6e, 0x16, 0x41, 0x22, 0xbe, 0x90, 0x84, 0xae, 0x69, 0x31, 0xe1, 0x54, 0x7d,
	0x15, 0xc5, 0x8a, 0x48, 0xc6, 0x27, 0x65, 0x48, 0xb6, 0x75, 0xe2, 0x55, 0x56, 0x72, 0xd1, 0xd1,
	0x81, 0x3f, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x69, 0x3e, 0x3c, 0x43, 0x02, 0x00, 0x00,
}

func (m *ProposeUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposeUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VoteUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Option != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Votes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposeUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTx(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.ChainBlock != 0 {
		n += 1 + sovTx(uint64(m.ChainBlock))
	}
	return n
}

func (m *MsgProposeUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *VoteUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if m.Option != 0 {
		n += 1 + sovTx(uint64(m.Option))
	}
	return n
}

func (m *MsgVoteUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for _, e := range m.Votes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposeUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposeUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposeUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainBlock", wireType)
			}
			m.ChainBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &ProposeUpdate{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, &VoteUpdate{})
			if err := m.Votes[len(m.Votes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
