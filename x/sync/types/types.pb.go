// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateType int32

const (
	UpdateType_Invalid      UpdateType = 0
	UpdateType_EthBlk       UpdateType = 1
	UpdateType_ConfirmParam UpdateType = 2
	UpdateType_SgnAddr      UpdateType = 3
	UpdateType_Delegator    UpdateType = 4
	UpdateType_Validator    UpdateType = 5
)

var UpdateType_name = map[int32]string{
	0: "Invalid",
	1: "EthBlk",
	2: "ConfirmParam",
	3: "SgnAddr",
	4: "Delegator",
	5: "Validator",
}

var UpdateType_value = map[string]int32{
	"Invalid":      0,
	"EthBlk":       1,
	"ConfirmParam": 2,
	"SgnAddr":      3,
	"Delegator":    4,
	"Validator":    5,
}

func (x UpdateType) String() string {
	return proto.EnumName(UpdateType_name, int32(x))
}

func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}

type UpdateStatus int32

const (
	UpdateStatus_NULL   UpdateStatus = 0
	UpdateStatus_ACTIVE UpdateStatus = 1
	UpdateStatus_PASSED UpdateStatus = 2
	UpdateStatus_FAILED UpdateStatus = 4
)

var UpdateStatus_name = map[int32]string{
	0: "NULL",
	1: "ACTIVE",
	2: "PASSED",
	4: "FAILED",
}

var UpdateStatus_value = map[string]int32{
	"NULL":   0,
	"ACTIVE": 1,
	"PASSED": 2,
	"FAILED": 4,
}

func (x UpdateStatus) String() string {
	return proto.EnumName(UpdateStatus_name, int32(x))
}

func (UpdateStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}

type Update struct {
	Id          uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        UpdateType   `protobuf:"varint,2,opt,name=type,proto3,enum=UpdateType" json:"type,omitempty"`
	Data        []byte       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	EthBlock    uint64       `protobuf:"varint,4,opt,name=eth_block,json=ethBlock,proto3" json:"eth_block,omitempty"`
	Proposer    string       `protobuf:"bytes,5,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Voters      []string     `protobuf:"bytes,6,rep,name=voters,proto3" json:"voters,omitempty"`
	Status      UpdateStatus `protobuf:"varint,7,opt,name=status,proto3,enum=UpdateStatus" json:"status,omitempty"`
	SubmitTs    uint64       `protobuf:"varint,8,opt,name=submit_ts,json=submitTs,proto3" json:"submit_ts,omitempty"`
	VotingEndTs uint64       `protobuf:"varint,9,opt,name=voting_end_ts,json=votingEndTs,proto3" json:"voting_end_ts,omitempty"`
	Rewardable  bool         `protobuf:"varint,10,opt,name=rewardable,proto3" json:"rewardable,omitempty"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}
func (m *Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return m.Size()
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

func (m *Update) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Update) GetType() UpdateType {
	if m != nil {
		return m.Type
	}
	return UpdateType_Invalid
}

func (m *Update) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Update) GetEthBlock() uint64 {
	if m != nil {
		return m.EthBlock
	}
	return 0
}

func (m *Update) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *Update) GetVoters() []string {
	if m != nil {
		return m.Voters
	}
	return nil
}

func (m *Update) GetStatus() UpdateStatus {
	if m != nil {
		return m.Status
	}
	return UpdateStatus_NULL
}

func (m *Update) GetSubmitTs() uint64 {
	if m != nil {
		return m.SubmitTs
	}
	return 0
}

func (m *Update) GetVotingEndTs() uint64 {
	if m != nil {
		return m.VotingEndTs
	}
	return 0
}

func (m *Update) GetRewardable() bool {
	if m != nil {
		return m.Rewardable
	}
	return false
}

type Params struct {
	VotingPeriod   uint64  `protobuf:"varint,1,opt,name=voting_period,json=votingPeriod,proto3" json:"voting_period,omitempty"`
	TallyThreshold float32 `protobuf:"fixed32,2,opt,name=tally_threshold,json=tallyThreshold,proto3" json:"tally_threshold,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetVotingPeriod() uint64 {
	if m != nil {
		return m.VotingPeriod
	}
	return 0
}

func (m *Params) GetTallyThreshold() float32 {
	if m != nil {
		return m.TallyThreshold
	}
	return 0
}

type MsgSubmitUpdate struct {
	Type     UpdateType `protobuf:"varint,1,opt,name=type,proto3,enum=UpdateType" json:"type,omitempty"`
	Data     []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	EthBlock uint64     `protobuf:"varint,3,opt,name=eth_block,json=ethBlock,proto3" json:"eth_block,omitempty"`
	Sender   string     `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgSubmitUpdate) Reset()         { *m = MsgSubmitUpdate{} }
func (m *MsgSubmitUpdate) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitUpdate) ProtoMessage()    {}
func (*MsgSubmitUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2}
}
func (m *MsgSubmitUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitUpdate.Merge(m, src)
}
func (m *MsgSubmitUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitUpdate proto.InternalMessageInfo

func (m *MsgSubmitUpdate) GetType() UpdateType {
	if m != nil {
		return m.Type
	}
	return UpdateType_Invalid
}

func (m *MsgSubmitUpdate) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MsgSubmitUpdate) GetEthBlock() uint64 {
	if m != nil {
		return m.EthBlock
	}
	return 0
}

func (m *MsgSubmitUpdate) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgApproveUpdate struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgApproveUpdate) Reset()         { *m = MsgApproveUpdate{} }
func (m *MsgApproveUpdate) String() string { return proto.CompactTextString(m) }
func (*MsgApproveUpdate) ProtoMessage()    {}
func (*MsgApproveUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{3}
}
func (m *MsgApproveUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveUpdate.Merge(m, src)
}
func (m *MsgApproveUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveUpdate proto.InternalMessageInfo

func (m *MsgApproveUpdate) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgApproveUpdate) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type GenesisState struct {
	Params        *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	StartUpdateId uint64  `protobuf:"varint,2,opt,name=start_update_id,json=startUpdateId,proto3" json:"start_update_id,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{4}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetStartUpdateId() uint64 {
	if m != nil {
		return m.StartUpdateId
	}
	return 0
}

func init() {
	proto.RegisterEnum("UpdateType", UpdateType_name, UpdateType_value)
	proto.RegisterEnum("UpdateStatus", UpdateStatus_name, UpdateStatus_value)
	proto.RegisterType((*Update)(nil), "Update")
	proto.RegisterType((*Params)(nil), "Params")
	proto.RegisterType((*MsgSubmitUpdate)(nil), "MsgSubmitUpdate")
	proto.RegisterType((*MsgApproveUpdate)(nil), "MsgApproveUpdate")
	proto.RegisterType((*GenesisState)(nil), "GenesisState")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xdf, 0x6a, 0xdb, 0x3e,
	0x14, 0x8e, 0x1c, 0xd7, 0x4d, 0x4e, 0x92, 0xd6, 0xe8, 0xa2, 0x98, 0xdf, 0x0f, 0xbc, 0x90, 0xb1,
	0xcd, 0x94, 0x35, 0x81, 0xee, 0x6e, 0xec, 0x26, 0x6d, 0xd3, 0x11, 0x68, 0x47, 0x71, 0xd2, 0x0e,
	0x76, 0x63, 0xe4, 0x48, 0x73, 0x4c, 0x1d, 0xcb, 0x48, 0x4a, 0xba, 0xb0, 0x97, 0xd8, 0x53, 0xec,
	0x59, 0x76, 0xd9, 0xcb, 0x5d, 0x8e, 0xf6, 0x45, 0x86, 0x64, 0xf7, 0xcf, 0x06, 0x65, 0x77, 0xe7,
	0xfb, 0x74, 0xce, 0xf9, 0x8e, 0xbe, 0x23, 0x41, 0x4b, 0xad, 0x0b, 0x26, 0xfb, 0x85, 0xe0, 0x8a,
	0xf7, 0xbe, 0x5b, 0xe0, 0x9c, 0x17, 0x94, 0x28, 0x86, 0xb7, 0xc0, 0x4a, 0xa9, 0x87, 0xba, 0x28,
	0xb0, 0x43, 0x2b, 0xa5, 0xf8, 0x19, 0xd8, 0x3a, 0xd3, 0xb3, 0xba, 0x28, 0xd8, 0xda, 0x6f, 0xf5,
	0xcb, 0xb4, 0xe9, 0xba, 0x60, 0xa1, 0x39, 0xc0, 0x18, 0x6c, 0x4a, 0x14, 0xf1, 0xea, 0x5d, 0x14,
	0xb4, 0x43, 0x13, 0xe3, 0xff, 0xa1, 0xc9, 0xd4, 0x3c, 0x8a, 0x33, 0x3e, 0xbb, 0xf4, 0x6c, 0xd3,
	0xab, 0xc1, 0xd4, 0xfc, 0x40, 0x63, 0xfc, 0x1f, 0x34, 0x0a, 0xc1, 0x0b, 0x2e, 0x99, 0xf0, 0x36,
	0xba, 0x28, 0x68, 0x86, 0xf7, 0x18, 0xef, 0x80, 0xb3, 0xe2, 0x8a, 0x09, 0xe9, 0x39, 0xdd, 0x7a,
	0xd0, 0x0c, 0x2b, 0x84, 0x5f, 0x80, 0x23, 0x15, 0x51, 0x4b, 0xe9, 0x6d, 0x9a, 0x39, 0x3a, 0xd5,
	0x1c, 0x13, 0x43, 0x86, 0xd5, 0xa1, 0xd6, 0x95, 0xcb, 0x78, 0x91, 0xaa, 0x48, 0x49, 0xaf, 0x51,
	0xea, 0x96, 0xc4, 0x54, 0xe2, 0x1e, 0x74, 0x56, 0x5c, 0xa5, 0x79, 0x12, 0xb1, 0x9c, 0xea, 0x84,
	0xa6, 0x49, 0x68, 0x95, 0xe4, 0x28, 0xa7, 0x53, 0x89, 0x7d, 0x00, 0xc1, 0xae, 0x88, 0xa0, 0x24,
	0xce, 0x98, 0x07, 0x5d, 0x14, 0x34, 0xc2, 0x47, 0x4c, 0xef, 0x02, 0x9c, 0x33, 0x22, 0xc8, 0x42,
	0xe2, 0xe7, 0xf7, 0xdd, 0x0a, 0x26, 0x52, 0x7e, 0x67, 0x59, 0xbb, 0x24, 0xcf, 0x0c, 0x87, 0x5f,
	0xc1, 0xb6, 0x22, 0x59, 0xb6, 0x8e, 0xd4, 0x5c, 0x30, 0x39, 0xe7, 0x19, 0x35, 0x3e, 0x5a, 0xe1,
	0x96, 0xa1, 0xa7, 0x77, 0x6c, 0xef, 0x2b, 0x6c, 0x9f, 0xca, 0x64, 0x62, 0x46, 0xad, 0x16, 0x71,
	0x67, 0x3c, 0xfa, 0x97, 0xf1, 0xd6, 0x53, 0xc6, 0xd7, 0xff, 0x32, 0x7e, 0x07, 0x1c, 0xc9, 0x72,
	0xca, 0x84, 0x59, 0x49, 0x33, 0xac, 0x50, 0xef, 0x2d, 0xb8, 0xa7, 0x32, 0x19, 0x16, 0x85, 0xe0,
	0x2b, 0xf6, 0xc4, 0x33, 0x78, 0xa8, 0xb5, 0xfe, 0xa8, 0xfd, 0x08, 0xed, 0xf7, 0x2c, 0x67, 0x32,
	0x95, 0x7a, 0x15, 0x7a, 0x6a, 0xa7, 0x30, 0x06, 0x99, 0xda, 0xd6, 0xfe, 0x66, 0xbf, 0xf4, 0x2b,
	0xac, 0x68, 0xfc, 0x12, 0xb6, 0xa5, 0x22, 0x42, 0x45, 0x4b, 0x23, 0x14, 0xa5, 0xa5, 0x25, 0x76,
	0xd8, 0x31, 0x74, 0x29, 0x3f, 0xa6, 0xbb, 0x31, 0xc0, 0xc3, 0x8d, 0x71, 0x0b, 0x36, 0xc7, 0xf9,
	0x8a, 0x64, 0x29, 0x75, 0x6b, 0x18, 0xc0, 0x19, 0xe9, 0x3b, 0x5d, 0xba, 0x08, 0xbb, 0xd0, 0x3e,
	0xe4, 0xf9, 0xe7, 0x54, 0x2c, 0x8c, 0x8e, 0x6b, 0xe9, 0xd4, 0x49, 0x92, 0x0f, 0x29, 0x15, 0x6e,
	0x1d, 0x77, 0xa0, 0x79, 0xc4, 0x32, 0x96, 0x10, 0xc5, 0x85, 0x6b, 0x6b, 0x78, 0xa1, 0x9b, 0x18,
	0xb8, 0xb1, 0xfb, 0x0e, 0xda, 0x8f, 0x9f, 0x11, 0x6e, 0x80, 0xfd, 0xe1, 0xfc, 0xe4, 0xa4, 0x94,
	0x18, 0x1e, 0x4e, 0xc7, 0x17, 0x23, 0x17, 0xe9, 0xf8, 0x6c, 0x38, 0x99, 0x8c, 0x8e, 0x5c, 0x4b,
	0xc7, 0xc7, 0xc3, 0xf1, 0xc9, 0xe8, 0xc8, 0xb5, 0x0f, 0x8e, 0x7f, 0xdc, 0xf8, 0xe8, 0xfa, 0xc6,
	0x47, 0xbf, 0x6e, 0x7c, 0xf4, 0xed, 0xd6, 0xaf, 0x5d, 0xdf, 0xfa, 0xb5, 0x9f, 0xb7, 0x7e, 0xed,
	0xd3, 0xeb, 0x24, 0x55, 0xf3, 0x65, 0xdc, 0x9f, 0xf1, 0xc5, 0x60, 0xc6, 0x32, 0x26, 0xf6, 0x72,
	0xa6, 0xae, 0xb8, 0xb8, 0x1c, 0xc8, 0x24, 0xdf, 0x5b, 0xed, 0x0f, 0xbe, 0x0c, 0xe4, 0x3a, 0x9f,
	0x0d, 0xcc, 0x17, 0x8c, 0x1d, 0xf3, 0x07, 0xdf, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xb0,
	0x9c, 0xe9, 0x92, 0x03, 0x00, 0x00,
}

func (m *Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Update) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Update) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rewardable {
		i--
		if m.Rewardable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.VotingEndTs != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VotingEndTs))
		i--
		dAtA[i] = 0x48
	}
	if m.SubmitTs != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SubmitTs))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Voters) > 0 {
		for iNdEx := len(m.Voters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Voters[iNdEx])
			copy(dAtA[i:], m.Voters[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Voters[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EthBlock != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EthBlock))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TallyThreshold != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TallyThreshold))))
		i--
		dAtA[i] = 0x15
	}
	if m.VotingPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VotingPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if m.EthBlock != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EthBlock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartUpdateId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StartUpdateId))
		i--
		dAtA[i] = 0x10
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EthBlock != 0 {
		n += 1 + sovTypes(uint64(m.EthBlock))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Voters) > 0 {
		for _, s := range m.Voters {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.SubmitTs != 0 {
		n += 1 + sovTypes(uint64(m.SubmitTs))
	}
	if m.VotingEndTs != 0 {
		n += 1 + sovTypes(uint64(m.VotingEndTs))
	}
	if m.Rewardable {
		n += 2
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotingPeriod != 0 {
		n += 1 + sovTypes(uint64(m.VotingPeriod))
	}
	if m.TallyThreshold != 0 {
		n += 5
	}
	return n
}

func (m *MsgSubmitUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EthBlock != 0 {
		n += 1 + sovTypes(uint64(m.EthBlock))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MsgApproveUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StartUpdateId != 0 {
		n += 1 + sovTypes(uint64(m.StartUpdateId))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpdateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlock", wireType)
			}
			m.EthBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voters = append(m.Voters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= UpdateStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTs", wireType)
			}
			m.SubmitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmitTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndTs", wireType)
			}
			m.VotingEndTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingEndTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewardable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rewardable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			m.VotingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyThreshold", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TallyThreshold = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpdateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlock", wireType)
			}
			m.EthBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartUpdateId", wireType)
			}
			m.StartUpdateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartUpdateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
