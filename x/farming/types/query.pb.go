// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/farming/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryPoolsRequest is the request type for the
// Query/Pools RPC method.
type QueryPoolsRequest struct {
}

func (m *QueryPoolsRequest) Reset()         { *m = QueryPoolsRequest{} }
func (m *QueryPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsRequest) ProtoMessage()    {}
func (*QueryPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{0}
}
func (m *QueryPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsRequest.Merge(m, src)
}
func (m *QueryPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsRequest proto.InternalMessageInfo

// QueryPoolsResponse is the response type for the
// Query/Pools RPC method.
type QueryPoolsResponse struct {
	// pools defines the current state of the farming pools.
	Pools []FarmingPool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
}

func (m *QueryPoolsResponse) Reset()         { *m = QueryPoolsResponse{} }
func (m *QueryPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsResponse) ProtoMessage()    {}
func (*QueryPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{1}
}
func (m *QueryPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsResponse.Merge(m, src)
}
func (m *QueryPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsResponse proto.InternalMessageInfo

func (m *QueryPoolsResponse) GetPools() []FarmingPool {
	if m != nil {
		return m.Pools
	}
	return nil
}

// QueryPoolRequest is the request type for the
// Query/Pool RPC method.
type QueryPoolRequest struct {
	// pool_name defines the pool name to query for.
	PoolName string `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
}

func (m *QueryPoolRequest) Reset()         { *m = QueryPoolRequest{} }
func (m *QueryPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRequest) ProtoMessage()    {}
func (*QueryPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{2}
}
func (m *QueryPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRequest.Merge(m, src)
}
func (m *QueryPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRequest proto.InternalMessageInfo

// QueryPoolResponse is the response type for the
// Query/Pool RPC method.
type QueryPoolResponse struct {
	// pool defines the current state of the farming pool.
	Pool FarmingPool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool"`
}

func (m *QueryPoolResponse) Reset()         { *m = QueryPoolResponse{} }
func (m *QueryPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolResponse) ProtoMessage()    {}
func (*QueryPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{3}
}
func (m *QueryPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolResponse.Merge(m, src)
}
func (m *QueryPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolResponse proto.InternalMessageInfo

func (m *QueryPoolResponse) GetPool() FarmingPool {
	if m != nil {
		return m.Pool
	}
	return FarmingPool{}
}

// QueryEarningsRequest is the request type for the
// Query/Earnings RPC method.
type QueryEarningsRequest struct {
	// pool_name defines the pool name to query for.
	PoolName string `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	// address defines the account address to query for.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryEarningsRequest) Reset()         { *m = QueryEarningsRequest{} }
func (m *QueryEarningsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEarningsRequest) ProtoMessage()    {}
func (*QueryEarningsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{4}
}
func (m *QueryEarningsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEarningsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEarningsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEarningsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEarningsRequest.Merge(m, src)
}
func (m *QueryEarningsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEarningsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEarningsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEarningsRequest proto.InternalMessageInfo

// QueryEarningsResponse is the response type for the
// Query/Earnings RPC method.
type QueryEarningsResponse struct {
	// earnings defines the earnings info.
	Earnings Earnings `protobuf:"bytes,1,opt,name=earnings,proto3" json:"earnings"`
}

func (m *QueryEarningsResponse) Reset()         { *m = QueryEarningsResponse{} }
func (m *QueryEarningsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEarningsResponse) ProtoMessage()    {}
func (*QueryEarningsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{5}
}
func (m *QueryEarningsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEarningsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEarningsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEarningsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEarningsResponse.Merge(m, src)
}
func (m *QueryEarningsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEarningsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEarningsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEarningsResponse proto.InternalMessageInfo

func (m *QueryEarningsResponse) GetEarnings() Earnings {
	if m != nil {
		return m.Earnings
	}
	return Earnings{}
}

// QueryStakeInfoRequest is the request type for the
// Query/StakeInfo RPC method.
type QueryStakeInfoRequest struct {
	// pool_name defines the pool name to query for.
	PoolName string `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	// address defines the account address to query for.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryStakeInfoRequest) Reset()         { *m = QueryStakeInfoRequest{} }
func (m *QueryStakeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeInfoRequest) ProtoMessage()    {}
func (*QueryStakeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{6}
}
func (m *QueryStakeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeInfoRequest.Merge(m, src)
}
func (m *QueryStakeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeInfoRequest proto.InternalMessageInfo

// QueryStakeInfoResponse is the response type for the
// Query/StakeInfo RPC method.
type QueryStakeInfoResponse struct {
	// stake_info defines the stake info.
	StakeInfo StakeInfo `protobuf:"bytes,1,opt,name=stake_info,json=stakeInfo,proto3" json:"stake_info"`
}

func (m *QueryStakeInfoResponse) Reset()         { *m = QueryStakeInfoResponse{} }
func (m *QueryStakeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeInfoResponse) ProtoMessage()    {}
func (*QueryStakeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{7}
}
func (m *QueryStakeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeInfoResponse.Merge(m, src)
}
func (m *QueryStakeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeInfoResponse proto.InternalMessageInfo

func (m *QueryStakeInfoResponse) GetStakeInfo() StakeInfo {
	if m != nil {
		return m.StakeInfo
	}
	return StakeInfo{}
}

// QueryStakedPoolsRequest is the request type for the
// Query/StakedPools RPC method.
type QueryStakedPoolsRequest struct {
	// address defines the account address to query for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryStakedPoolsRequest) Reset()         { *m = QueryStakedPoolsRequest{} }
func (m *QueryStakedPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakedPoolsRequest) ProtoMessage()    {}
func (*QueryStakedPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{8}
}
func (m *QueryStakedPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedPoolsRequest.Merge(m, src)
}
func (m *QueryStakedPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedPoolsRequest proto.InternalMessageInfo

// QueryStakedPoolsResponse is the response type for the
// Query/StakedPools RPC method.
type QueryStakedPoolsResponse struct {
	// pools defines the current state of the farming pools.
	Pools []FarmingPool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
}

func (m *QueryStakedPoolsResponse) Reset()         { *m = QueryStakedPoolsResponse{} }
func (m *QueryStakedPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakedPoolsResponse) ProtoMessage()    {}
func (*QueryStakedPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{9}
}
func (m *QueryStakedPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedPoolsResponse.Merge(m, src)
}
func (m *QueryStakedPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedPoolsResponse proto.InternalMessageInfo

func (m *QueryStakedPoolsResponse) GetPools() []FarmingPool {
	if m != nil {
		return m.Pools
	}
	return nil
}

// QueryAccountsStakedInRequest is the request type for the
// Query/AccountsStakedIn RPC method.
type QueryAccountsStakedInRequest struct {
	// pool_name defines the pool name to query for.
	PoolName string `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
}

func (m *QueryAccountsStakedInRequest) Reset()         { *m = QueryAccountsStakedInRequest{} }
func (m *QueryAccountsStakedInRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountsStakedInRequest) ProtoMessage()    {}
func (*QueryAccountsStakedInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{10}
}
func (m *QueryAccountsStakedInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountsStakedInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountsStakedInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountsStakedInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountsStakedInRequest.Merge(m, src)
}
func (m *QueryAccountsStakedInRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountsStakedInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountsStakedInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountsStakedInRequest proto.InternalMessageInfo

// QueryAccountsStakedInResponse is the response type for the
// Query/AccountsStakedIn RPC method.
type QueryAccountsStakedInResponse struct {
	// addresses defines the addresses of the accounts staked in a pool.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *QueryAccountsStakedInResponse) Reset()         { *m = QueryAccountsStakedInResponse{} }
func (m *QueryAccountsStakedInResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountsStakedInResponse) ProtoMessage()    {}
func (*QueryAccountsStakedInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{11}
}
func (m *QueryAccountsStakedInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountsStakedInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountsStakedInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountsStakedInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountsStakedInResponse.Merge(m, src)
}
func (m *QueryAccountsStakedInResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountsStakedInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountsStakedInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountsStakedInResponse proto.InternalMessageInfo

func (m *QueryAccountsStakedInResponse) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// QueryRewardClaimInfoRequest is the request type for the
// Query/RewardClaimInfo RPC method.
type QueryRewardClaimInfoRequest struct {
	// address defines the account address to query for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryRewardClaimInfoRequest) Reset()         { *m = QueryRewardClaimInfoRequest{} }
func (m *QueryRewardClaimInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardClaimInfoRequest) ProtoMessage()    {}
func (*QueryRewardClaimInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{12}
}
func (m *QueryRewardClaimInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardClaimInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardClaimInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardClaimInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardClaimInfoRequest.Merge(m, src)
}
func (m *QueryRewardClaimInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardClaimInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardClaimInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardClaimInfoRequest proto.InternalMessageInfo

// Signature is the structure representing an Ethereum ECDSA signature.
type Signature struct {
	// signer defines the Ethereum address of the signer.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	// sig_bytes defines the signature bytes.
	SigBytes []byte `protobuf:"bytes,2,opt,name=sig_bytes,json=sigBytes,proto3" json:"sig_bytes,omitempty" yaml:"sig_bytes"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{13}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *Signature) GetSigBytes() []byte {
	if m != nil {
		return m.SigBytes
	}
	return nil
}

// QueryRewardClaimInfoResponse is the response type for the
// Query/RewardClaimInfo RPC method.
type QueryRewardClaimInfoResponse struct {
	// recipient defines the Ethereum address of the reward recipient.
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// reward_amount defines the amount of the reward claimed by the last request.
	RewardAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=reward_amount,json=rewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reward_amount" yaml:"reward_amount"`
	// reward_proto_bytes defines the serialized reward protobuf to be submitted on the mainchain.
	RewardProtoBytes []byte `protobuf:"bytes,3,opt,name=reward_proto_bytes,json=rewardProtoBytes,proto3" json:"reward_proto_bytes,omitempty" yaml:"reward_proto_bytes"`
	// last_claim_time defines the last time a reward claim was signed by the validators.
	LastClaimTime time.Time `protobuf:"bytes,4,opt,name=last_claim_time,json=lastClaimTime,proto3,stdtime" json:"last_claim_time" yaml:"last_claim_time"`
	// signatures defines the signatures to be verified on the mainchain.
	Signatures []Signature `protobuf:"bytes,5,rep,name=signatures,proto3" json:"signatures" yaml:"signatures"`
}

func (m *QueryRewardClaimInfoResponse) Reset()         { *m = QueryRewardClaimInfoResponse{} }
func (m *QueryRewardClaimInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardClaimInfoResponse) ProtoMessage()    {}
func (*QueryRewardClaimInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{14}
}
func (m *QueryRewardClaimInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardClaimInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardClaimInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardClaimInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardClaimInfoResponse.Merge(m, src)
}
func (m *QueryRewardClaimInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardClaimInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardClaimInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardClaimInfoResponse proto.InternalMessageInfo

func (m *QueryRewardClaimInfoResponse) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *QueryRewardClaimInfoResponse) GetRewardProtoBytes() []byte {
	if m != nil {
		return m.RewardProtoBytes
	}
	return nil
}

func (m *QueryRewardClaimInfoResponse) GetLastClaimTime() time.Time {
	if m != nil {
		return m.LastClaimTime
	}
	return time.Time{}
}

func (m *QueryRewardClaimInfoResponse) GetSignatures() []Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// QueryNumPoolsRequest is the request type for the
// Query/NumPools RPC method.
type QueryNumPoolsRequest struct {
}

func (m *QueryNumPoolsRequest) Reset()         { *m = QueryNumPoolsRequest{} }
func (m *QueryNumPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNumPoolsRequest) ProtoMessage()    {}
func (*QueryNumPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{15}
}
func (m *QueryNumPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNumPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNumPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNumPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNumPoolsRequest.Merge(m, src)
}
func (m *QueryNumPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNumPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNumPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNumPoolsRequest proto.InternalMessageInfo

// QueryNumPoolsResponse is the response type for the
// Query/NumPools RPC method.
type QueryNumPoolsResponse struct {
	NumPools uint64 `protobuf:"varint,1,opt,name=num_pools,json=numPools,proto3" json:"num_pools,omitempty" yaml:"num_pools"`
}

func (m *QueryNumPoolsResponse) Reset()         { *m = QueryNumPoolsResponse{} }
func (m *QueryNumPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNumPoolsResponse) ProtoMessage()    {}
func (*QueryNumPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f5c99bfbf9fc04f, []int{16}
}
func (m *QueryNumPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNumPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNumPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNumPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNumPoolsResponse.Merge(m, src)
}
func (m *QueryNumPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNumPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNumPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNumPoolsResponse proto.InternalMessageInfo

func (m *QueryNumPoolsResponse) GetNumPools() uint64 {
	if m != nil {
		return m.NumPools
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryPoolsRequest)(nil), "sgn.farming.v1.QueryPoolsRequest")
	proto.RegisterType((*QueryPoolsResponse)(nil), "sgn.farming.v1.QueryPoolsResponse")
	proto.RegisterType((*QueryPoolRequest)(nil), "sgn.farming.v1.QueryPoolRequest")
	proto.RegisterType((*QueryPoolResponse)(nil), "sgn.farming.v1.QueryPoolResponse")
	proto.RegisterType((*QueryEarningsRequest)(nil), "sgn.farming.v1.QueryEarningsRequest")
	proto.RegisterType((*QueryEarningsResponse)(nil), "sgn.farming.v1.QueryEarningsResponse")
	proto.RegisterType((*QueryStakeInfoRequest)(nil), "sgn.farming.v1.QueryStakeInfoRequest")
	proto.RegisterType((*QueryStakeInfoResponse)(nil), "sgn.farming.v1.QueryStakeInfoResponse")
	proto.RegisterType((*QueryStakedPoolsRequest)(nil), "sgn.farming.v1.QueryStakedPoolsRequest")
	proto.RegisterType((*QueryStakedPoolsResponse)(nil), "sgn.farming.v1.QueryStakedPoolsResponse")
	proto.RegisterType((*QueryAccountsStakedInRequest)(nil), "sgn.farming.v1.QueryAccountsStakedInRequest")
	proto.RegisterType((*QueryAccountsStakedInResponse)(nil), "sgn.farming.v1.QueryAccountsStakedInResponse")
	proto.RegisterType((*QueryRewardClaimInfoRequest)(nil), "sgn.farming.v1.QueryRewardClaimInfoRequest")
	proto.RegisterType((*Signature)(nil), "sgn.farming.v1.Signature")
	proto.RegisterType((*QueryRewardClaimInfoResponse)(nil), "sgn.farming.v1.QueryRewardClaimInfoResponse")
	proto.RegisterType((*QueryNumPoolsRequest)(nil), "sgn.farming.v1.QueryNumPoolsRequest")
	proto.RegisterType((*QueryNumPoolsResponse)(nil), "sgn.farming.v1.QueryNumPoolsResponse")
}

func init() { proto.RegisterFile("sgn/farming/v1/query.proto", fileDescriptor_4f5c99bfbf9fc04f) }

var fileDescriptor_4f5c99bfbf9fc04f = []byte{
	// 1085 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xbd, 0x4d, 0x52, 0xec, 0xd7, 0x86, 0x26, 0x43, 0x9a, 0x3a, 0x9b, 0xc4, 0x9b, 0x8c,
	0x20, 0x18, 0xda, 0xec, 0xd6, 0xa9, 0xf8, 0x15, 0xa9, 0x48, 0x31, 0x6a, 0xa5, 0x14, 0x51, 0x95,
	0x4d, 0x25, 0x2a, 0x2e, 0xd6, 0xd8, 0x1e, 0x2f, 0xab, 0x78, 0x67, 0xdd, 0x9d, 0x75, 0x4a, 0xa8,
	0x7a, 0xe1, 0xc4, 0x8d, 0x48, 0x70, 0xe0, 0x18, 0x4e, 0xfc, 0x03, 0xfc, 0x11, 0x3d, 0x56, 0xe2,
	0x82, 0x38, 0x18, 0x94, 0x70, 0xe0, 0x6c, 0xfe, 0x01, 0xb4, 0x33, 0xb3, 0xeb, 0xf5, 0xc6, 0x6e,
	0x8c, 0xe0, 0xb4, 0xbb, 0x6f, 0xde, 0x8f, 0xcf, 0xec, 0xbc, 0xf9, 0x3e, 0xd0, 0xb9, 0xc3, 0xac,
	0x16, 0x09, 0x3c, 0x97, 0x39, 0xd6, 0x41, 0xc5, 0x7a, 0xdc, 0xa5, 0xc1, 0xa1, 0xd9, 0x09, 0xfc,
	0xd0, 0x47, 0xaf, 0x72, 0x87, 0x99, 0x6a, 0xcd, 0x3c, 0xa8, 0xe8, 0x6f, 0x37, 0x7c, 0xee, 0xf9,
	0xdc, 0xaa, 0x13, 0x4e, 0xa5, 0xa3, 0x75, 0x50, 0xa9, 0xd3, 0x90, 0x54, 0xac, 0x0e, 0x71, 0x5c,
	0x46, 0x42, 0xd7, 0x67, 0x32, 0x56, 0x5f, 0x70, 0x7c, 0xc7, 0x17, 0xaf, 0x56, 0xf4, 0xa6, 0xac,
	0x2b, 0x8e, 0xef, 0x3b, 0x6d, 0x6a, 0x91, 0x8e, 0x6b, 0x11, 0xc6, 0xfc, 0x50, 0x84, 0x70, 0xb5,
	0x6a, 0xa8, 0x55, 0xf1, 0x55, 0xef, 0xb6, 0xac, 0xd0, 0xf5, 0x28, 0x0f, 0x89, 0xd7, 0x89, 0xc3,
	0x33, 0xb0, 0x31, 0x9b, 0x58, 0xc5, 0xaf, 0xc1, 0xfc, 0xa7, 0x11, 0xd4, 0x03, 0xdf, 0x6f, 0x73,
	0x9b, 0x3e, 0xee, 0x52, 0x1e, 0xe2, 0x4f, 0x00, 0xa5, 0x8d, 0xbc, 0xe3, 0x33, 0x4e, 0xd1, 0x7b,
	0x30, 0xd3, 0x89, 0x0c, 0x45, 0x6d, 0x6d, 0xaa, 0x7c, 0x69, 0x6b, 0xd9, 0x1c, 0xde, 0xa9, 0x79,
	0x57, 0xbe, 0x46, 0x41, 0xd5, 0xe9, 0xe7, 0x3d, 0x23, 0x67, 0x4b, 0x7f, 0xfc, 0x01, 0xcc, 0x25,
	0xe9, 0x54, 0x09, 0xb4, 0x0c, 0x85, 0x68, 0xb1, 0xc6, 0x88, 0x47, 0x8b, 0xda, 0x9a, 0x56, 0x2e,
	0xd8, 0xf9, 0xc8, 0x70, 0x9f, 0x78, 0x74, 0x3b, 0xff, 0xcd, 0xb1, 0x91, 0xfb, 0xeb, 0xd8, 0xc8,
	0xe1, 0x7b, 0x29, 0xbc, 0x04, 0xe4, 0x1d, 0x98, 0x8e, 0x5c, 0x45, 0xd8, 0x44, 0x1c, 0xc2, 0x1d,
	0x7f, 0x06, 0x0b, 0x22, 0xd7, 0x1d, 0x12, 0x30, 0x97, 0x39, 0x7c, 0x12, 0x14, 0x54, 0x84, 0x57,
	0x48, 0xb3, 0x19, 0x50, 0xce, 0x8b, 0x17, 0xc4, 0x52, 0xfc, 0x29, 0x21, 0x7f, 0x38, 0x36, 0x34,
	0xbc, 0x07, 0x57, 0x33, 0x89, 0x15, 0xe8, 0x36, 0xe4, 0xa9, 0xb2, 0x29, 0xd8, 0x62, 0x16, 0x36,
	0x8e, 0x51, 0xa4, 0x89, 0x3f, 0x7e, 0xa4, 0x92, 0xee, 0x85, 0x64, 0x9f, 0xee, 0xb2, 0x96, 0xff,
	0xbf, 0xe1, 0x3e, 0x82, 0xc5, 0x6c, 0x66, 0xc5, 0xfb, 0x21, 0x00, 0x8f, 0x8c, 0x35, 0x97, 0xb5,
	0x7c, 0x45, 0xbc, 0x94, 0x25, 0x4e, 0xc2, 0x14, 0x72, 0x81, 0xc7, 0x06, 0x7c, 0x1b, 0xae, 0x0d,
	0x32, 0x37, 0xd3, 0x2d, 0x95, 0x06, 0xd3, 0x46, 0x80, 0x89, 0xc3, 0xde, 0x83, 0xe2, 0xd9, 0xf0,
	0xff, 0xda, 0x7c, 0x77, 0x60, 0x45, 0x24, 0xdd, 0x69, 0x34, 0xfc, 0x2e, 0x0b, 0xb9, 0x4c, 0xbe,
	0xcb, 0xfe, 0x65, 0x23, 0xde, 0x86, 0xd5, 0x31, 0x69, 0x14, 0xe0, 0x0a, 0x14, 0xd4, 0x8e, 0xa8,
	0x84, 0x2c, 0xd8, 0x03, 0x03, 0xde, 0x81, 0x65, 0x11, 0x6e, 0xd3, 0x27, 0x24, 0x68, 0x7e, 0xd4,
	0x26, 0xae, 0x97, 0x3e, 0xd3, 0x49, 0xfe, 0x8e, 0x0b, 0x85, 0x3d, 0xd7, 0x61, 0x24, 0xec, 0x06,
	0x14, 0xbd, 0x05, 0x17, 0xb9, 0xeb, 0x30, 0x1a, 0x48, 0xff, 0xea, 0x7c, 0xbf, 0x67, 0xcc, 0x1e,
	0x12, 0xaf, 0xbd, 0x8d, 0xa5, 0x1d, 0xdb, 0xca, 0x01, 0x55, 0xa0, 0xc0, 0x5d, 0xa7, 0x56, 0x3f,
	0x0c, 0xa9, 0x6c, 0x8a, 0xcb, 0xd5, 0x85, 0x7e, 0xcf, 0x98, 0x4b, 0xbc, 0xe5, 0x12, 0xb6, 0xf3,
	0xdc, 0x75, 0xaa, 0xe2, 0xf5, 0xe7, 0x29, 0xf5, 0xd3, 0xce, 0xe0, 0x0e, 0x36, 0x1b, 0xd0, 0x86,
	0xdb, 0x71, 0x29, 0x0b, 0x15, 0xf1, 0xc0, 0x80, 0xf6, 0x61, 0x36, 0x10, 0x81, 0x35, 0xe2, 0x45,
	0x3f, 0x4b, 0xb6, 0x62, 0xf5, 0x6e, 0x74, 0x2c, 0xbf, 0xf5, 0x8c, 0x0d, 0xc7, 0x0d, 0xbf, 0xe8,
	0xd6, 0xcd, 0x86, 0xef, 0x59, 0x4a, 0x1c, 0xe5, 0x63, 0x93, 0x37, 0xf7, 0xad, 0xf0, 0xb0, 0x43,
	0xb9, 0xb9, 0xcb, 0xc2, 0x7e, 0xcf, 0x58, 0x90, 0x8c, 0x43, 0xc9, 0xb0, 0x7d, 0x59, 0x7e, 0xef,
	0x88, 0x4f, 0xf4, 0x31, 0x20, 0xb5, 0x2e, 0x04, 0x4d, 0xed, 0x73, 0x4a, 0xec, 0x73, 0xb5, 0xdf,
	0x33, 0x96, 0x86, 0x72, 0xa4, 0x7c, 0xb0, 0x3d, 0x27, 0x8d, 0x0f, 0x22, 0x9b, 0xd8, 0x38, 0x6a,
	0xc1, 0x95, 0x36, 0xe1, 0x61, 0xad, 0x11, 0xed, 0xb8, 0x16, 0x29, 0x69, 0x71, 0x5a, 0xdc, 0x02,
	0xdd, 0x94, 0x32, 0x6b, 0xc6, 0x32, 0x6b, 0x3e, 0x8c, 0x65, 0xb6, 0x8a, 0xa3, 0x7d, 0xf5, 0x7b,
	0xc6, 0xa2, 0xac, 0x94, 0x49, 0x80, 0x8f, 0x7e, 0x37, 0x34, 0x7b, 0x36, 0xb2, 0x8a, 0xff, 0x18,
	0xc5, 0xa1, 0x87, 0x00, 0x3c, 0x3e, 0x4b, 0x5e, 0x9c, 0x11, 0x2d, 0x7d, 0xf6, 0xa2, 0xc5, 0x1e,
	0xd5, 0x25, 0x55, 0x61, 0x7e, 0x70, 0xc2, 0x32, 0x14, 0xdb, 0xa9, 0x3c, 0x78, 0x51, 0x09, 0xdc,
	0xfd, 0xae, 0x37, 0x24, 0xe7, 0xf7, 0x94, 0x94, 0x0c, 0xec, 0xea, 0x18, 0x2b, 0x50, 0x60, 0x5d,
	0xaf, 0x16, 0x5f, 0x2c, 0xad, 0x3c, 0x9d, 0x6e, 0x8d, 0x64, 0x09, 0xdb, 0x79, 0xa6, 0x42, 0xb7,
	0xfe, 0xce, 0xc3, 0x8c, 0x48, 0x86, 0x3c, 0x98, 0x11, 0x26, 0xb4, 0x9e, 0x05, 0x3f, 0x33, 0x50,
	0x74, 0xfc, 0x32, 0x17, 0x09, 0x83, 0x57, 0xbf, 0xfe, 0xe5, 0xcf, 0xef, 0x2e, 0x5c, 0x43, 0x57,
	0xad, 0xcc, 0xc0, 0x12, 0x0c, 0xa8, 0x0b, 0xd3, 0x91, 0x3f, 0x5a, 0x1b, 0x9b, 0x2a, 0x2e, 0xb6,
	0xfe, 0x12, 0x0f, 0x55, 0xab, 0x2c, 0x6a, 0x61, 0xb4, 0x36, 0xaa, 0x96, 0xf5, 0x34, 0x11, 0x84,
	0x67, 0xe8, 0x5b, 0x0d, 0xf2, 0xb1, 0x46, 0xa3, 0xd7, 0x47, 0x66, 0xce, 0xcc, 0x13, 0xfd, 0x8d,
	0x73, 0xbc, 0x14, 0xc3, 0xbb, 0x82, 0xe1, 0x26, 0x32, 0xb3, 0x0c, 0xf1, 0x08, 0x48, 0x73, 0x58,
	0x4f, 0x95, 0x20, 0x3c, 0x43, 0xdf, 0x6b, 0x50, 0x48, 0x34, 0x18, 0x8d, 0x2e, 0x96, 0x1d, 0x1a,
	0xfa, 0xc6, 0x79, 0x6e, 0x0a, 0xea, 0x7d, 0x01, 0xb5, 0x85, 0x6e, 0x66, 0xa1, 0x06, 0x73, 0x61,
	0x0c, 0xd6, 0x91, 0x06, 0x97, 0x52, 0xc2, 0x8d, 0xde, 0x1c, 0x5f, 0x71, 0x68, 0x32, 0xe8, 0xe5,
	0xf3, 0x1d, 0x15, 0x9c, 0x29, 0xe0, 0xca, 0x68, 0x63, 0x24, 0x5c, 0x53, 0x36, 0x6b, 0x0a, 0xe9,
	0x27, 0x0d, 0xe6, 0xb2, 0x7a, 0x8d, 0x6e, 0x8c, 0x2c, 0x37, 0x66, 0x3a, 0xe8, 0x9b, 0x13, 0x7a,
	0x9f, 0x77, 0xa6, 0x44, 0x45, 0xd4, 0x14, 0xaa, 0xcb, 0x86, 0xba, 0xec, 0x2b, 0xc8, 0xc7, 0x97,
	0x73, 0x4c, 0x93, 0x65, 0xee, 0xf4, 0x98, 0x26, 0xcb, 0xde, 0x70, 0xbc, 0x2e, 0x80, 0x96, 0xd1,
	0x52, 0x16, 0x28, 0xb9, 0xdc, 0xe8, 0x47, 0x0d, 0xae, 0x64, 0x74, 0x1e, 0x5d, 0x1f, 0x99, 0x7d,
	0xf4, 0xf0, 0xd2, 0x6f, 0x4c, 0xe6, 0xac, 0x88, 0x6e, 0x09, 0xa2, 0x4d, 0x74, 0x3d, 0x4b, 0xa4,
	0x14, 0x5a, 0x2a, 0xa7, 0x6c, 0xb4, 0xf8, 0x24, 0xab, 0xbb, 0xcf, 0x4f, 0x4a, 0xda, 0x8b, 0x93,
	0x92, 0xf6, 0xc7, 0x49, 0x49, 0x3b, 0x3a, 0x2d, 0xe5, 0x5e, 0x9c, 0x96, 0x72, 0xbf, 0x9e, 0x96,
	0x72, 0x9f, 0x5b, 0xe9, 0x61, 0x42, 0xdb, 0x34, 0xd8, 0x64, 0x34, 0x7c, 0xe2, 0x07, 0xfb, 0x51,
	0xfa, 0xcd, 0x83, 0x2d, 0xeb, 0xcb, 0xa4, 0x86, 0x98, 0x2c, 0xf5, 0x8b, 0x42, 0xc1, 0x6f, 0xfd,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xe5, 0xe8, 0x3f, 0xc4, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Pools queries the current state of all the pools.
	Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	// Pool queries the current state of a single pool.
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	// Earnings queries the current earnings of an account in a pool.
	Earnings(ctx context.Context, in *QueryEarningsRequest, opts ...grpc.CallOption) (*QueryEarningsResponse, error)
	// StakeInfo queries the current stake info of an account in a pool.
	StakeInfo(ctx context.Context, in *QueryStakeInfoRequest, opts ...grpc.CallOption) (*QueryStakeInfoResponse, error)
	// StakedPools queries the current state of all the pools that an account has stakes in.
	StakedPools(ctx context.Context, in *QueryStakedPoolsRequest, opts ...grpc.CallOption) (*QueryStakedPoolsResponse, error)
	// AccountsStakedIn queries the list of accounts staked in a pool.
	AccountsStakedIn(ctx context.Context, in *QueryAccountsStakedInRequest, opts ...grpc.CallOption) (*QueryAccountsStakedInResponse, error)
	NumPools(ctx context.Context, in *QueryNumPoolsRequest, opts ...grpc.CallOption) (*QueryNumPoolsResponse, error)
	// RewardClaimInfo queries the info for claiming farming rewards on the mainchain.
	RewardClaimInfo(ctx context.Context, in *QueryRewardClaimInfoRequest, opts ...grpc.CallOption) (*QueryRewardClaimInfoResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, "/sgn.farming.v1.Query/Pools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/sgn.farming.v1.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Earnings(ctx context.Context, in *QueryEarningsRequest, opts ...grpc.CallOption) (*QueryEarningsResponse, error) {
	out := new(QueryEarningsResponse)
	err := c.cc.Invoke(ctx, "/sgn.farming.v1.Query/Earnings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeInfo(ctx context.Context, in *QueryStakeInfoRequest, opts ...grpc.CallOption) (*QueryStakeInfoResponse, error) {
	out := new(QueryStakeInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.farming.v1.Query/StakeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakedPools(ctx context.Context, in *QueryStakedPoolsRequest, opts ...grpc.CallOption) (*QueryStakedPoolsResponse, error) {
	out := new(QueryStakedPoolsResponse)
	err := c.cc.Invoke(ctx, "/sgn.farming.v1.Query/StakedPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountsStakedIn(ctx context.Context, in *QueryAccountsStakedInRequest, opts ...grpc.CallOption) (*QueryAccountsStakedInResponse, error) {
	out := new(QueryAccountsStakedInResponse)
	err := c.cc.Invoke(ctx, "/sgn.farming.v1.Query/AccountsStakedIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NumPools(ctx context.Context, in *QueryNumPoolsRequest, opts ...grpc.CallOption) (*QueryNumPoolsResponse, error) {
	out := new(QueryNumPoolsResponse)
	err := c.cc.Invoke(ctx, "/sgn.farming.v1.Query/NumPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardClaimInfo(ctx context.Context, in *QueryRewardClaimInfoRequest, opts ...grpc.CallOption) (*QueryRewardClaimInfoResponse, error) {
	out := new(QueryRewardClaimInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.farming.v1.Query/RewardClaimInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Pools queries the current state of all the pools.
	Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	// Pool queries the current state of a single pool.
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	// Earnings queries the current earnings of an account in a pool.
	Earnings(context.Context, *QueryEarningsRequest) (*QueryEarningsResponse, error)
	// StakeInfo queries the current stake info of an account in a pool.
	StakeInfo(context.Context, *QueryStakeInfoRequest) (*QueryStakeInfoResponse, error)
	// StakedPools queries the current state of all the pools that an account has stakes in.
	StakedPools(context.Context, *QueryStakedPoolsRequest) (*QueryStakedPoolsResponse, error)
	// AccountsStakedIn queries the list of accounts staked in a pool.
	AccountsStakedIn(context.Context, *QueryAccountsStakedInRequest) (*QueryAccountsStakedInResponse, error)
	NumPools(context.Context, *QueryNumPoolsRequest) (*QueryNumPoolsResponse, error)
	// RewardClaimInfo queries the info for claiming farming rewards on the mainchain.
	RewardClaimInfo(context.Context, *QueryRewardClaimInfoRequest) (*QueryRewardClaimInfoResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Pools(ctx context.Context, req *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) Earnings(ctx context.Context, req *QueryEarningsRequest) (*QueryEarningsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Earnings not implemented")
}
func (*UnimplementedQueryServer) StakeInfo(ctx context.Context, req *QueryStakeInfoRequest) (*QueryStakeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeInfo not implemented")
}
func (*UnimplementedQueryServer) StakedPools(ctx context.Context, req *QueryStakedPoolsRequest) (*QueryStakedPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakedPools not implemented")
}
func (*UnimplementedQueryServer) AccountsStakedIn(ctx context.Context, req *QueryAccountsStakedInRequest) (*QueryAccountsStakedInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountsStakedIn not implemented")
}
func (*UnimplementedQueryServer) NumPools(ctx context.Context, req *QueryNumPoolsRequest) (*QueryNumPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumPools not implemented")
}
func (*UnimplementedQueryServer) RewardClaimInfo(ctx context.Context, req *QueryRewardClaimInfoRequest) (*QueryRewardClaimInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardClaimInfo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.farming.v1.Query/Pools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.farming.v1.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Earnings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEarningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Earnings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.farming.v1.Query/Earnings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Earnings(ctx, req.(*QueryEarningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.farming.v1.Query/StakeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeInfo(ctx, req.(*QueryStakeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakedPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakedPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakedPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.farming.v1.Query/StakedPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakedPools(ctx, req.(*QueryStakedPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountsStakedIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountsStakedInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountsStakedIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.farming.v1.Query/AccountsStakedIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountsStakedIn(ctx, req.(*QueryAccountsStakedInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NumPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNumPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NumPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.farming.v1.Query/NumPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NumPools(ctx, req.(*QueryNumPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardClaimInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardClaimInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardClaimInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.farming.v1.Query/RewardClaimInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardClaimInfo(ctx, req.(*QueryRewardClaimInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgn.farming.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "Earnings",
			Handler:    _Query_Earnings_Handler,
		},
		{
			MethodName: "StakeInfo",
			Handler:    _Query_StakeInfo_Handler,
		},
		{
			MethodName: "StakedPools",
			Handler:    _Query_StakedPools_Handler,
		},
		{
			MethodName: "AccountsStakedIn",
			Handler:    _Query_AccountsStakedIn_Handler,
		},
		{
			MethodName: "NumPools",
			Handler:    _Query_NumPools_Handler,
		},
		{
			MethodName: "RewardClaimInfo",
			Handler:    _Query_RewardClaimInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgn/farming/v1/query.proto",
}

func (m *QueryPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEarningsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEarningsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEarningsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEarningsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEarningsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEarningsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Earnings.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStakeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakeInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStakedPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakedPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountsStakedInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountsStakedInRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountsStakedInRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountsStakedInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountsStakedInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountsStakedInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardClaimInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardClaimInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardClaimInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigBytes) > 0 {
		i -= len(m.SigBytes)
		copy(dAtA[i:], m.SigBytes)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SigBytes)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardClaimInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardClaimInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardClaimInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastClaimTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastClaimTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintQuery(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	if len(m.RewardProtoBytes) > 0 {
		i -= len(m.RewardProtoBytes)
		copy(dAtA[i:], m.RewardProtoBytes)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RewardProtoBytes)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.RewardAmount.Size()
		i -= size
		if _, err := m.RewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNumPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNumPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNumPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNumPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNumPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNumPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumPools != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NumPools))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEarningsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEarningsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Earnings.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStakeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakeInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStakedPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakedPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAccountsStakedInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountsStakedInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRewardClaimInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SigBytes)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardClaimInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.RewardAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.RewardProtoBytes)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastClaimTime)
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryNumPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNumPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumPools != 0 {
		n += 1 + sovQuery(uint64(m.NumPools))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, FarmingPool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEarningsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEarningsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEarningsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEarningsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEarningsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEarningsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Earnings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Earnings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, FarmingPool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountsStakedInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountsStakedInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountsStakedInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountsStakedInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountsStakedInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountsStakedInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardClaimInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardClaimInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardClaimInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigBytes = append(m.SigBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SigBytes == nil {
				m.SigBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardClaimInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardClaimInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardClaimInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProtoBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardProtoBytes = append(m.RewardProtoBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardProtoBytes == nil {
				m.RewardProtoBytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastClaimTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastClaimTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNumPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNumPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNumPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNumPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNumPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNumPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPools", wireType)
			}
			m.NumPools = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPools |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
