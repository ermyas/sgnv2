// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/farming/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PoolHistoricalRewardsRecord is used for import / export via genesis json.
type PoolHistoricalRewardsRecord struct {
	PoolName string                `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty" yaml:"pool_name"`
	Period   uint64                `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty" yaml:"period"`
	Rewards  PoolHistoricalRewards `protobuf:"bytes,3,opt,name=rewards,proto3" json:"rewards" yaml:"pool_historical_rewards"`
}

func (m *PoolHistoricalRewardsRecord) Reset()         { *m = PoolHistoricalRewardsRecord{} }
func (m *PoolHistoricalRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*PoolHistoricalRewardsRecord) ProtoMessage()    {}
func (*PoolHistoricalRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf470751cba63b32, []int{0}
}
func (m *PoolHistoricalRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolHistoricalRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolHistoricalRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolHistoricalRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolHistoricalRewardsRecord.Merge(m, src)
}
func (m *PoolHistoricalRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *PoolHistoricalRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolHistoricalRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PoolHistoricalRewardsRecord proto.InternalMessageInfo

// PoolCurrentRewardsRecord is used for import / export via genesis json.
type PoolCurrentRewardsRecord struct {
	PoolName string             `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty" yaml:"pool_name"`
	Rewards  PoolCurrentRewards `protobuf:"bytes,2,opt,name=rewards,proto3" json:"rewards" yaml:"pool_current_rewards"`
}

func (m *PoolCurrentRewardsRecord) Reset()         { *m = PoolCurrentRewardsRecord{} }
func (m *PoolCurrentRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*PoolCurrentRewardsRecord) ProtoMessage()    {}
func (*PoolCurrentRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf470751cba63b32, []int{1}
}
func (m *PoolCurrentRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolCurrentRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolCurrentRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolCurrentRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolCurrentRewardsRecord.Merge(m, src)
}
func (m *PoolCurrentRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *PoolCurrentRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolCurrentRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PoolCurrentRewardsRecord proto.InternalMessageInfo

// StakeInfoRecord is used for import / export via genesis json.
type StakeInfoRecord struct {
	PoolName      string    `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty" yaml:"pool_name"`
	StakerAddress string    `protobuf:"bytes,2,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty" yaml:"staker_address"`
	StakeInfo     StakeInfo `protobuf:"bytes,3,opt,name=stake_info,json=stakeInfo,proto3" json:"stake_info" yaml:"stake_info"`
}

func (m *StakeInfoRecord) Reset()         { *m = StakeInfoRecord{} }
func (m *StakeInfoRecord) String() string { return proto.CompactTextString(m) }
func (*StakeInfoRecord) ProtoMessage()    {}
func (*StakeInfoRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf470751cba63b32, []int{2}
}
func (m *StakeInfoRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeInfoRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeInfoRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeInfoRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeInfoRecord.Merge(m, src)
}
func (m *StakeInfoRecord) XXX_Size() int {
	return m.Size()
}
func (m *StakeInfoRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeInfoRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StakeInfoRecord proto.InternalMessageInfo

// GenesisState defines the farming module's genesis state.
type GenesisState struct {
	// pools defines the farming pools at genesis.
	Pools []FarmingPool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools" yaml:"pools"`
	// stake_infos defines the stake infos at genesis.
	StakeInfos []StakeInfo `protobuf:"bytes,2,rep,name=stake_infos,json=stakeInfos,proto3" json:"stake_infos" yaml:"stake_infos"`
	// pool_historical_rewards defines the historical rewards of all pools at genesis.
	PoolHistoricalRewards []PoolHistoricalRewardsRecord `protobuf:"bytes,3,rep,name=pool_historical_rewards,json=poolHistoricalRewards,proto3" json:"pool_historical_rewards" yaml:"pool_historical_rewards"`
	// pool_current_rewards defines the current rewards of all pools at genesis.
	PoolCurrentRewards []PoolCurrentRewardsRecord `protobuf:"bytes,4,rep,name=pool_current_rewards,json=poolCurrentRewards,proto3" json:"pool_current_rewards" yaml:"pool_current_rewards"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf470751cba63b32, []int{3}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PoolHistoricalRewardsRecord)(nil), "sgn.farming.v1.PoolHistoricalRewardsRecord")
	proto.RegisterType((*PoolCurrentRewardsRecord)(nil), "sgn.farming.v1.PoolCurrentRewardsRecord")
	proto.RegisterType((*StakeInfoRecord)(nil), "sgn.farming.v1.StakeInfoRecord")
	proto.RegisterType((*GenesisState)(nil), "sgn.farming.v1.GenesisState")
}

func init() { proto.RegisterFile("sgn/farming/v1/genesis.proto", fileDescriptor_bf470751cba63b32) }

var fileDescriptor_bf470751cba63b32 = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x4d, 0x29, 0xcd, 0xa6, 0x2d, 0x74, 0x95, 0x0a, 0x27, 0x41, 0x76, 0xb4, 0x08,
	0x14, 0x84, 0x6a, 0x2b, 0xe1, 0xd6, 0x13, 0x18, 0x89, 0xc2, 0x01, 0x84, 0x1c, 0x89, 0x03, 0x97,
	0xc8, 0x4d, 0x36, 0xae, 0xd5, 0x64, 0xd7, 0xda, 0x75, 0x53, 0x7a, 0xe2, 0x8a, 0xc4, 0x85, 0x47,
	0xe8, 0x91, 0x67, 0xe0, 0x09, 0x72, 0xec, 0x91, 0x53, 0x84, 0x12, 0x21, 0x71, 0xe2, 0x90, 0x27,
	0x40, 0xf6, 0x6e, 0x9c, 0x3f, 0x84, 0x12, 0xd1, 0xdb, 0x7a, 0x67, 0xe6, 0x9b, 0xdf, 0xe7, 0x19,
	0x2d, 0xbc, 0x2b, 0x7c, 0x6a, 0xb7, 0x3d, 0xde, 0x0d, 0xa8, 0x6f, 0xf7, 0xaa, 0xb6, 0x4f, 0x28,
	0x11, 0x81, 0xb0, 0x42, 0xce, 0x22, 0x86, 0x76, 0x84, 0x4f, 0x2d, 0x15, 0xb5, 0x7a, 0xd5, 0x62,
	0xde, 0x67, 0x3e, 0x4b, 0x42, 0x76, 0x7c, 0x92, 0x59, 0xc5, 0x45, 0x8d, 0x49, 0x41, 0x12, 0xc5,
	0xbf, 0x00, 0x2c, 0xbd, 0x61, 0xac, 0xf3, 0x22, 0x10, 0x11, 0xe3, 0x41, 0xd3, 0xeb, 0xb8, 0xe4,
	0xcc, 0xe3, 0x2d, 0xe1, 0x92, 0x26, 0xe3, 0x2d, 0x54, 0x85, 0xd9, 0x90, 0xb1, 0x4e, 0x83, 0x7a,
	0x5d, 0xa2, 0x83, 0x32, 0xa8, 0x64, 0x9d, 0xfc, 0x78, 0x60, 0xde, 0x3e, 0xf7, 0xba, 0x9d, 0x03,
	0x9c, 0x86, 0xb0, 0xbb, 0x19, 0x9f, 0x5f, 0x7b, 0x5d, 0x82, 0x1e, 0xc2, 0x8d, 0x90, 0xf0, 0x80,
	0xb5, 0xf4, 0xb5, 0x32, 0xa8, 0xac, 0x3b, 0xbb, 0xe3, 0x81, 0xb9, 0xad, 0xf2, 0x93, 0x7b, 0xec,
	0xaa, 0x04, 0xe4, 0xc3, 0x9b, 0x5c, 0xb6, 0xd3, 0x33, 0x65, 0x50, 0xc9, 0xd5, 0xee, 0x5b, 0xf3,
	0x9e, 0xac, 0xa5, 0x6c, 0xce, 0x83, 0xfe, 0xc0, 0xd4, 0xc6, 0x03, 0xd3, 0x98, 0xc1, 0x38, 0x4e,
	0xb3, 0x1a, 0x4a, 0x13, 0xbb, 0x13, 0xf5, 0x83, 0xcd, 0x8f, 0x17, 0xa6, 0xf6, 0xf3, 0xc2, 0xd4,
	0xf0, 0x57, 0x00, 0xf5, 0x58, 0xf4, 0xd9, 0x29, 0xe7, 0x84, 0x46, 0xd7, 0x76, 0xeb, 0x4d, 0x2d,
	0xac, 0x25, 0x16, 0xf0, 0x32, 0x0b, 0xf3, 0xdd, 0x9c, 0x7b, 0x8a, 0xbf, 0x34, 0x23, 0xdc, 0x94,
	0x29, 0x57, 0xc2, 0xff, 0x00, 0xf0, 0x56, 0x3d, 0xf2, 0x4e, 0xc8, 0x4b, 0xda, 0x66, 0xff, 0xcf,
	0xfc, 0x04, 0xee, 0x88, 0x58, 0x85, 0x37, 0xbc, 0x56, 0x8b, 0x13, 0x21, 0xd1, 0xb3, 0x4e, 0x61,
	0x3c, 0x30, 0xf7, 0x64, 0xdd, 0x7c, 0x1c, 0xbb, 0xdb, 0xf2, 0xe2, 0xa9, 0xfc, 0x46, 0x75, 0x08,
	0x93, 0x8b, 0x46, 0x40, 0xdb, 0x4c, 0xcd, 0xae, 0xb0, 0x68, 0x3c, 0x25, 0x75, 0x0a, 0xca, 0xef,
	0xee, 0x8c, 0x78, 0x52, 0x8a, 0xdd, 0xac, 0x98, 0x64, 0xcd, 0xf8, 0xec, 0x67, 0xe0, 0xd6, 0xa1,
	0xdc, 0xf5, 0x7a, 0xe4, 0x45, 0x04, 0x1d, 0xc2, 0x1b, 0x31, 0xbd, 0xd0, 0x41, 0x39, 0x53, 0xc9,
	0xd5, 0x4a, 0x8b, 0xad, 0x9e, 0xcb, 0x63, 0xfc, 0xab, 0x9d, 0xbc, 0x6a, 0xb6, 0x35, 0xfd, 0x03,
	0x02, 0xbb, 0xb2, 0x1e, 0xbd, 0x85, 0xb9, 0x69, 0xf7, 0xd8, 0x77, 0xe6, 0x6a, 0xf2, 0xa2, 0x12,
	0x43, 0x8b, 0xe4, 0x02, 0xbb, 0x30, 0x45, 0x17, 0xe8, 0x13, 0x80, 0x77, 0xfe, 0xb2, 0x86, 0x7a,
	0x26, 0x69, 0xf2, 0x68, 0xa5, 0xd5, 0x96, 0x43, 0x5d, 0x79, 0xc1, 0xf7, 0xc2, 0x65, 0x22, 0xe8,
	0x03, 0xcc, 0x2f, 0xdb, 0x29, 0x7d, 0x3d, 0x21, 0xa9, 0xfc, 0x7b, 0x43, 0x15, 0xc6, 0x4a, 0x7b,
	0x8a, 0xc2, 0x3f, 0xca, 0xa7, 0xa3, 0x74, 0x5e, 0x7d, 0x19, 0x1a, 0xa0, 0x3f, 0x34, 0xc0, 0xe5,
	0xd0, 0x00, 0xdf, 0x87, 0x06, 0xf8, 0x3c, 0x32, 0xb4, 0xcb, 0x91, 0xa1, 0x7d, 0x1b, 0x19, 0xda,
	0x3b, 0xdb, 0x0f, 0xa2, 0xe3, 0xd3, 0x23, 0xab, 0xc9, 0xba, 0x76, 0x93, 0x74, 0x08, 0xdf, 0xa7,
	0x24, 0x3a, 0x63, 0xfc, 0xc4, 0x16, 0x3e, 0xdd, 0xef, 0xd5, 0xec, 0xf7, 0xe9, 0xd3, 0x15, 0x9d,
	0x87, 0x44, 0x1c, 0x6d, 0x24, 0xcf, 0xd6, 0xe3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x77, 0x0f,
	0x39, 0x0b, 0x1a, 0x05, 0x00, 0x00,
}

func (m *PoolHistoricalRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolHistoricalRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolHistoricalRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Period != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolCurrentRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolCurrentRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolCurrentRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakeInfoRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeInfoRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeInfoRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakeInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.StakerAddress) > 0 {
		i -= len(m.StakerAddress)
		copy(dAtA[i:], m.StakerAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.StakerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolCurrentRewards) > 0 {
		for iNdEx := len(m.PoolCurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolCurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PoolHistoricalRewards) > 0 {
		for iNdEx := len(m.PoolHistoricalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolHistoricalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StakeInfos) > 0 {
		for iNdEx := len(m.StakeInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolHistoricalRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovGenesis(uint64(m.Period))
	}
	l = m.Rewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PoolCurrentRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Rewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *StakeInfoRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.StakerAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.StakeInfo.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.StakeInfos) > 0 {
		for _, e := range m.StakeInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PoolHistoricalRewards) > 0 {
		for _, e := range m.PoolHistoricalRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PoolCurrentRewards) > 0 {
		for _, e := range m.PoolCurrentRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolHistoricalRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolHistoricalRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolHistoricalRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolCurrentRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolCurrentRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolCurrentRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeInfoRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeInfoRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeInfoRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, FarmingPool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeInfos = append(m.StakeInfos, StakeInfo{})
			if err := m.StakeInfos[len(m.StakeInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolHistoricalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolHistoricalRewards = append(m.PoolHistoricalRewards, PoolHistoricalRewardsRecord{})
			if err := m.PoolHistoricalRewards[len(m.PoolHistoricalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCurrentRewards = append(m.PoolCurrentRewards, PoolCurrentRewardsRecord{})
			if err := m.PoolCurrentRewards[len(m.PoolCurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
