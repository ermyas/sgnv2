// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/farming/v1/tx.proto

package types

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgClaimRewards claims the farming rewards from a single pool for an account.
type MsgClaimRewards struct {
	// pool_name defines the pool name to claim from.
	PoolName string `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty" yaml:"pool_name"`
	// address defines the account address to claim for.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// sender defines the SGN account sending the claim Msg.
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
}

func (m *MsgClaimRewards) Reset()         { *m = MsgClaimRewards{} }
func (m *MsgClaimRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewards) ProtoMessage()    {}
func (*MsgClaimRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d6ed81011549f9, []int{0}
}
func (m *MsgClaimRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewards.Merge(m, src)
}
func (m *MsgClaimRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewards proto.InternalMessageInfo

// MsgClaimRewardsResponse defines the Msg/ClaimRewards response type.
type MsgClaimRewardsResponse struct {
}

func (m *MsgClaimRewardsResponse) Reset()         { *m = MsgClaimRewardsResponse{} }
func (m *MsgClaimRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewardsResponse) ProtoMessage()    {}
func (*MsgClaimRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d6ed81011549f9, []int{1}
}
func (m *MsgClaimRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewardsResponse.Merge(m, src)
}
func (m *MsgClaimRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewardsResponse proto.InternalMessageInfo

// MsgClaimRewards claims all the farming rewards for an account.
type MsgClaimAllRewards struct {
	// address defines the account address to claim for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// sender defines the SGN account sending the claim Msg.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgClaimAllRewards) Reset()         { *m = MsgClaimAllRewards{} }
func (m *MsgClaimAllRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAllRewards) ProtoMessage()    {}
func (*MsgClaimAllRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d6ed81011549f9, []int{2}
}
func (m *MsgClaimAllRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAllRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAllRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAllRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAllRewards.Merge(m, src)
}
func (m *MsgClaimAllRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAllRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAllRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAllRewards proto.InternalMessageInfo

// MsgClaimRewardsResponse defines the Msg/ClaimRewards response type.
type MsgClaimAllRewardsResponse struct {
}

func (m *MsgClaimAllRewardsResponse) Reset()         { *m = MsgClaimAllRewardsResponse{} }
func (m *MsgClaimAllRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAllRewardsResponse) ProtoMessage()    {}
func (*MsgClaimAllRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d6ed81011549f9, []int{3}
}
func (m *MsgClaimAllRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAllRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAllRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAllRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAllRewardsResponse.Merge(m, src)
}
func (m *MsgClaimAllRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAllRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAllRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAllRewardsResponse proto.InternalMessageInfo

// SignatureDetails defines the details of a signature.
type SignatureDetails struct {
	// chain_id defines the EVM chain ID of the RewardProtoBytes.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// signature defines the signature bytes.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignatureDetails) Reset()         { *m = SignatureDetails{} }
func (m *SignatureDetails) String() string { return proto.CompactTextString(m) }
func (*SignatureDetails) ProtoMessage()    {}
func (*SignatureDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d6ed81011549f9, []int{4}
}
func (m *SignatureDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureDetails.Merge(m, src)
}
func (m *SignatureDetails) XXX_Size() int {
	return m.Size()
}
func (m *SignatureDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureDetails.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureDetails proto.InternalMessageInfo

func (m *SignatureDetails) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *SignatureDetails) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// MsgSignRewards signs a reward claim.
type MsgSignRewards struct {
	// address defines the Ethereum account address claiming the rewards.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// sender defines the SGN account sending the signing Msg.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// signature_details_list defines the list of signature details.
	SignatureDetailsList []SignatureDetails `protobuf:"bytes,3,rep,name=signature_details_list,json=signatureDetailsList,proto3" json:"signature_details_list" yaml:"signature_details_list"`
}

func (m *MsgSignRewards) Reset()         { *m = MsgSignRewards{} }
func (m *MsgSignRewards) String() string { return proto.CompactTextString(m) }
func (*MsgSignRewards) ProtoMessage()    {}
func (*MsgSignRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d6ed81011549f9, []int{5}
}
func (m *MsgSignRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignRewards.Merge(m, src)
}
func (m *MsgSignRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignRewards proto.InternalMessageInfo

// MsgSignRewardsResponse defines the Msg/SignRewards response type.
type MsgSignRewardsResponse struct {
}

func (m *MsgSignRewardsResponse) Reset()         { *m = MsgSignRewardsResponse{} }
func (m *MsgSignRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignRewardsResponse) ProtoMessage()    {}
func (*MsgSignRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d6ed81011549f9, []int{6}
}
func (m *MsgSignRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignRewardsResponse.Merge(m, src)
}
func (m *MsgSignRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignRewardsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgClaimRewards)(nil), "sgn.farming.v1.MsgClaimRewards")
	proto.RegisterType((*MsgClaimRewardsResponse)(nil), "sgn.farming.v1.MsgClaimRewardsResponse")
	proto.RegisterType((*MsgClaimAllRewards)(nil), "sgn.farming.v1.MsgClaimAllRewards")
	proto.RegisterType((*MsgClaimAllRewardsResponse)(nil), "sgn.farming.v1.MsgClaimAllRewardsResponse")
	proto.RegisterType((*SignatureDetails)(nil), "sgn.farming.v1.SignatureDetails")
	proto.RegisterType((*MsgSignRewards)(nil), "sgn.farming.v1.MsgSignRewards")
	proto.RegisterType((*MsgSignRewardsResponse)(nil), "sgn.farming.v1.MsgSignRewardsResponse")
}

func init() { proto.RegisterFile("sgn/farming/v1/tx.proto", fileDescriptor_10d6ed81011549f9) }

var fileDescriptor_10d6ed81011549f9 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x3f, 0x6f, 0xd3, 0x40,
	0x1c, 0xb5, 0x1b, 0xd4, 0x26, 0xd7, 0x92, 0x94, 0x23, 0x4a, 0x8d, 0x15, 0xec, 0xe8, 0x24, 0xa0,
	0x20, 0x6a, 0x2b, 0x61, 0xeb, 0x46, 0x60, 0x41, 0x22, 0x08, 0x19, 0x21, 0x21, 0x96, 0x70, 0x8d,
	0x8f, 0xab, 0x85, 0x7d, 0x8e, 0x7c, 0x6e, 0xda, 0x0e, 0xec, 0x8c, 0xac, 0x6c, 0xdd, 0xe0, 0xa3,
	0x54, 0x62, 0xe9, 0xc8, 0x64, 0xa1, 0x64, 0x61, 0xf6, 0x27, 0x40, 0x39, 0xe7, 0x9c, 0xc4, 0x04,
	0x22, 0xb1, 0x9d, 0xee, 0xbd, 0xf7, 0x7b, 0xef, 0xdd, 0x1f, 0xb0, 0xc7, 0x29, 0xb3, 0xdf, 0xe3,
	0x28, 0xf0, 0x18, 0xb5, 0x47, 0x6d, 0x3b, 0x3e, 0xb3, 0x86, 0x51, 0x18, 0x87, 0xb0, 0xca, 0x29,
	0xb3, 0x66, 0x80, 0x35, 0x6a, 0xeb, 0x75, 0x1a, 0xd2, 0x50, 0x40, 0xf6, 0x74, 0x95, 0xb1, 0xf4,
	0x66, 0x41, 0x2e, 0x05, 0x02, 0x45, 0x5f, 0x55, 0x50, 0xeb, 0x71, 0xfa, 0xc4, 0xc7, 0x5e, 0xe0,
	0x90, 0x53, 0x1c, 0xb9, 0x1c, 0xb6, 0x41, 0x65, 0x18, 0x86, 0x7e, 0x9f, 0xe1, 0x80, 0x68, 0x6a,
	0x4b, 0xdd, 0xaf, 0x74, 0xeb, 0x69, 0x62, 0xee, 0x9e, 0xe3, 0xc0, 0x3f, 0x44, 0x39, 0x84, 0x9c,
	0xf2, 0x74, 0xfd, 0x02, 0x07, 0x04, 0x3e, 0x04, 0x5b, 0xd8, 0x75, 0x23, 0xc2, 0xb9, 0xb6, 0x21,
	0x04, 0x30, 0x4d, 0xcc, 0x6a, 0x26, 0x98, 0x01, 0xc8, 0x91, 0x14, 0x78, 0x1f, 0x6c, 0x72, 0xc2,
	0x5c, 0x12, 0x69, 0x25, 0x41, 0xbe, 0x91, 0x26, 0xe6, 0xf5, 0x8c, 0x9c, 0xed, 0x23, 0x67, 0x46,
	0x38, 0x2c, 0x7f, 0xba, 0x30, 0x95, 0x5f, 0x17, 0xa6, 0x82, 0x6e, 0x81, 0xbd, 0x42, 0x50, 0x87,
	0xf0, 0x61, 0xc8, 0x38, 0x41, 0x2f, 0x01, 0x94, 0xd0, 0x63, 0xdf, 0x97, 0x35, 0xb4, 0x79, 0x26,
	0x51, 0x62, 0xee, 0xdf, 0xc8, 0xfd, 0x45, 0xd8, 0x15, 0x66, 0x4d, 0xa0, 0xff, 0x39, 0x31, 0xf7,
	0x7b, 0x07, 0x76, 0x5f, 0x79, 0x94, 0xe1, 0xf8, 0x24, 0x22, 0x4f, 0x49, 0x8c, 0x3d, 0x9f, 0x43,
	0x0b, 0x94, 0x07, 0xc7, 0xd8, 0x63, 0x7d, 0xcf, 0x15, 0x76, 0xd7, 0xba, 0x37, 0xd3, 0xc4, 0xac,
	0x65, 0xad, 0x24, 0x82, 0x9c, 0x2d, 0xb1, 0x7c, 0xe6, 0xc2, 0x26, 0xa8, 0x70, 0x39, 0x43, 0xc4,
	0xd8, 0x71, 0xe6, 0x1b, 0xe8, 0xbb, 0x0a, 0xaa, 0x3d, 0x4e, 0xa7, 0x2e, 0xff, 0x5d, 0x07, 0x7e,
	0x04, 0x8d, 0x7c, 0x62, 0xdf, 0xcd, 0x72, 0xf6, 0x7d, 0x8f, 0xc7, 0x5a, 0xa9, 0x55, 0xda, 0xdf,
	0xee, 0xb4, 0xac, 0xe5, 0x07, 0x64, 0x15, 0x4b, 0x75, 0xef, 0x5c, 0x26, 0xa6, 0x92, 0x26, 0xe6,
	0xed, 0xd9, 0xe5, 0xac, 0x9c, 0x86, 0x9c, 0x3a, 0x2f, 0x08, 0x9f, 0x7b, 0x3c, 0x5e, 0x38, 0x4d,
	0x0d, 0x34, 0x96, 0xcb, 0xc8, 0x93, 0xec, 0x7c, 0xd9, 0x00, 0xa5, 0x1e, 0xa7, 0xf0, 0x0d, 0xd8,
	0x59, 0x7a, 0x82, 0x66, 0x31, 0x5a, 0xe1, 0xea, 0xf5, 0x7b, 0x6b, 0x08, 0xd2, 0x01, 0x62, 0x50,
	0x2b, 0x3e, 0x0c, 0xf4, 0x37, 0xed, 0x9c, 0xa3, 0x3f, 0x58, 0xcf, 0xc9, 0x2d, 0x5e, 0x83, 0xed,
	0xc5, 0x8b, 0x32, 0x56, 0x48, 0x17, 0x70, 0xfd, 0xee, 0xbf, 0x71, 0x39, 0xb6, 0xdb, 0xfb, 0x36,
	0x36, 0xd4, 0xcb, 0xb1, 0xa1, 0x5e, 0x8d, 0x0d, 0xf5, 0xe7, 0xd8, 0x50, 0x3f, 0x4f, 0x0c, 0xe5,
	0x6a, 0x62, 0x28, 0x3f, 0x26, 0x86, 0xf2, 0xd6, 0xa6, 0x5e, 0x7c, 0x7c, 0x72, 0x64, 0x0d, 0xc2,
	0xc0, 0x1e, 0x10, 0x9f, 0x44, 0x07, 0x8c, 0xc4, 0xa7, 0x61, 0xf4, 0xc1, 0xe6, 0x94, 0x1d, 0x8c,
	0x3a, 0xf6, 0x59, 0xfe, 0xe9, 0xe3, 0xf3, 0x21, 0xe1, 0x47, 0x9b, 0xe2, 0xc3, 0x3f, 0xfa, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0x39, 0xeb, 0x0f, 0xbe, 0x4f, 0x04, 0x00, 0x00,
}

func (this *MsgClaimRewardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgClaimRewardsResponse)
	if !ok {
		that2, ok := that.(MsgClaimRewardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgClaimAllRewardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgClaimAllRewardsResponse)
	if !ok {
		that2, ok := that.(MsgClaimAllRewardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SignatureDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureDetails)
	if !ok {
		that2, ok := that.(SignatureDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *MsgSignRewardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSignRewardsResponse)
	if !ok {
		that2, ok := that.(MsgSignRewardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// ClaimRewards defines a method to claim the farming rewards from a single pool.
	ClaimRewards(ctx context.Context, in *MsgClaimRewards, opts ...grpc.CallOption) (*MsgClaimRewardsResponse, error)
	// ClaimAllRewards defines a method to claim the farming rewards from all the staked pools.
	ClaimAllRewards(ctx context.Context, in *MsgClaimAllRewards, opts ...grpc.CallOption) (*MsgClaimAllRewardsResponse, error)
	// SignRewards defines a method for validators to co-sign a reward claim.
	SignRewards(ctx context.Context, in *MsgSignRewards, opts ...grpc.CallOption) (*MsgSignRewardsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ClaimRewards(ctx context.Context, in *MsgClaimRewards, opts ...grpc.CallOption) (*MsgClaimRewardsResponse, error) {
	out := new(MsgClaimRewardsResponse)
	err := c.cc.Invoke(ctx, "/sgn.farming.v1.Msg/ClaimRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimAllRewards(ctx context.Context, in *MsgClaimAllRewards, opts ...grpc.CallOption) (*MsgClaimAllRewardsResponse, error) {
	out := new(MsgClaimAllRewardsResponse)
	err := c.cc.Invoke(ctx, "/sgn.farming.v1.Msg/ClaimAllRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignRewards(ctx context.Context, in *MsgSignRewards, opts ...grpc.CallOption) (*MsgSignRewardsResponse, error) {
	out := new(MsgSignRewardsResponse)
	err := c.cc.Invoke(ctx, "/sgn.farming.v1.Msg/SignRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// ClaimRewards defines a method to claim the farming rewards from a single pool.
	ClaimRewards(context.Context, *MsgClaimRewards) (*MsgClaimRewardsResponse, error)
	// ClaimAllRewards defines a method to claim the farming rewards from all the staked pools.
	ClaimAllRewards(context.Context, *MsgClaimAllRewards) (*MsgClaimAllRewardsResponse, error)
	// SignRewards defines a method for validators to co-sign a reward claim.
	SignRewards(context.Context, *MsgSignRewards) (*MsgSignRewardsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ClaimRewards(ctx context.Context, req *MsgClaimRewards) (*MsgClaimRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRewards not implemented")
}
func (*UnimplementedMsgServer) ClaimAllRewards(ctx context.Context, req *MsgClaimAllRewards) (*MsgClaimAllRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimAllRewards not implemented")
}
func (*UnimplementedMsgServer) SignRewards(ctx context.Context, req *MsgSignRewards) (*MsgSignRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignRewards not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ClaimRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.farming.v1.Msg/ClaimRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimRewards(ctx, req.(*MsgClaimRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimAllRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimAllRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimAllRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.farming.v1.Msg/ClaimAllRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimAllRewards(ctx, req.(*MsgClaimAllRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.farming.v1.Msg/SignRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignRewards(ctx, req.(*MsgSignRewards))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgn.farming.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimRewards",
			Handler:    _Msg_ClaimRewards_Handler,
		},
		{
			MethodName: "ClaimAllRewards",
			Handler:    _Msg_ClaimAllRewards_Handler,
		},
		{
			MethodName: "SignRewards",
			Handler:    _Msg_SignRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgn/farming/v1/tx.proto",
}

func (m *MsgClaimRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimAllRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAllRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAllRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimAllRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAllRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAllRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SignatureDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignatureDetailsList) > 0 {
		for iNdEx := len(m.SignatureDetailsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureDetailsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgClaimRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimAllRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimAllRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SignatureDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SignatureDetailsList) > 0 {
		for _, e := range m.SignatureDetailsList {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSignRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgClaimRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAllRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAllRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAllRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAllRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAllRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAllRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureDetailsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureDetailsList = append(m.SignatureDetailsList, SignatureDetails{})
			if err := m.SignatureDetailsList[len(m.SignatureDetailsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
