// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/message/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/celer-network/sgn-v2/common/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryExecutionContextsRequest is request type for the Query/ExecutionContexts RPC method.
type QueryExecutionContextsRequest struct {
	// contract_infos optionally filter request by chain IDs and / or contract addresses.
	ContractInfos []*types.ContractInfo `protobuf:"bytes,1,rep,name=contract_infos,json=contractInfos,proto3" json:"contract_infos,omitempty"`
}

func (m *QueryExecutionContextsRequest) Reset()         { *m = QueryExecutionContextsRequest{} }
func (m *QueryExecutionContextsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExecutionContextsRequest) ProtoMessage()    {}
func (*QueryExecutionContextsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{2}
}
func (m *QueryExecutionContextsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutionContextsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutionContextsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutionContextsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutionContextsRequest.Merge(m, src)
}
func (m *QueryExecutionContextsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutionContextsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutionContextsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutionContextsRequest proto.InternalMessageInfo

func (m *QueryExecutionContextsRequest) GetContractInfos() []*types.ContractInfo {
	if m != nil {
		return m.ContractInfos
	}
	return nil
}

// QueryExecutionContextsRequest is response type for the Query/ExecutionContexts RPC method.
type QueryExecutionContextsResponse struct {
	// execution_contexts is the execution contexts.
	ExecutionContexts []ExecutionContext `protobuf:"bytes,1,rep,name=execution_contexts,json=executionContexts,proto3" json:"execution_contexts"`
}

func (m *QueryExecutionContextsResponse) Reset()         { *m = QueryExecutionContextsResponse{} }
func (m *QueryExecutionContextsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExecutionContextsResponse) ProtoMessage()    {}
func (*QueryExecutionContextsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{3}
}
func (m *QueryExecutionContextsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutionContextsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutionContextsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutionContextsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutionContextsResponse.Merge(m, src)
}
func (m *QueryExecutionContextsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutionContextsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutionContextsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutionContextsResponse proto.InternalMessageInfo

func (m *QueryExecutionContextsResponse) GetExecutionContexts() []ExecutionContext {
	if m != nil {
		return m.ExecutionContexts
	}
	return nil
}

// IsMessageActiveRequest is request type for the Query/IsMessageActive RPC method.
type IsMessageActiveRequest struct {
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *IsMessageActiveRequest) Reset()         { *m = IsMessageActiveRequest{} }
func (m *IsMessageActiveRequest) String() string { return proto.CompactTextString(m) }
func (*IsMessageActiveRequest) ProtoMessage()    {}
func (*IsMessageActiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{4}
}
func (m *IsMessageActiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsMessageActiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsMessageActiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsMessageActiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsMessageActiveRequest.Merge(m, src)
}
func (m *IsMessageActiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsMessageActiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsMessageActiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsMessageActiveRequest proto.InternalMessageInfo

func (m *IsMessageActiveRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

// IsMessageActiveResponse is response type for the Query/IsMessageActive RPC method.
type IsMessageActiveResponse struct {
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *IsMessageActiveResponse) Reset()         { *m = IsMessageActiveResponse{} }
func (m *IsMessageActiveResponse) String() string { return proto.CompactTextString(m) }
func (*IsMessageActiveResponse) ProtoMessage()    {}
func (*IsMessageActiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{5}
}
func (m *IsMessageActiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsMessageActiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsMessageActiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsMessageActiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsMessageActiveResponse.Merge(m, src)
}
func (m *IsMessageActiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsMessageActiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsMessageActiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsMessageActiveResponse proto.InternalMessageInfo

func (m *IsMessageActiveResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

// QueryMessageExistsRequest is request type for the Query/MessageExists RPC method.
type QueryMessageExistsRequest struct {
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *QueryMessageExistsRequest) Reset()         { *m = QueryMessageExistsRequest{} }
func (m *QueryMessageExistsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMessageExistsRequest) ProtoMessage()    {}
func (*QueryMessageExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{6}
}
func (m *QueryMessageExistsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessageExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessageExistsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessageExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessageExistsRequest.Merge(m, src)
}
func (m *QueryMessageExistsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessageExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessageExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessageExistsRequest proto.InternalMessageInfo

func (m *QueryMessageExistsRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

// QueryMessageExistsResponse is response type for the Query/MessageExists RPC method.
type QueryMessageExistsResponse struct {
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *QueryMessageExistsResponse) Reset()         { *m = QueryMessageExistsResponse{} }
func (m *QueryMessageExistsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMessageExistsResponse) ProtoMessage()    {}
func (*QueryMessageExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{7}
}
func (m *QueryMessageExistsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessageExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessageExistsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessageExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessageExistsResponse.Merge(m, src)
}
func (m *QueryMessageExistsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessageExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessageExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessageExistsResponse proto.InternalMessageInfo

func (m *QueryMessageExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

// QueryRefundExistsRequest is request type for the Query/RefundExists RPC method.
type QueryRefundExistsRequest struct {
	SrcTransferId string `protobuf:"bytes,1,opt,name=src_transfer_id,json=srcTransferId,proto3" json:"src_transfer_id,omitempty"`
}

func (m *QueryRefundExistsRequest) Reset()         { *m = QueryRefundExistsRequest{} }
func (m *QueryRefundExistsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRefundExistsRequest) ProtoMessage()    {}
func (*QueryRefundExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{8}
}
func (m *QueryRefundExistsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRefundExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRefundExistsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRefundExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRefundExistsRequest.Merge(m, src)
}
func (m *QueryRefundExistsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRefundExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRefundExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRefundExistsRequest proto.InternalMessageInfo

func (m *QueryRefundExistsRequest) GetSrcTransferId() string {
	if m != nil {
		return m.SrcTransferId
	}
	return ""
}

// QueryRefundExistsResponse is response type for the Query/RefundExists RPC method.
type QueryRefundExistsResponse struct {
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *QueryRefundExistsResponse) Reset()         { *m = QueryRefundExistsResponse{} }
func (m *QueryRefundExistsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRefundExistsResponse) ProtoMessage()    {}
func (*QueryRefundExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{9}
}
func (m *QueryRefundExistsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRefundExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRefundExistsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRefundExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRefundExistsResponse.Merge(m, src)
}
func (m *QueryRefundExistsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRefundExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRefundExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRefundExistsResponse proto.InternalMessageInfo

func (m *QueryRefundExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

// QueryMessageRequest is request type for the Query/Message RPC method.
type QueryMessageRequest struct {
	// message_id is the message id
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *QueryMessageRequest) Reset()         { *m = QueryMessageRequest{} }
func (m *QueryMessageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMessageRequest) ProtoMessage()    {}
func (*QueryMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{10}
}
func (m *QueryMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessageRequest.Merge(m, src)
}
func (m *QueryMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessageRequest proto.InternalMessageInfo

func (m *QueryMessageRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

// QueryMessageResponse is response type for the Query/Message RPC method.
type QueryMessageResponse struct {
	// message is the message queried
	Message Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
}

func (m *QueryMessageResponse) Reset()         { *m = QueryMessageResponse{} }
func (m *QueryMessageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMessageResponse) ProtoMessage()    {}
func (*QueryMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{11}
}
func (m *QueryMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessageResponse.Merge(m, src)
}
func (m *QueryMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessageResponse proto.InternalMessageInfo

func (m *QueryMessageResponse) GetMessage() Message {
	if m != nil {
		return m.Message
	}
	return Message{}
}

// QueryTransferRequest is request type for the Query/Transfer RPC method.
type QueryTransferRequest struct {
	// message_id is the message id
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *QueryTransferRequest) Reset()         { *m = QueryTransferRequest{} }
func (m *QueryTransferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTransferRequest) ProtoMessage()    {}
func (*QueryTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{12}
}
func (m *QueryTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferRequest.Merge(m, src)
}
func (m *QueryTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferRequest proto.InternalMessageInfo

func (m *QueryTransferRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

// QueryTransferResponse is response type for the Query/Transfer RPC method.
type QueryTransferResponse struct {
	// transfer is the transfer queried
	Transfer Transfer `protobuf:"bytes,1,opt,name=transfer,proto3" json:"transfer"`
}

func (m *QueryTransferResponse) Reset()         { *m = QueryTransferResponse{} }
func (m *QueryTransferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTransferResponse) ProtoMessage()    {}
func (*QueryTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{13}
}
func (m *QueryTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferResponse.Merge(m, src)
}
func (m *QueryTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferResponse proto.InternalMessageInfo

func (m *QueryTransferResponse) GetTransfer() Transfer {
	if m != nil {
		return m.Transfer
	}
	return Transfer{}
}

// QueryMessageBusRequest is request type for the Query/MessageBus RPC method.
type QueryMessageBusRequest struct {
	// chain_id is the chain id
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryMessageBusRequest) Reset()         { *m = QueryMessageBusRequest{} }
func (m *QueryMessageBusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMessageBusRequest) ProtoMessage()    {}
func (*QueryMessageBusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{14}
}
func (m *QueryMessageBusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessageBusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessageBusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessageBusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessageBusRequest.Merge(m, src)
}
func (m *QueryMessageBusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessageBusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessageBusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessageBusRequest proto.InternalMessageInfo

func (m *QueryMessageBusRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// QueryMessageBusResponse is response type for the Query/MessageBus RPC method.
type QueryMessageBusResponse struct {
	// message_bus is the MessageBus info
	MessageBus MessageBusInfo `protobuf:"bytes,1,opt,name=message_bus,json=messageBus,proto3" json:"message_bus"`
}

func (m *QueryMessageBusResponse) Reset()         { *m = QueryMessageBusResponse{} }
func (m *QueryMessageBusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMessageBusResponse) ProtoMessage()    {}
func (*QueryMessageBusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{15}
}
func (m *QueryMessageBusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessageBusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessageBusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessageBusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessageBusResponse.Merge(m, src)
}
func (m *QueryMessageBusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessageBusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessageBusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessageBusResponse proto.InternalMessageInfo

func (m *QueryMessageBusResponse) GetMessageBus() MessageBusInfo {
	if m != nil {
		return m.MessageBus
	}
	return MessageBusInfo{}
}

// QueryFeeClaimInfoRequest is the request type for the
// Query/FeeClaimInfo RPC method.
type QueryFeeClaimInfoRequest struct {
	// address defines the account address to query for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryFeeClaimInfoRequest) Reset()         { *m = QueryFeeClaimInfoRequest{} }
func (m *QueryFeeClaimInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeClaimInfoRequest) ProtoMessage()    {}
func (*QueryFeeClaimInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{16}
}
func (m *QueryFeeClaimInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeClaimInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeClaimInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeClaimInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeClaimInfoRequest.Merge(m, src)
}
func (m *QueryFeeClaimInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeClaimInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeClaimInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeClaimInfoRequest proto.InternalMessageInfo

// QueryFeeClaimInfoResponse is the response type for the
// Query/FeeClaimInfo RPC method.
type QueryFeeClaimInfoResponse struct {
	// fee_claim_info defines the fee claim info.
	FeeClaimInfo FeeClaimInfo `protobuf:"bytes,1,opt,name=fee_claim_info,json=feeClaimInfo,proto3" json:"fee_claim_info"`
}

func (m *QueryFeeClaimInfoResponse) Reset()         { *m = QueryFeeClaimInfoResponse{} }
func (m *QueryFeeClaimInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeClaimInfoResponse) ProtoMessage()    {}
func (*QueryFeeClaimInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed0081b532e3c802, []int{17}
}
func (m *QueryFeeClaimInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeClaimInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeClaimInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeClaimInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeClaimInfoResponse.Merge(m, src)
}
func (m *QueryFeeClaimInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeClaimInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeClaimInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeClaimInfoResponse proto.InternalMessageInfo

func (m *QueryFeeClaimInfoResponse) GetFeeClaimInfo() FeeClaimInfo {
	if m != nil {
		return m.FeeClaimInfo
	}
	return FeeClaimInfo{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "sgn.message.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "sgn.message.v1.QueryParamsResponse")
	proto.RegisterType((*QueryExecutionContextsRequest)(nil), "sgn.message.v1.QueryExecutionContextsRequest")
	proto.RegisterType((*QueryExecutionContextsResponse)(nil), "sgn.message.v1.QueryExecutionContextsResponse")
	proto.RegisterType((*IsMessageActiveRequest)(nil), "sgn.message.v1.IsMessageActiveRequest")
	proto.RegisterType((*IsMessageActiveResponse)(nil), "sgn.message.v1.IsMessageActiveResponse")
	proto.RegisterType((*QueryMessageExistsRequest)(nil), "sgn.message.v1.QueryMessageExistsRequest")
	proto.RegisterType((*QueryMessageExistsResponse)(nil), "sgn.message.v1.QueryMessageExistsResponse")
	proto.RegisterType((*QueryRefundExistsRequest)(nil), "sgn.message.v1.QueryRefundExistsRequest")
	proto.RegisterType((*QueryRefundExistsResponse)(nil), "sgn.message.v1.QueryRefundExistsResponse")
	proto.RegisterType((*QueryMessageRequest)(nil), "sgn.message.v1.QueryMessageRequest")
	proto.RegisterType((*QueryMessageResponse)(nil), "sgn.message.v1.QueryMessageResponse")
	proto.RegisterType((*QueryTransferRequest)(nil), "sgn.message.v1.QueryTransferRequest")
	proto.RegisterType((*QueryTransferResponse)(nil), "sgn.message.v1.QueryTransferResponse")
	proto.RegisterType((*QueryMessageBusRequest)(nil), "sgn.message.v1.QueryMessageBusRequest")
	proto.RegisterType((*QueryMessageBusResponse)(nil), "sgn.message.v1.QueryMessageBusResponse")
	proto.RegisterType((*QueryFeeClaimInfoRequest)(nil), "sgn.message.v1.QueryFeeClaimInfoRequest")
	proto.RegisterType((*QueryFeeClaimInfoResponse)(nil), "sgn.message.v1.QueryFeeClaimInfoResponse")
}

func init() { proto.RegisterFile("sgn/message/v1/query.proto", fileDescriptor_ed0081b532e3c802) }

var fileDescriptor_ed0081b532e3c802 = []byte{
	// 955 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xbd, 0x50, 0x12, 0xf7, 0xe5, 0x47, 0xd5, 0x21, 0x38, 0xee, 0xd2, 0x6e, 0xaa, 0x21,
	0x4d, 0xdd, 0x80, 0x77, 0xeb, 0x24, 0x10, 0x29, 0x07, 0x24, 0x1c, 0x05, 0x61, 0x21, 0x04, 0x18,
	0xb8, 0x70, 0x31, 0x9b, 0xf5, 0xd8, 0x5d, 0x11, 0xef, 0x38, 0x3b, 0xbb, 0x6e, 0xaa, 0x28, 0x97,
	0x1e, 0x10, 0x17, 0x24, 0x24, 0xc4, 0x05, 0x10, 0xea, 0x9d, 0x7f, 0xa4, 0xc7, 0x48, 0x5c, 0x38,
	0x21, 0x94, 0x70, 0xe0, 0xcf, 0x40, 0x3b, 0xfb, 0x26, 0xf1, 0x8e, 0x77, 0x13, 0xdf, 0x3c, 0x33,
	0xef, 0xbd, 0xef, 0xe7, 0xcd, 0x8f, 0xef, 0x1a, 0x4c, 0xd1, 0x0f, 0x9c, 0x01, 0x13, 0xc2, 0xed,
	0x33, 0x67, 0xd4, 0x70, 0x0e, 0x63, 0x16, 0x3e, 0xb3, 0x87, 0x21, 0x8f, 0x38, 0x59, 0x14, 0xfd,
	0xc0, 0xc6, 0x35, 0x7b, 0xd4, 0x30, 0x97, 0xfa, 0xbc, 0xcf, 0xe5, 0x92, 0x93, 0xfc, 0x4a, 0xa3,
	0xcc, 0xbb, 0x7d, 0xce, 0xfb, 0x07, 0xcc, 0x71, 0x87, 0xbe, 0xe3, 0x06, 0x01, 0x8f, 0xdc, 0xc8,
	0xe7, 0x81, 0xc0, 0x55, 0x59, 0xdf, 0xe3, 0x83, 0x01, 0x0f, 0x92, 0xf2, 0xe9, 0x2f, 0x95, 0xa9,
	0x69, 0x2b, 0x29, 0xb9, 0x4a, 0x97, 0x80, 0x7c, 0x9e, 0xc0, 0x7c, 0xe6, 0x86, 0xee, 0x40, 0xb4,
	0xd9, 0x61, 0xcc, 0x44, 0x44, 0x3f, 0x86, 0xd7, 0x33, 0xb3, 0x62, 0xc8, 0x03, 0xc1, 0xc8, 0x16,
	0xcc, 0x0c, 0xe5, 0x4c, 0xd5, 0xb8, 0x6f, 0xd4, 0xe6, 0x36, 0x2a, 0x76, 0x96, 0xdd, 0x4e, 0xe3,
	0x9b, 0x37, 0x5e, 0xfe, 0xbd, 0x52, 0x6a, 0x63, 0x2c, 0xf5, 0xe0, 0x9e, 0x2c, 0xb6, 0x77, 0xc4,
	0xbc, 0x38, 0xa1, 0xde, 0xe5, 0x41, 0xc4, 0x8e, 0x22, 0xa5, 0x46, 0x9a, 0xb0, 0xe8, 0xf1, 0x20,
	0x0a, 0x5d, 0x2f, 0xea, 0xf8, 0x41, 0x8f, 0x27, 0xe5, 0x5f, 0xad, 0xcd, 0x6d, 0xbc, 0x29, 0xcb,
	0x63, 0x33, 0xa3, 0x86, 0xbd, 0x8b, 0x41, 0xad, 0xa0, 0xc7, 0xdb, 0x0b, 0xde, 0xd8, 0x48, 0xd0,
	0xa7, 0x60, 0x15, 0x89, 0x20, 0xfc, 0x57, 0x40, 0x98, 0x5a, 0xec, 0x78, 0xb8, 0x8a, 0x4a, 0xf7,
	0xf5, 0x46, 0xf4, 0x32, 0xd8, 0xd2, 0x6d, 0xa6, 0x97, 0xa7, 0xdb, 0x50, 0x69, 0x89, 0x4f, 0xd2,
	0xcc, 0x0f, 0xbc, 0xc8, 0x1f, 0x31, 0xd5, 0xd6, 0x3d, 0x00, 0xac, 0xd8, 0xf1, 0xbb, 0x72, 0xc7,
	0x6e, 0xb6, 0x6f, 0xe2, 0x4c, 0xab, 0x4b, 0x1b, 0xb0, 0x3c, 0x91, 0x88, 0xa8, 0x15, 0x98, 0x61,
	0x47, 0xbe, 0x88, 0xd2, 0x7d, 0x2e, 0xb7, 0x71, 0x44, 0x77, 0xe0, 0x8e, 0x6c, 0x12, 0xb3, 0xf6,
	0xe4, 0xec, 0x94, 0x72, 0x5b, 0x60, 0xe6, 0xe5, 0x5e, 0xa3, 0xd8, 0x84, 0xaa, 0xcc, 0x6a, 0xb3,
	0x5e, 0x1c, 0x74, 0xb3, 0x82, 0x6b, 0x70, 0x4b, 0x84, 0x5e, 0x27, 0x0a, 0xdd, 0x40, 0xf4, 0x58,
	0x78, 0xa9, 0xba, 0x20, 0x42, 0xef, 0x4b, 0x9c, 0x6d, 0x75, 0xe9, 0x26, 0x52, 0x67, 0x6b, 0x5c,
	0x23, 0xbc, 0x85, 0x37, 0x10, 0x71, 0xa7, 0x6c, 0xf2, 0x53, 0x58, 0xca, 0x66, 0xa1, 0xca, 0x36,
	0xcc, 0x62, 0x10, 0xde, 0xdc, 0x65, 0xfd, 0xc0, 0x31, 0x03, 0xcf, 0x59, 0x45, 0xd3, 0x77, 0xb1,
	0xa0, 0x6a, 0x67, 0x4a, 0x8e, 0x2f, 0xe0, 0x0d, 0x2d, 0x0d, 0x41, 0x76, 0xa0, 0xac, 0xf6, 0x0b,
	0x49, 0xaa, 0x3a, 0x89, 0xca, 0x41, 0x94, 0x8b, 0x78, 0xba, 0x09, 0x95, 0xf1, 0xe6, 0x9a, 0xf1,
	0xc5, 0x49, 0xdc, 0x81, 0xb2, 0xf7, 0xc4, 0xf5, 0x03, 0xc5, 0x72, 0xa3, 0x3d, 0x2b, 0xc7, 0xad,
	0x2e, 0xfd, 0x06, 0x96, 0x27, 0x92, 0x90, 0x65, 0x0f, 0xe6, 0x54, 0x0f, 0xfb, 0xb1, 0x7a, 0xd2,
	0x56, 0xd1, 0xc6, 0xc4, 0x22, 0x79, 0x68, 0x08, 0xa5, 0x9a, 0x6f, 0xc6, 0x82, 0xbe, 0x8f, 0x57,
	0xe4, 0x43, 0xc6, 0x76, 0x0f, 0x5c, 0x7f, 0x20, 0x5f, 0x27, 0x82, 0x55, 0x61, 0xd6, 0xed, 0x76,
	0x43, 0x26, 0x04, 0xee, 0x91, 0x1a, 0xee, 0x94, 0xbf, 0x7f, 0xb1, 0x52, 0xfa, 0xef, 0xc5, 0x4a,
	0x89, 0x32, 0xbc, 0x1e, 0xd9, 0x7c, 0x64, 0xfc, 0x08, 0x16, 0x7b, 0x8c, 0x75, 0xbc, 0x64, 0x41,
	0x7a, 0x03, 0x62, 0xde, 0xd5, 0x31, 0xc7, 0xb3, 0x11, 0x72, 0xbe, 0x37, 0x36, 0xb7, 0xf1, 0x07,
	0xc0, 0x6b, 0x52, 0x87, 0x1c, 0xc2, 0x4c, 0xea, 0x53, 0x84, 0xea, 0x55, 0x26, 0xad, 0xd0, 0x7c,
	0xeb, 0xca, 0x98, 0x14, 0x93, 0x5a, 0xcf, 0xff, 0xfc, 0xf7, 0xa7, 0x57, 0xaa, 0xa4, 0xe2, 0x24,
	0x66, 0x7b, 0x69, 0xb2, 0x4e, 0x6a, 0x81, 0xe4, 0x77, 0x03, 0x6e, 0x4f, 0x38, 0x13, 0xa9, 0xe7,
	0x96, 0x2e, 0xb2, 0x49, 0xd3, 0x9e, 0x36, 0x1c, 0xa1, 0xd6, 0x25, 0xd4, 0x2a, 0xa1, 0x3a, 0xd4,
	0xa4, 0x0d, 0x92, 0xe7, 0x06, 0xcc, 0xe2, 0x49, 0x93, 0xfc, 0x8e, 0xb3, 0x0f, 0xd1, 0x5c, 0xbd,
	0x3a, 0x08, 0x11, 0xde, 0x91, 0x08, 0x6b, 0x64, 0xd5, 0xc9, 0xff, 0x08, 0x39, 0xc7, 0x97, 0xaf,
	0xe8, 0x84, 0xfc, 0x6a, 0xc0, 0x42, 0xc6, 0x9e, 0xc8, 0xa3, 0xab, 0x54, 0x32, 0x6e, 0x64, 0xae,
	0x4f, 0x13, 0x8a, 0x58, 0x9b, 0x12, 0xab, 0x4e, 0xde, 0x2e, 0xc0, 0xea, 0xa4, 0x26, 0x94, 0xa5,
	0xfb, 0xc5, 0x80, 0x5b, 0x9a, 0x61, 0x93, 0x35, 0x5d, 0x34, 0xff, 0x53, 0x60, 0x3e, 0xbc, 0x36,
	0x0e, 0xc9, 0xde, 0x93, 0x64, 0x8f, 0x89, 0xad, 0x93, 0xf9, 0xa2, 0xa3, 0x60, 0x5c, 0x99, 0x92,
	0x85, 0xfb, 0xcd, 0x80, 0xf9, 0x71, 0x7f, 0x25, 0xb5, 0xdc, 0xed, 0xc8, 0xb1, 0x71, 0xf3, 0xd1,
	0x14, 0x91, 0x48, 0xb7, 0x2d, 0xe9, 0x1a, 0xc4, 0xd1, 0xe9, 0x42, 0x19, 0x7d, 0xb1, 0x6d, 0xda,
	0x67, 0xe1, 0x84, 0x7c, 0x67, 0x40, 0x59, 0xf9, 0x1a, 0xc9, 0xbf, 0x3a, 0x9a, 0xc3, 0x9a, 0x0f,
	0xae, 0x89, 0x42, 0xa4, 0xba, 0x44, 0x7a, 0x48, 0x1e, 0xe8, 0x48, 0x4a, 0x3f, 0xbb, 0x4f, 0x3f,
	0x18, 0x00, 0x97, 0x8e, 0x36, 0x79, 0x7e, 0xf9, 0x06, 0x3b, 0x79, 0x7e, 0x05, 0x9e, 0x4a, 0x6d,
	0x89, 0x53, 0x23, 0x6b, 0x45, 0x37, 0x6b, 0x3f, 0x16, 0xce, 0xb1, 0x32, 0xeb, 0x13, 0xf2, 0xb3,
	0x01, 0xf3, 0xe3, 0xd6, 0x55, 0x70, 0x6e, 0x39, 0xde, 0x5a, 0x70, 0x6e, 0x79, 0x2e, 0x4a, 0x1f,
	0x4b, 0xaa, 0x75, 0x52, 0xd3, 0xa9, 0xb2, 0xde, 0xea, 0x1c, 0xa3, 0x3b, 0x9f, 0x34, 0x5b, 0x2f,
	0xcf, 0x2c, 0xe3, 0xf4, 0xcc, 0x32, 0xfe, 0x39, 0xb3, 0x8c, 0x1f, 0xcf, 0xad, 0xd2, 0xe9, 0xb9,
	0x55, 0xfa, 0xeb, 0xdc, 0x2a, 0x7d, 0xed, 0xf4, 0xfd, 0xe8, 0x49, 0xbc, 0x9f, 0xfc, 0x2d, 0x73,
	0x3c, 0x76, 0xc0, 0xc2, 0x7a, 0xc0, 0xa2, 0xa7, 0x3c, 0xfc, 0x36, 0xa9, 0x5d, 0x1f, 0x6d, 0x38,
	0x47, 0x17, 0x02, 0xd1, 0xb3, 0x21, 0x13, 0xfb, 0x33, 0xf2, 0x8f, 0xe6, 0xe6, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xcd, 0x43, 0x87, 0xd1, 0x04, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ExecutionContexts returns the execution contexts of all messages that have enough signatures and are ready for execution.
	// Note that it may return messages that are being or have been executed by an executor.
	// The SGN will monitor the execution event on-chain. Once it reaches consensus that a message has been executed, the query will stop
	// returning the info about that particular message.
	//
	// The query can be optionally filtered by destination chain IDs and / or destination contract addresses.
	ExecutionContexts(ctx context.Context, in *QueryExecutionContextsRequest, opts ...grpc.CallOption) (*QueryExecutionContextsResponse, error)
	// Message queries the message details.
	Message(ctx context.Context, in *QueryMessageRequest, opts ...grpc.CallOption) (*QueryMessageResponse, error)
	// Message queries whether a message exists.
	MessageExists(ctx context.Context, in *QueryMessageExistsRequest, opts ...grpc.CallOption) (*QueryMessageExistsResponse, error)
	// Message queries whether a message is active.
	IsMessageActive(ctx context.Context, in *IsMessageActiveRequest, opts ...grpc.CallOption) (*IsMessageActiveResponse, error)
	// Message queries whether a message exists.
	RefundExists(ctx context.Context, in *QueryRefundExistsRequest, opts ...grpc.CallOption) (*QueryRefundExistsResponse, error)
	// Transfer queries the optional transfer details associated with a message.
	Transfer(ctx context.Context, in *QueryTransferRequest, opts ...grpc.CallOption) (*QueryTransferResponse, error)
	// MessageBus queries the message bus contract info.
	MessageBus(ctx context.Context, in *QueryMessageBusRequest, opts ...grpc.CallOption) (*QueryMessageBusResponse, error)
	// FeeClaimInfo queries the info for claiming message fees on-chain.
	FeeClaimInfo(ctx context.Context, in *QueryFeeClaimInfoRequest, opts ...grpc.CallOption) (*QueryFeeClaimInfoResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutionContexts(ctx context.Context, in *QueryExecutionContextsRequest, opts ...grpc.CallOption) (*QueryExecutionContextsResponse, error) {
	out := new(QueryExecutionContextsResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Query/ExecutionContexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Message(ctx context.Context, in *QueryMessageRequest, opts ...grpc.CallOption) (*QueryMessageResponse, error) {
	out := new(QueryMessageResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Query/Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MessageExists(ctx context.Context, in *QueryMessageExistsRequest, opts ...grpc.CallOption) (*QueryMessageExistsResponse, error) {
	out := new(QueryMessageExistsResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Query/MessageExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsMessageActive(ctx context.Context, in *IsMessageActiveRequest, opts ...grpc.CallOption) (*IsMessageActiveResponse, error) {
	out := new(IsMessageActiveResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Query/IsMessageActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RefundExists(ctx context.Context, in *QueryRefundExistsRequest, opts ...grpc.CallOption) (*QueryRefundExistsResponse, error) {
	out := new(QueryRefundExistsResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Query/RefundExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Transfer(ctx context.Context, in *QueryTransferRequest, opts ...grpc.CallOption) (*QueryTransferResponse, error) {
	out := new(QueryTransferResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Query/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MessageBus(ctx context.Context, in *QueryMessageBusRequest, opts ...grpc.CallOption) (*QueryMessageBusResponse, error) {
	out := new(QueryMessageBusResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Query/MessageBus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeClaimInfo(ctx context.Context, in *QueryFeeClaimInfoRequest, opts ...grpc.CallOption) (*QueryFeeClaimInfoResponse, error) {
	out := new(QueryFeeClaimInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Query/FeeClaimInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ExecutionContexts returns the execution contexts of all messages that have enough signatures and are ready for execution.
	// Note that it may return messages that are being or have been executed by an executor.
	// The SGN will monitor the execution event on-chain. Once it reaches consensus that a message has been executed, the query will stop
	// returning the info about that particular message.
	//
	// The query can be optionally filtered by destination chain IDs and / or destination contract addresses.
	ExecutionContexts(context.Context, *QueryExecutionContextsRequest) (*QueryExecutionContextsResponse, error)
	// Message queries the message details.
	Message(context.Context, *QueryMessageRequest) (*QueryMessageResponse, error)
	// Message queries whether a message exists.
	MessageExists(context.Context, *QueryMessageExistsRequest) (*QueryMessageExistsResponse, error)
	// Message queries whether a message is active.
	IsMessageActive(context.Context, *IsMessageActiveRequest) (*IsMessageActiveResponse, error)
	// Message queries whether a message exists.
	RefundExists(context.Context, *QueryRefundExistsRequest) (*QueryRefundExistsResponse, error)
	// Transfer queries the optional transfer details associated with a message.
	Transfer(context.Context, *QueryTransferRequest) (*QueryTransferResponse, error)
	// MessageBus queries the message bus contract info.
	MessageBus(context.Context, *QueryMessageBusRequest) (*QueryMessageBusResponse, error)
	// FeeClaimInfo queries the info for claiming message fees on-chain.
	FeeClaimInfo(context.Context, *QueryFeeClaimInfoRequest) (*QueryFeeClaimInfoResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ExecutionContexts(ctx context.Context, req *QueryExecutionContextsRequest) (*QueryExecutionContextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutionContexts not implemented")
}
func (*UnimplementedQueryServer) Message(ctx context.Context, req *QueryMessageRequest) (*QueryMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (*UnimplementedQueryServer) MessageExists(ctx context.Context, req *QueryMessageExistsRequest) (*QueryMessageExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageExists not implemented")
}
func (*UnimplementedQueryServer) IsMessageActive(ctx context.Context, req *IsMessageActiveRequest) (*IsMessageActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMessageActive not implemented")
}
func (*UnimplementedQueryServer) RefundExists(ctx context.Context, req *QueryRefundExistsRequest) (*QueryRefundExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundExists not implemented")
}
func (*UnimplementedQueryServer) Transfer(ctx context.Context, req *QueryTransferRequest) (*QueryTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedQueryServer) MessageBus(ctx context.Context, req *QueryMessageBusRequest) (*QueryMessageBusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageBus not implemented")
}
func (*UnimplementedQueryServer) FeeClaimInfo(ctx context.Context, req *QueryFeeClaimInfoRequest) (*QueryFeeClaimInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeClaimInfo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutionContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExecutionContextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutionContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Query/ExecutionContexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutionContexts(ctx, req.(*QueryExecutionContextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Query/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Message(ctx, req.(*QueryMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MessageExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMessageExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MessageExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Query/MessageExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MessageExists(ctx, req.(*QueryMessageExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsMessageActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMessageActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsMessageActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Query/IsMessageActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsMessageActive(ctx, req.(*IsMessageActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RefundExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefundExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RefundExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Query/RefundExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RefundExists(ctx, req.(*QueryRefundExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Query/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Transfer(ctx, req.(*QueryTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MessageBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMessageBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MessageBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Query/MessageBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MessageBus(ctx, req.(*QueryMessageBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeClaimInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeClaimInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeClaimInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Query/FeeClaimInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeClaimInfo(ctx, req.(*QueryFeeClaimInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgn.message.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ExecutionContexts",
			Handler:    _Query_ExecutionContexts_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _Query_Message_Handler,
		},
		{
			MethodName: "MessageExists",
			Handler:    _Query_MessageExists_Handler,
		},
		{
			MethodName: "IsMessageActive",
			Handler:    _Query_IsMessageActive_Handler,
		},
		{
			MethodName: "RefundExists",
			Handler:    _Query_RefundExists_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Query_Transfer_Handler,
		},
		{
			MethodName: "MessageBus",
			Handler:    _Query_MessageBus_Handler,
		},
		{
			MethodName: "FeeClaimInfo",
			Handler:    _Query_FeeClaimInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgn/message/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryExecutionContextsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutionContextsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutionContextsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractInfos) > 0 {
		for iNdEx := len(m.ContractInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExecutionContextsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutionContextsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutionContextsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecutionContexts) > 0 {
		for iNdEx := len(m.ExecutionContexts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecutionContexts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IsMessageActiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsMessageActiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsMessageActiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsMessageActiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsMessageActiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsMessageActiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMessageExistsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessageExistsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessageExistsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMessageExistsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessageExistsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessageExistsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRefundExistsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRefundExistsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRefundExistsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SrcTransferId) > 0 {
		i -= len(m.SrcTransferId)
		copy(dAtA[i:], m.SrcTransferId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SrcTransferId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRefundExistsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRefundExistsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRefundExistsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Transfer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMessageBusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessageBusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessageBusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMessageBusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessageBusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessageBusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MessageBus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFeeClaimInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeClaimInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeClaimInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeClaimInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeClaimInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeClaimInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeClaimInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExecutionContextsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractInfos) > 0 {
		for _, e := range m.ContractInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryExecutionContextsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExecutionContexts) > 0 {
		for _, e := range m.ExecutionContexts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *IsMessageActiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsMessageActiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exists {
		n += 2
	}
	return n
}

func (m *QueryMessageExistsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMessageExistsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exists {
		n += 2
	}
	return n
}

func (m *QueryRefundExistsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcTransferId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRefundExistsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exists {
		n += 2
	}
	return n
}

func (m *QueryMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Message.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Transfer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMessageBusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryMessageBusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MessageBus.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeeClaimInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeClaimInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeClaimInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutionContextsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutionContextsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutionContextsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractInfos = append(m.ContractInfos, &types.ContractInfo{})
			if err := m.ContractInfos[len(m.ContractInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutionContextsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutionContextsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutionContextsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionContexts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionContexts = append(m.ExecutionContexts, ExecutionContext{})
			if err := m.ExecutionContexts[len(m.ExecutionContexts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsMessageActiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsMessageActiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsMessageActiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsMessageActiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsMessageActiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsMessageActiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessageExistsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessageExistsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessageExistsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessageExistsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessageExistsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessageExistsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRefundExistsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRefundExistsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRefundExistsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTransferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTransferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRefundExistsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRefundExistsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRefundExistsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Transfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessageBusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessageBusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessageBusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessageBusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessageBusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessageBusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageBus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MessageBus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeClaimInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeClaimInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeClaimInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeClaimInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeClaimInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeClaimInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeClaimInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeClaimInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
