// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/message/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSignMessage signs a message request.
type MsgSignMessage struct {
	// message_id defines the message ID calculated with
	// keccak256(abi.encodePacked(sender, receiver, srcChainId, message));
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty" yaml:"message_id"`
	// sender defines the SGN account sending the signing Msg.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	// signature defines the signature.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty" yaml:"signature"`
}

func (m *MsgSignMessage) Reset()         { *m = MsgSignMessage{} }
func (m *MsgSignMessage) String() string { return proto.CompactTextString(m) }
func (*MsgSignMessage) ProtoMessage()    {}
func (*MsgSignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1a6dbbb385bc759, []int{0}
}
func (m *MsgSignMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignMessage.Merge(m, src)
}
func (m *MsgSignMessage) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignMessage proto.InternalMessageInfo

// MsgSignMessageResponse defines the Msg/SignMessage response type.
type MsgSignMessageResponse struct {
}

func (m *MsgSignMessageResponse) Reset()         { *m = MsgSignMessageResponse{} }
func (m *MsgSignMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignMessageResponse) ProtoMessage()    {}
func (*MsgSignMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1a6dbbb385bc759, []int{1}
}
func (m *MsgSignMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignMessageResponse.Merge(m, src)
}
func (m *MsgSignMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignMessageResponse proto.InternalMessageInfo

type MsgTriggerSignMessage struct {
	// message_id defines the message ID
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// sender defines the SGN account sending the trigger Msg.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgTriggerSignMessage) Reset()         { *m = MsgTriggerSignMessage{} }
func (m *MsgTriggerSignMessage) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerSignMessage) ProtoMessage()    {}
func (*MsgTriggerSignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1a6dbbb385bc759, []int{2}
}
func (m *MsgTriggerSignMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerSignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerSignMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerSignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerSignMessage.Merge(m, src)
}
func (m *MsgTriggerSignMessage) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerSignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerSignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerSignMessage proto.InternalMessageInfo

type MsgTriggerSignMessageResponse struct {
}

func (m *MsgTriggerSignMessageResponse) Reset()         { *m = MsgTriggerSignMessageResponse{} }
func (m *MsgTriggerSignMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerSignMessageResponse) ProtoMessage()    {}
func (*MsgTriggerSignMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1a6dbbb385bc759, []int{3}
}
func (m *MsgTriggerSignMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerSignMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerSignMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerSignMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerSignMessageResponse.Merge(m, src)
}
func (m *MsgTriggerSignMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerSignMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerSignMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerSignMessageResponse proto.InternalMessageInfo

// MsgClaimAllFees defines the Msg/ClaimAllFees request type.
type MsgClaimAllFees struct {
	// delegator_address defines the delegator's Ethereum address.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	// sender defines the SGN account sending the claim Msg.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
}

func (m *MsgClaimAllFees) Reset()         { *m = MsgClaimAllFees{} }
func (m *MsgClaimAllFees) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAllFees) ProtoMessage()    {}
func (*MsgClaimAllFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1a6dbbb385bc759, []int{4}
}
func (m *MsgClaimAllFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAllFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAllFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAllFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAllFees.Merge(m, src)
}
func (m *MsgClaimAllFees) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAllFees) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAllFees.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAllFees proto.InternalMessageInfo

// MsgClaimAllFeesResponse defines the Msg/ClaimAllFees response type.
type MsgClaimAllFeesResponse struct {
}

func (m *MsgClaimAllFeesResponse) Reset()         { *m = MsgClaimAllFeesResponse{} }
func (m *MsgClaimAllFeesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAllFeesResponse) ProtoMessage()    {}
func (*MsgClaimAllFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1a6dbbb385bc759, []int{5}
}
func (m *MsgClaimAllFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAllFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAllFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAllFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAllFeesResponse.Merge(m, src)
}
func (m *MsgClaimAllFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAllFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAllFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAllFeesResponse proto.InternalMessageInfo

// SignatureDetails defines the details of a signature.
type SignatureDetails struct {
	// chain_id defines the EVM chain ID of the fee claim.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// signature defines the signature bytes.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignatureDetails) Reset()         { *m = SignatureDetails{} }
func (m *SignatureDetails) String() string { return proto.CompactTextString(m) }
func (*SignatureDetails) ProtoMessage()    {}
func (*SignatureDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1a6dbbb385bc759, []int{6}
}
func (m *SignatureDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureDetails.Merge(m, src)
}
func (m *SignatureDetails) XXX_Size() int {
	return m.Size()
}
func (m *SignatureDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureDetails.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureDetails proto.InternalMessageInfo

func (m *SignatureDetails) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *SignatureDetails) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// MsgSignRewards signs a fees claim.
type MsgSignFees struct {
	// address defines the Ethereum account address claiming the fees.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// sender defines the SGN account sending the signing Msg.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// signature_details_list defines the list of signature details.
	SignatureDetailsList []SignatureDetails `protobuf:"bytes,3,rep,name=signature_details_list,json=signatureDetailsList,proto3" json:"signature_details_list" yaml:"signature_details_list"`
}

func (m *MsgSignFees) Reset()         { *m = MsgSignFees{} }
func (m *MsgSignFees) String() string { return proto.CompactTextString(m) }
func (*MsgSignFees) ProtoMessage()    {}
func (*MsgSignFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1a6dbbb385bc759, []int{7}
}
func (m *MsgSignFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignFees.Merge(m, src)
}
func (m *MsgSignFees) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignFees) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignFees.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignFees proto.InternalMessageInfo

// MsgSignFeesResponse defines the Msg/SignFees response type.
type MsgSignFeesResponse struct {
}

func (m *MsgSignFeesResponse) Reset()         { *m = MsgSignFeesResponse{} }
func (m *MsgSignFeesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignFeesResponse) ProtoMessage()    {}
func (*MsgSignFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1a6dbbb385bc759, []int{8}
}
func (m *MsgSignFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignFeesResponse.Merge(m, src)
}
func (m *MsgSignFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignFeesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSignMessage)(nil), "sgn.message.v1.MsgSignMessage")
	proto.RegisterType((*MsgSignMessageResponse)(nil), "sgn.message.v1.MsgSignMessageResponse")
	proto.RegisterType((*MsgTriggerSignMessage)(nil), "sgn.message.v1.MsgTriggerSignMessage")
	proto.RegisterType((*MsgTriggerSignMessageResponse)(nil), "sgn.message.v1.MsgTriggerSignMessageResponse")
	proto.RegisterType((*MsgClaimAllFees)(nil), "sgn.message.v1.MsgClaimAllFees")
	proto.RegisterType((*MsgClaimAllFeesResponse)(nil), "sgn.message.v1.MsgClaimAllFeesResponse")
	proto.RegisterType((*SignatureDetails)(nil), "sgn.message.v1.SignatureDetails")
	proto.RegisterType((*MsgSignFees)(nil), "sgn.message.v1.MsgSignFees")
	proto.RegisterType((*MsgSignFeesResponse)(nil), "sgn.message.v1.MsgSignFeesResponse")
}

func init() { proto.RegisterFile("sgn/message/v1/tx.proto", fileDescriptor_d1a6dbbb385bc759) }

var fileDescriptor_d1a6dbbb385bc759 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xb5, 0x9b, 0x4f, 0xfd, 0xb9, 0xc9, 0xd7, 0x26, 0x6e, 0x92, 0x9a, 0xd0, 0x78, 0xa2, 0x41,
	0x85, 0xb0, 0x88, 0xad, 0x06, 0x56, 0xdd, 0x35, 0x20, 0xa4, 0x48, 0xcd, 0xc6, 0x05, 0xa9, 0x62,
	0x13, 0xdc, 0x78, 0x34, 0x35, 0x38, 0x76, 0xe4, 0x71, 0x43, 0xbb, 0x60, 0xcf, 0x12, 0xde, 0xa0,
	0x6f, 0xc0, 0x6b, 0x64, 0xd9, 0x25, 0x2b, 0x0b, 0x25, 0x1b, 0x96, 0xc8, 0x4f, 0x80, 0xea, 0xbf,
	0xda, 0x49, 0x5a, 0x60, 0x67, 0xcf, 0x3d, 0xf7, 0xdc, 0x73, 0xcf, 0x1c, 0x0d, 0xec, 0x30, 0x6a,
	0x29, 0x43, 0xc2, 0x98, 0x46, 0x89, 0x32, 0xde, 0x57, 0xdc, 0x0b, 0x79, 0xe4, 0xd8, 0xae, 0x2d,
	0x6c, 0x32, 0x6a, 0xc9, 0x51, 0x41, 0x1e, 0xef, 0xd7, 0xca, 0xd4, 0xa6, 0x76, 0x50, 0x52, 0x6e,
	0xbe, 0x42, 0x14, 0xfe, 0xc6, 0xc3, 0x66, 0x8f, 0xd1, 0x63, 0x83, 0x5a, 0xbd, 0x10, 0x2b, 0x3c,
	0x07, 0x88, 0xda, 0xfa, 0x86, 0x2e, 0xf2, 0x0d, 0xbe, 0xb9, 0xd1, 0xa9, 0xf8, 0x1e, 0x2a, 0x5d,
	0x6a, 0x43, 0xf3, 0x00, 0xdf, 0xd6, 0xb0, 0xba, 0x11, 0xfd, 0x74, 0x75, 0xe1, 0x29, 0xac, 0x32,
	0x62, 0xe9, 0xc4, 0x11, 0x57, 0x82, 0x8e, 0x92, 0xef, 0xa1, 0xff, 0xc3, 0x8e, 0xf0, 0x1c, 0xab,
	0x11, 0x40, 0x68, 0xc3, 0x06, 0x33, 0xa8, 0xa5, 0xb9, 0xe7, 0x0e, 0x11, 0x73, 0x0d, 0xbe, 0x59,
	0xe8, 0x94, 0x7d, 0x0f, 0x15, 0x23, 0x74, 0x5c, 0xc2, 0xea, 0x2d, 0xec, 0x60, 0xfd, 0xf3, 0x15,
	0xe2, 0x7e, 0x5e, 0x21, 0x0e, 0x8b, 0x50, 0xcd, 0x0a, 0x56, 0x09, 0x1b, 0xd9, 0x16, 0x23, 0xf8,
	0x04, 0x2a, 0x3d, 0x46, 0x5f, 0x3b, 0x06, 0xa5, 0xc4, 0x49, 0x6f, 0x54, 0x5f, 0xdc, 0x28, 0x2d,
	0xbd, 0x9a, 0x95, 0x1e, 0xeb, 0x4c, 0xcd, 0x44, 0x50, 0x5f, 0xca, 0x9c, 0x8c, 0xfe, 0xca, 0xc3,
	0x56, 0x8f, 0xd1, 0x17, 0xa6, 0x66, 0x0c, 0x0f, 0x4d, 0xf3, 0x15, 0x21, 0x4c, 0xe8, 0x42, 0x49,
	0x27, 0x26, 0xa1, 0x9a, 0x6b, 0x3b, 0x7d, 0x4d, 0xd7, 0x1d, 0xc2, 0x58, 0x64, 0xe7, 0xae, 0xef,
	0x21, 0x31, 0x5c, 0x77, 0x01, 0x82, 0xd5, 0x62, 0x72, 0x76, 0x18, 0x1e, 0xfd, 0x83, 0xb9, 0x29,
	0xd1, 0x0f, 0x60, 0x67, 0x4e, 0x52, 0x22, 0xf7, 0x1d, 0x14, 0x8f, 0x63, 0x6b, 0x5f, 0x12, 0x57,
	0x33, 0x4c, 0x26, 0xc8, 0xb0, 0x3e, 0x38, 0xd3, 0x0c, 0x2b, 0xb6, 0xe8, 0xbf, 0xce, 0xb6, 0xef,
	0xa1, 0xad, 0x70, 0x4a, 0x5c, 0xc1, 0xea, 0x5a, 0xf0, 0xd9, 0xd5, 0x85, 0xdd, 0xf4, 0x2d, 0xde,
	0xc8, 0x2a, 0xa4, 0xee, 0x0b, 0x4f, 0x78, 0xc8, 0x47, 0xd7, 0x14, 0x98, 0x21, 0xc2, 0x5a, 0xc6,
	0x02, 0x35, 0xfe, 0xbd, 0xcb, 0x7d, 0xe1, 0x13, 0x54, 0x13, 0xba, 0xbe, 0x1e, 0x8a, 0xec, 0x9b,
	0x06, 0x73, 0xc5, 0x5c, 0x23, 0xd7, 0xcc, 0xb7, 0x1b, 0x72, 0x36, 0xe0, 0xf2, 0xfc, 0x46, 0x9d,
	0xbd, 0x89, 0x87, 0x38, 0xdf, 0x43, 0xf5, 0xb9, 0x60, 0x65, 0xd8, 0xb0, 0x5a, 0x66, 0x73, 0x8d,
	0x47, 0x06, 0x73, 0x53, 0x3e, 0x56, 0x60, 0x3b, 0xb5, 0x49, 0xec, 0x61, 0xfb, 0xd7, 0x0a, 0xe4,
	0x7a, 0x8c, 0x0a, 0x6f, 0x20, 0x9f, 0xce, 0x9a, 0x34, 0x2f, 0x2b, 0x1b, 0xd6, 0xda, 0xe3, 0xfb,
	0xeb, 0x31, 0xbd, 0xf0, 0x1e, 0x84, 0x25, 0x49, 0xde, 0x5b, 0xd2, 0xbd, 0x08, 0xab, 0xb5, 0xfe,
	0x0a, 0x96, 0xcc, 0x3a, 0x81, 0x42, 0x26, 0xb9, 0x68, 0x49, 0x7b, 0x1a, 0x50, 0x7b, 0xf2, 0x07,
	0x40, 0xc2, 0x7c, 0x04, 0xeb, 0x49, 0x04, 0x1e, 0xde, 0xb1, 0x79, 0xc0, 0xf8, 0xe8, 0x9e, 0x62,
	0xcc, 0xd6, 0xe9, 0x4e, 0xa6, 0x12, 0x7f, 0x3d, 0x95, 0xf8, 0x1f, 0x53, 0x89, 0xff, 0x32, 0x93,
	0xb8, 0xeb, 0x99, 0xc4, 0x7d, 0x9f, 0x49, 0xdc, 0x5b, 0x85, 0x1a, 0xee, 0xd9, 0xf9, 0xa9, 0x3c,
	0xb0, 0x87, 0xca, 0x80, 0x98, 0xc4, 0x69, 0x59, 0xc4, 0xfd, 0x68, 0x3b, 0x1f, 0x14, 0x46, 0xad,
	0xd6, 0xb8, 0xad, 0x5c, 0x24, 0x6f, 0xa4, 0x7b, 0x39, 0x22, 0xec, 0x74, 0x35, 0x78, 0xfe, 0x9e,
	0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x24, 0x61, 0x8c, 0xde, 0x3f, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SignMessage defines a method for validators to co-sign a message request to
	// a MessageBus contract.
	SignMessage(ctx context.Context, in *MsgSignMessage, opts ...grpc.CallOption) (*MsgSignMessageResponse, error)
	// TriggerSignMessage defines a method to trigger validators to co-sign a message request.
	// Used if automatic event syncing failed.
	TriggerSignMessage(ctx context.Context, in *MsgTriggerSignMessage, opts ...grpc.CallOption) (*MsgTriggerSignMessageResponse, error)
	// ClaimAllFees defines a method for SGN delegators to trigger a claim of all the message fees.
	ClaimAllFees(ctx context.Context, in *MsgClaimAllFees, opts ...grpc.CallOption) (*MsgClaimAllFeesResponse, error)
	// SignFees defines a method for validators to co-sign a fee claim request to
	// a MessageBus contract.
	SignFees(ctx context.Context, in *MsgSignFees, opts ...grpc.CallOption) (*MsgSignFeesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SignMessage(ctx context.Context, in *MsgSignMessage, opts ...grpc.CallOption) (*MsgSignMessageResponse, error) {
	out := new(MsgSignMessageResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Msg/SignMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TriggerSignMessage(ctx context.Context, in *MsgTriggerSignMessage, opts ...grpc.CallOption) (*MsgTriggerSignMessageResponse, error) {
	out := new(MsgTriggerSignMessageResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Msg/TriggerSignMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimAllFees(ctx context.Context, in *MsgClaimAllFees, opts ...grpc.CallOption) (*MsgClaimAllFeesResponse, error) {
	out := new(MsgClaimAllFeesResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Msg/ClaimAllFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignFees(ctx context.Context, in *MsgSignFees, opts ...grpc.CallOption) (*MsgSignFeesResponse, error) {
	out := new(MsgSignFeesResponse)
	err := c.cc.Invoke(ctx, "/sgn.message.v1.Msg/SignFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SignMessage defines a method for validators to co-sign a message request to
	// a MessageBus contract.
	SignMessage(context.Context, *MsgSignMessage) (*MsgSignMessageResponse, error)
	// TriggerSignMessage defines a method to trigger validators to co-sign a message request.
	// Used if automatic event syncing failed.
	TriggerSignMessage(context.Context, *MsgTriggerSignMessage) (*MsgTriggerSignMessageResponse, error)
	// ClaimAllFees defines a method for SGN delegators to trigger a claim of all the message fees.
	ClaimAllFees(context.Context, *MsgClaimAllFees) (*MsgClaimAllFeesResponse, error)
	// SignFees defines a method for validators to co-sign a fee claim request to
	// a MessageBus contract.
	SignFees(context.Context, *MsgSignFees) (*MsgSignFeesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SignMessage(ctx context.Context, req *MsgSignMessage) (*MsgSignMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessage not implemented")
}
func (*UnimplementedMsgServer) TriggerSignMessage(ctx context.Context, req *MsgTriggerSignMessage) (*MsgTriggerSignMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSignMessage not implemented")
}
func (*UnimplementedMsgServer) ClaimAllFees(ctx context.Context, req *MsgClaimAllFees) (*MsgClaimAllFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimAllFees not implemented")
}
func (*UnimplementedMsgServer) SignFees(ctx context.Context, req *MsgSignFees) (*MsgSignFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignFees not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Msg/SignMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignMessage(ctx, req.(*MsgSignMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TriggerSignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTriggerSignMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TriggerSignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Msg/TriggerSignMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TriggerSignMessage(ctx, req.(*MsgTriggerSignMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimAllFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimAllFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimAllFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Msg/ClaimAllFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimAllFees(ctx, req.(*MsgClaimAllFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.message.v1.Msg/SignFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignFees(ctx, req.(*MsgSignFees))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgn.message.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignMessage",
			Handler:    _Msg_SignMessage_Handler,
		},
		{
			MethodName: "TriggerSignMessage",
			Handler:    _Msg_TriggerSignMessage_Handler,
		},
		{
			MethodName: "ClaimAllFees",
			Handler:    _Msg_ClaimAllFees_Handler,
		},
		{
			MethodName: "SignFees",
			Handler:    _Msg_SignFees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgn/message/v1/tx.proto",
}

func (m *MsgSignMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTriggerSignMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerSignMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerSignMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTriggerSignMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerSignMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerSignMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimAllFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAllFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAllFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimAllFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAllFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAllFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SignatureDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignatureDetailsList) > 0 {
		for iNdEx := len(m.SignatureDetailsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureDetailsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSignMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTriggerSignMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTriggerSignMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimAllFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimAllFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SignatureDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SignatureDetailsList) > 0 {
		for _, e := range m.SignatureDetailsList {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSignFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSignMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerSignMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerSignMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerSignMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerSignMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerSignMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerSignMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAllFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAllFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAllFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAllFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAllFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAllFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureDetailsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureDetailsList = append(m.SignatureDetailsList, SignatureDetails{})
			if err := m.SignatureDetailsList[len(m.SignatureDetailsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
