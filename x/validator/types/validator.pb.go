// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/validator/v1/validator.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidatorStatus int32

const (
	ValidatorStatus_Null      ValidatorStatus = 0
	ValidatorStatus_Unbonded  ValidatorStatus = 1
	ValidatorStatus_Unbonding ValidatorStatus = 2
	ValidatorStatus_Bonded    ValidatorStatus = 3
)

var ValidatorStatus_name = map[int32]string{
	0: "Null",
	1: "Unbonded",
	2: "Unbonding",
	3: "Bonded",
}

var ValidatorStatus_value = map[string]int32{
	"Null":      0,
	"Unbonded":  1,
	"Unbonding": 2,
	"Bonded":    3,
}

func (x ValidatorStatus) String() string {
	return proto.EnumName(ValidatorStatus_name, int32(x))
}

func (ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_53926d1e3a7911dc, []int{0}
}

type Validator struct {
	// eth address of the validator account
	EthAddress string `protobuf:"bytes,1,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty" yaml:"eth_address"`
	// eth address of the validator signer
	EthSigner string `protobuf:"bytes,2,opt,name=eth_signer,json=ethSigner,proto3" json:"eth_signer,omitempty" yaml:"signer_address"`
	// bech32-encoded sgn address (sdk.AccAddress) of the validator.
	SgnAddress string `protobuf:"bytes,3,opt,name=sgn_address,json=sgnAddress,proto3" json:"sgn_address,omitempty" yaml:"sgn_address"`
	// bech32-encoded operator address (sdk.ValAddress) of the validator.
	OperatorAddress string `protobuf:"bytes,4,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
	// consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
	ConsensusPubkey *types.Any `protobuf:"bytes,5,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty" yaml:"consensus_pubkey"`
	// validator status (bonded/unbonding/unbonded).
	Status ValidatorStatus `protobuf:"varint,6,opt,name=status,proto3,enum=sgn.validator.v1.ValidatorStatus" json:"status,omitempty"`
	// validator total tokens
	Tokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens" yaml:"tokens"`
	// validator total shares
	Shares github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=shares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shares" yaml:"shares"`
	// validator commission rate
	CommissionRate uint64 `protobuf:"varint,9,opt,name=commission_rate,json=commissionRate,proto3" json:"commission_rate,omitempty" yaml:"commission_rate"`
	// validator descriptions
	Description *Description `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	// validator transactor account (sdk.AccAddress) addresses (TODO: move to separate message)
	Transactors []string `protobuf:"bytes,11,rep,name=transactors,proto3" json:"transactors,omitempty"`
}

func (m *Validator) Reset()      { *m = Validator{} }
func (*Validator) ProtoMessage() {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_53926d1e3a7911dc, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *Validator) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *Validator) GetSgnAddress() string {
	if m != nil {
		return m.SgnAddress
	}
	return ""
}

func (m *Validator) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *Validator) GetConsensusPubkey() *types.Any {
	if m != nil {
		return m.ConsensusPubkey
	}
	return nil
}

func (m *Validator) GetStatus() ValidatorStatus {
	if m != nil {
		return m.Status
	}
	return ValidatorStatus_Null
}

func (m *Validator) GetCommissionRate() uint64 {
	if m != nil {
		return m.CommissionRate
	}
	return 0
}

func (m *Validator) GetDescription() *Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *Validator) GetTransactors() []string {
	if m != nil {
		return m.Transactors
	}
	return nil
}

type Description struct {
	// moniker defines a human-readable name for the validator.
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// identity defines an optional identity signature (ex. UPort or Keybase).
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// website defines an optional website link.
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	// security_contact defines an optional email for security contact.
	SecurityContact string `protobuf:"bytes,4,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty" yaml:"security_contact"`
	// details define other optional details.
	Details string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *Description) Reset()         { *m = Description{} }
func (m *Description) String() string { return proto.CompactTextString(m) }
func (*Description) ProtoMessage()    {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_53926d1e3a7911dc, []int{1}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return m.Size()
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Description) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Description) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Description) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *Description) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

type Delegator struct {
	ValAddress string `protobuf:"bytes,1,opt,name=val_address,json=valAddress,proto3" json:"val_address,omitempty" yaml:"val_address"`
	DelAddress string `protobuf:"bytes,2,opt,name=del_address,json=delAddress,proto3" json:"del_address,omitempty" yaml:"del_address"`
	Shares     string `protobuf:"bytes,3,opt,name=shares,proto3" json:"shares,omitempty" yaml:"shares"`
}

func (m *Delegator) Reset()         { *m = Delegator{} }
func (m *Delegator) String() string { return proto.CompactTextString(m) }
func (*Delegator) ProtoMessage()    {}
func (*Delegator) Descriptor() ([]byte, []int) {
	return fileDescriptor_53926d1e3a7911dc, []int{2}
}
func (m *Delegator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegator.Merge(m, src)
}
func (m *Delegator) XXX_Size() int {
	return m.Size()
}
func (m *Delegator) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegator.DiscardUnknown(m)
}

var xxx_messageInfo_Delegator proto.InternalMessageInfo

func (m *Delegator) GetValAddress() string {
	if m != nil {
		return m.ValAddress
	}
	return ""
}

func (m *Delegator) GetDelAddress() string {
	if m != nil {
		return m.DelAddress
	}
	return ""
}

func (m *Delegator) GetShares() string {
	if m != nil {
		return m.Shares
	}
	return ""
}

type Syncer struct {
	ValIndex   uint64 `protobuf:"varint,1,opt,name=val_index,json=valIndex,proto3" json:"val_index,omitempty"`
	SgnAddress string `protobuf:"bytes,2,opt,name=sgn_address,json=sgnAddress,proto3" json:"sgn_address,omitempty"`
}

func (m *Syncer) Reset()         { *m = Syncer{} }
func (m *Syncer) String() string { return proto.CompactTextString(m) }
func (*Syncer) ProtoMessage()    {}
func (*Syncer) Descriptor() ([]byte, []int) {
	return fileDescriptor_53926d1e3a7911dc, []int{3}
}
func (m *Syncer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Syncer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Syncer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Syncer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Syncer.Merge(m, src)
}
func (m *Syncer) XXX_Size() int {
	return m.Size()
}
func (m *Syncer) XXX_DiscardUnknown() {
	xxx_messageInfo_Syncer.DiscardUnknown(m)
}

var xxx_messageInfo_Syncer proto.InternalMessageInfo

func (m *Syncer) GetValIndex() uint64 {
	if m != nil {
		return m.ValIndex
	}
	return 0
}

func (m *Syncer) GetSgnAddress() string {
	if m != nil {
		return m.SgnAddress
	}
	return ""
}

type Params struct {
	SyncerDuration   uint64 `protobuf:"varint,1,opt,name=syncer_duration,json=syncerDuration,proto3" json:"syncer_duration,omitempty"`
	EpochLength      uint64 `protobuf:"varint,2,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	MaxValidatorDiff uint64 `protobuf:"varint,3,opt,name=max_validator_diff,json=maxValidatorDiff,proto3" json:"max_validator_diff,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_53926d1e3a7911dc, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSyncerDuration() uint64 {
	if m != nil {
		return m.SyncerDuration
	}
	return 0
}

func (m *Params) GetEpochLength() uint64 {
	if m != nil {
		return m.EpochLength
	}
	return 0
}

func (m *Params) GetMaxValidatorDiff() uint64 {
	if m != nil {
		return m.MaxValidatorDiff
	}
	return 0
}

func init() {
	proto.RegisterEnum("sgn.validator.v1.ValidatorStatus", ValidatorStatus_name, ValidatorStatus_value)
	proto.RegisterType((*Validator)(nil), "sgn.validator.v1.Validator")
	proto.RegisterType((*Description)(nil), "sgn.validator.v1.Description")
	proto.RegisterType((*Delegator)(nil), "sgn.validator.v1.Delegator")
	proto.RegisterType((*Syncer)(nil), "sgn.validator.v1.Syncer")
	proto.RegisterType((*Params)(nil), "sgn.validator.v1.Params")
}

func init() { proto.RegisterFile("sgn/validator/v1/validator.proto", fileDescriptor_53926d1e3a7911dc) }

var fileDescriptor_53926d1e3a7911dc = []byte{
	// 859 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x31, 0x6f, 0xdb, 0x46,
	0x14, 0x16, 0x6d, 0x55, 0x91, 0x4e, 0x89, 0xa5, 0x1e, 0xdc, 0x94, 0x71, 0x50, 0x51, 0xe1, 0xd0,
	0xaa, 0x45, 0x4d, 0xc1, 0xce, 0x90, 0xd6, 0x4b, 0x10, 0x45, 0x08, 0x10, 0xa4, 0x28, 0x8c, 0x33,
	0xda, 0x02, 0x5d, 0x88, 0x13, 0x79, 0xa2, 0x0e, 0x22, 0xef, 0x84, 0xbb, 0xa3, 0x62, 0xae, 0xfd,
	0x05, 0x1d, 0x3a, 0x74, 0xf4, 0xd8, 0x1f, 0xd0, 0xbf, 0x50, 0x20, 0xe8, 0x94, 0xb1, 0xe8, 0x20,
	0x14, 0xf6, 0x92, 0x59, 0xbf, 0xa0, 0xe0, 0x9d, 0x48, 0x31, 0x0a, 0x32, 0x65, 0xb2, 0xbf, 0xef,
	0xbd, 0xef, 0x7b, 0xc7, 0x77, 0xef, 0x9d, 0x40, 0x5f, 0x46, 0x6c, 0xb8, 0xc4, 0x31, 0x0d, 0xb1,
	0xe2, 0x62, 0xb8, 0x3c, 0xd9, 0x02, 0x6f, 0x21, 0xb8, 0xe2, 0xb0, 0x2b, 0x23, 0xe6, 0x6d, 0xc9,
	0xe5, 0xc9, 0xd1, 0x61, 0xc4, 0x23, 0xae, 0x83, 0xc3, 0xfc, 0x3f, 0x93, 0x77, 0x74, 0x2f, 0xe2,
	0x3c, 0x8a, 0xc9, 0x50, 0xa3, 0x49, 0x3a, 0x1d, 0x62, 0x96, 0x15, 0xa1, 0x80, 0xcb, 0x84, 0x4b,
	0xdf, 0x68, 0x0c, 0x30, 0x21, 0xf7, 0xb7, 0x06, 0x68, 0xfd, 0x58, 0x98, 0xc3, 0x47, 0xa0, 0x4d,
	0xd4, 0xcc, 0xc7, 0x61, 0x28, 0x88, 0x94, 0xb6, 0xd5, 0xb7, 0x06, 0xad, 0xd1, 0xdd, 0xf5, 0xca,
	0x81, 0x19, 0x4e, 0xe2, 0x33, 0xb7, 0x12, 0x74, 0x11, 0x20, 0x6a, 0xf6, 0xc4, 0x00, 0xf8, 0x0d,
	0xc8, 0x91, 0x2f, 0x69, 0xc4, 0x88, 0xb0, 0xf7, 0xb4, 0xee, 0xde, 0x7a, 0xe5, 0x7c, 0x62, 0x74,
	0x86, 0xdf, 0x4a, 0x5b, 0x44, 0xcd, 0x2e, 0x34, 0x97, 0x97, 0x94, 0x11, 0x2b, 0x4b, 0xee, 0xef,
	0x96, 0xac, 0x04, 0x5d, 0x04, 0x64, 0xc4, 0x8a, 0x92, 0xcf, 0x40, 0x97, 0x2f, 0x88, 0xc8, 0xcf,
	0x5d, 0xaa, 0xeb, 0x5a, 0x7d, 0x7f, 0xbd, 0x72, 0x3e, 0x35, 0xea, 0xdd, 0x0c, 0x17, 0x75, 0x0a,
	0xaa, 0xf0, 0x51, 0xa0, 0x1b, 0x70, 0x26, 0x09, 0x93, 0xa9, 0xf4, 0x17, 0xe9, 0x64, 0x4e, 0x32,
	0xfb, 0xa3, 0xbe, 0x35, 0x68, 0x9f, 0x1e, 0x7a, 0xa6, 0xa5, 0x5e, 0xd1, 0x52, 0xef, 0x09, 0xcb,
	0x46, 0x0f, 0xb7, 0xee, 0xbb, 0x3a, 0xf7, 0xef, 0x3f, 0x8f, 0x0f, 0x37, 0xed, 0x0d, 0x44, 0xb6,
	0x50, 0xdc, 0x3b, 0x4f, 0x27, 0x2f, 0x48, 0x86, 0x3a, 0x65, 0xea, 0xb9, 0xce, 0x84, 0xdf, 0x82,
	0x86, 0x54, 0x58, 0xa5, 0xd2, 0x6e, 0xf4, 0xad, 0xc1, 0xc1, 0xe9, 0x03, 0x6f, 0xf7, 0x9a, 0xbd,
	0xf2, 0x5a, 0x2e, 0x74, 0x22, 0xda, 0x08, 0xe0, 0x4f, 0xa0, 0xa1, 0xf8, 0x9c, 0x30, 0x69, 0xdf,
	0xd2, 0x9f, 0xfb, 0xf8, 0xd5, 0xca, 0xa9, 0xfd, 0xbb, 0x72, 0x3e, 0x8f, 0xa8, 0x9a, 0xa5, 0x13,
	0x2f, 0xe0, 0xc9, 0xe6, 0x8e, 0x37, 0x7f, 0x8e, 0x65, 0x38, 0x1f, 0xaa, 0x6c, 0x41, 0xa4, 0xf7,
	0x9c, 0xa9, 0xf5, 0xca, 0xb9, 0x63, 0x8e, 0x6f, 0x5c, 0x5c, 0xb4, 0xb1, 0xcb, 0x8d, 0xe5, 0x0c,
	0x0b, 0x22, 0xed, 0xe6, 0x87, 0x19, 0x1b, 0x17, 0x17, 0x6d, 0xec, 0xe0, 0x53, 0xd0, 0x09, 0x78,
	0x92, 0x50, 0x29, 0x29, 0x67, 0xbe, 0xc0, 0x8a, 0xd8, 0xad, 0xbe, 0x35, 0xa8, 0x8f, 0x8e, 0xd6,
	0x2b, 0xe7, 0x6e, 0xd1, 0xcb, 0xb7, 0x12, 0x5c, 0x74, 0xb0, 0x65, 0x10, 0x56, 0x04, 0x3e, 0x06,
	0xed, 0x90, 0xc8, 0x40, 0xd0, 0x85, 0xa2, 0x9c, 0xd9, 0x40, 0x5f, 0xd1, 0x67, 0xef, 0xb6, 0x6d,
	0xbc, 0x4d, 0x42, 0x55, 0x05, 0xec, 0x83, 0xb6, 0x12, 0x98, 0x49, 0x1c, 0x28, 0x2e, 0xa4, 0xdd,
	0xee, 0xef, 0x0f, 0x5a, 0xa8, 0x4a, 0x9d, 0x35, 0x7f, 0xbf, 0x72, 0x6a, 0x6f, 0xae, 0x9c, 0x9a,
	0xfb, 0x97, 0x05, 0xda, 0x15, 0x23, 0x68, 0x83, 0x5b, 0x09, 0x67, 0x74, 0x4e, 0x84, 0x59, 0x0a,
	0x54, 0x40, 0x78, 0x04, 0x9a, 0x34, 0x24, 0x4c, 0x51, 0x95, 0x99, 0xb9, 0x47, 0x25, 0xce, 0x55,
	0x2f, 0xc9, 0x44, 0x52, 0x45, 0xcc, 0x5c, 0xa3, 0x02, 0xe6, 0xc3, 0x2b, 0x49, 0x90, 0x0a, 0xaa,
	0x32, 0x3f, 0xe0, 0x4c, 0xe1, 0x40, 0xbd, 0x3b, 0xbc, 0xbb, 0x19, 0x2e, 0xea, 0x14, 0xd4, 0x53,
	0xc3, 0xe4, 0x15, 0x42, 0xa2, 0x30, 0x8d, 0xa5, 0x9e, 0xd9, 0x16, 0x2a, 0xe0, 0x59, 0xfd, 0xcd,
	0x95, 0x63, 0xb9, 0x7f, 0x58, 0xa0, 0x35, 0x26, 0x31, 0x89, 0x8a, 0xf5, 0x5e, 0xe2, 0xf8, 0xfd,
	0xeb, 0x5d, 0x09, 0xba, 0x08, 0x2c, 0x71, 0x5c, 0xec, 0xc8, 0xa3, 0xbc, 0xf7, 0x5b, 0xe1, 0xde,
	0xae, 0xb0, 0x12, 0x74, 0x11, 0x08, 0x49, 0x29, 0xfc, 0xb2, 0x1c, 0x29, 0xb3, 0xd8, 0x1f, 0xbf,
	0x77, 0x48, 0xdc, 0x67, 0xa0, 0x71, 0x91, 0xb1, 0x80, 0x08, 0x78, 0x1f, 0xb4, 0xf2, 0x93, 0x50,
	0x16, 0x92, 0x4b, 0x7d, 0xc8, 0x3a, 0x6a, 0x2e, 0x71, 0xfc, 0x3c, 0xc7, 0xd0, 0x79, 0xfb, 0xbd,
	0x30, 0x2d, 0xaf, 0xbc, 0x0b, 0xee, 0x2f, 0x16, 0x68, 0x9c, 0x63, 0x81, 0x13, 0x09, 0xbf, 0x00,
	0x1d, 0xa9, 0x2d, 0xfd, 0x30, 0x15, 0x58, 0x8f, 0x8d, 0xb1, 0x3b, 0x30, 0xf4, 0x78, 0xc3, 0xc2,
	0x07, 0xe0, 0x36, 0x59, 0xf0, 0x60, 0xe6, 0xc7, 0x84, 0x45, 0x6a, 0xa6, 0x5d, 0xeb, 0xa8, 0xad,
	0xb9, 0xef, 0x34, 0x05, 0xbf, 0x06, 0x30, 0xc1, 0x97, 0x7e, 0x39, 0x6a, 0x7e, 0x48, 0xa7, 0x53,
	0xfd, 0x55, 0x75, 0xd4, 0x4d, 0xf0, 0x65, 0xb9, 0xad, 0x63, 0x3a, 0x9d, 0x7e, 0x35, 0x06, 0x9d,
	0x9d, 0xf5, 0x85, 0x4d, 0x50, 0xff, 0x3e, 0x8d, 0xe3, 0x6e, 0x0d, 0xde, 0x06, 0xcd, 0x1f, 0xd8,
	0x84, 0xb3, 0x90, 0x84, 0x5d, 0x0b, 0xde, 0x01, 0x2d, 0x83, 0x28, 0x8b, 0xba, 0x7b, 0x10, 0x80,
	0xc6, 0xc8, 0x84, 0xf6, 0x47, 0x2f, 0x5e, 0x5d, 0xf7, 0xac, 0xd7, 0xd7, 0x3d, 0xeb, 0xbf, 0xeb,
	0x9e, 0xf5, 0xeb, 0x4d, 0xaf, 0xf6, 0xfa, 0xa6, 0x57, 0xfb, 0xe7, 0xa6, 0x57, 0xfb, 0xf9, 0xa4,
	0xba, 0x92, 0x24, 0x26, 0xe2, 0x98, 0x11, 0xf5, 0x92, 0x8b, 0xf9, 0x50, 0x46, 0xec, 0x78, 0x79,
	0x3a, 0xbc, 0xac, 0xfc, 0xa8, 0xe8, 0x0d, 0x9d, 0x34, 0xf4, 0x2b, 0xf6, 0xf0, 0xff, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x78, 0xd5, 0xd2, 0xda, 0x72, 0x06, 0x00, 0x00,
}

func (this *Description) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Description)
	if !ok {
		that2, ok := that.(Description)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Moniker != that1.Moniker {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	if this.SecurityContact != that1.SecurityContact {
		return false
	}
	if this.Details != that1.Details {
		return false
	}
	return true
}
func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transactors) > 0 {
		for iNdEx := len(m.Transactors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Transactors[iNdEx])
			copy(dAtA[i:], m.Transactors[iNdEx])
			i = encodeVarintValidator(dAtA, i, uint64(len(m.Transactors[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CommissionRate != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.CommissionRate))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Status != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.ConsensusPubkey != nil {
		{
			size, err := m.ConsensusPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SgnAddress) > 0 {
		i -= len(m.SgnAddress)
		copy(dAtA[i:], m.SgnAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.SgnAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Delegator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		i -= len(m.Shares)
		copy(dAtA[i:], m.Shares)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Shares)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DelAddress) > 0 {
		i -= len(m.DelAddress)
		copy(dAtA[i:], m.DelAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.DelAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValAddress) > 0 {
		i -= len(m.ValAddress)
		copy(dAtA[i:], m.ValAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.ValAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Syncer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Syncer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Syncer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SgnAddress) > 0 {
		i -= len(m.SgnAddress)
		copy(dAtA[i:], m.SgnAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.SgnAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ValIndex != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.ValIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxValidatorDiff != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.MaxValidatorDiff))
		i--
		dAtA[i] = 0x18
	}
	if m.EpochLength != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x10
	}
	if m.SyncerDuration != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.SyncerDuration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.SgnAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.ConsensusPubkey != nil {
		l = m.ConsensusPubkey.Size()
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovValidator(uint64(m.Status))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.Shares.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.CommissionRate != 0 {
		n += 1 + sovValidator(uint64(m.CommissionRate))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovValidator(uint64(l))
	}
	if len(m.Transactors) > 0 {
		for _, s := range m.Transactors {
			l = len(s)
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	return n
}

func (m *Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func (m *Delegator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.DelAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Shares)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func (m *Syncer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValIndex != 0 {
		n += 1 + sovValidator(uint64(m.ValIndex))
	}
	l = len(m.SgnAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncerDuration != 0 {
		n += 1 + sovValidator(uint64(m.SyncerDuration))
	}
	if m.EpochLength != 0 {
		n += 1 + sovValidator(uint64(m.EpochLength))
	}
	if m.MaxValidatorDiff != 0 {
		n += 1 + sovValidator(uint64(m.MaxValidatorDiff))
	}
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgnAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SgnAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusPubkey == nil {
				m.ConsensusPubkey = &types.Any{}
			}
			if err := m.ConsensusPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			m.CommissionRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommissionRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactors = append(m.Transactors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Syncer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Syncer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Syncer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValIndex", wireType)
			}
			m.ValIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgnAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SgnAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncerDuration", wireType)
			}
			m.SyncerDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncerDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidatorDiff", wireType)
			}
			m.MaxValidatorDiff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidatorDiff |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
