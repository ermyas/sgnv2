// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/cbridge/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WithdrawStatus int32

const (
	WithdrawStatus_WD_UNKNOWN WithdrawStatus = 0
	// user for withdraw: after calling withdraw api
	// relayer for add: monitored add event
	WithdrawStatus_WD_WAITING_FOR_SGN WithdrawStatus = 1
	WithdrawStatus_WD_WAITING_FOR_LP  WithdrawStatus = 2
	WithdrawStatus_WD_SUBMITTING      WithdrawStatus = 3
	WithdrawStatus_WD_COMPLETED       WithdrawStatus = 4
	// user for add: check if tx reverted when shown status is WD_SUBMITTING
	// x for withdraw: sgn rejected
	WithdrawStatus_WD_FAILED  WithdrawStatus = 5
	WithdrawStatus_WD_DELAYED WithdrawStatus = 6
)

var WithdrawStatus_name = map[int32]string{
	0: "WD_UNKNOWN",
	1: "WD_WAITING_FOR_SGN",
	2: "WD_WAITING_FOR_LP",
	3: "WD_SUBMITTING",
	4: "WD_COMPLETED",
	5: "WD_FAILED",
	6: "WD_DELAYED",
}

var WithdrawStatus_value = map[string]int32{
	"WD_UNKNOWN":         0,
	"WD_WAITING_FOR_SGN": 1,
	"WD_WAITING_FOR_LP":  2,
	"WD_SUBMITTING":      3,
	"WD_COMPLETED":       4,
	"WD_FAILED":          5,
	"WD_DELAYED":         6,
}

func (x WithdrawStatus) String() string {
	return proto.EnumName(WithdrawStatus_name, int32(x))
}

func (WithdrawStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{0}
}

type TransferHistoryStatus int32

const (
	TransferHistoryStatus_TRANSFER_UNKNOWN                      TransferHistoryStatus = 0
	TransferHistoryStatus_TRANSFER_SUBMITTING                   TransferHistoryStatus = 1
	TransferHistoryStatus_TRANSFER_FAILED                       TransferHistoryStatus = 2
	TransferHistoryStatus_TRANSFER_WAITING_FOR_SGN_CONFIRMATION TransferHistoryStatus = 3
	TransferHistoryStatus_TRANSFER_WAITING_FOR_FUND_RELEASE     TransferHistoryStatus = 4
	TransferHistoryStatus_TRANSFER_COMPLETED                    TransferHistoryStatus = 5
	TransferHistoryStatus_TRANSFER_TO_BE_REFUNDED               TransferHistoryStatus = 6
	TransferHistoryStatus_TRANSFER_REQUESTING_REFUND            TransferHistoryStatus = 7
	TransferHistoryStatus_TRANSFER_REFUND_TO_BE_CONFIRMED       TransferHistoryStatus = 8
	TransferHistoryStatus_TRANSFER_CONFIRMING_YOUR_REFUND       TransferHistoryStatus = 9
	TransferHistoryStatus_TRANSFER_REFUNDED                     TransferHistoryStatus = 10
	TransferHistoryStatus_TRANSFER_DELAYED                      TransferHistoryStatus = 11
)

var TransferHistoryStatus_name = map[int32]string{
	0:  "TRANSFER_UNKNOWN",
	1:  "TRANSFER_SUBMITTING",
	2:  "TRANSFER_FAILED",
	3:  "TRANSFER_WAITING_FOR_SGN_CONFIRMATION",
	4:  "TRANSFER_WAITING_FOR_FUND_RELEASE",
	5:  "TRANSFER_COMPLETED",
	6:  "TRANSFER_TO_BE_REFUNDED",
	7:  "TRANSFER_REQUESTING_REFUND",
	8:  "TRANSFER_REFUND_TO_BE_CONFIRMED",
	9:  "TRANSFER_CONFIRMING_YOUR_REFUND",
	10: "TRANSFER_REFUNDED",
	11: "TRANSFER_DELAYED",
}

var TransferHistoryStatus_value = map[string]int32{
	"TRANSFER_UNKNOWN":                      0,
	"TRANSFER_SUBMITTING":                   1,
	"TRANSFER_FAILED":                       2,
	"TRANSFER_WAITING_FOR_SGN_CONFIRMATION": 3,
	"TRANSFER_WAITING_FOR_FUND_RELEASE":     4,
	"TRANSFER_COMPLETED":                    5,
	"TRANSFER_TO_BE_REFUNDED":               6,
	"TRANSFER_REQUESTING_REFUND":            7,
	"TRANSFER_REFUND_TO_BE_CONFIRMED":       8,
	"TRANSFER_CONFIRMING_YOUR_REFUND":       9,
	"TRANSFER_REFUNDED":                     10,
	"TRANSFER_DELAYED":                      11,
}

func (x TransferHistoryStatus) String() string {
	return proto.EnumName(TransferHistoryStatus_name, int32(x))
}

func (TransferHistoryStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{1}
}

type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{0}
}
func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return m.Size()
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

type QueryConfigResponse struct {
	CbrConfig *CbrConfig `protobuf:"bytes,1,opt,name=cbrConfig,proto3" json:"cbrConfig,omitempty"`
}

func (m *QueryConfigResponse) Reset()         { *m = QueryConfigResponse{} }
func (m *QueryConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConfigResponse) ProtoMessage()    {}
func (*QueryConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{2}
}
func (m *QueryConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConfigResponse.Merge(m, src)
}
func (m *QueryConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConfigResponse proto.InternalMessageInfo

func (m *QueryConfigResponse) GetCbrConfig() *CbrConfig {
	if m != nil {
		return m.CbrConfig
	}
	return nil
}

type QueryRelayRequest struct {
	XrefId []byte `protobuf:"bytes,1,opt,name=xref_id,json=xrefId,proto3" json:"xref_id,omitempty"`
}

func (m *QueryRelayRequest) Reset()         { *m = QueryRelayRequest{} }
func (m *QueryRelayRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRelayRequest) ProtoMessage()    {}
func (*QueryRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{3}
}
func (m *QueryRelayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRelayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRelayRequest.Merge(m, src)
}
func (m *QueryRelayRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRelayRequest proto.InternalMessageInfo

func (m *QueryRelayRequest) GetXrefId() []byte {
	if m != nil {
		return m.XrefId
	}
	return nil
}

type QueryRelayResponse struct {
	XferRelay *XferRelay `protobuf:"bytes,1,opt,name=xfer_relay,json=xferRelay,proto3" json:"xfer_relay,omitempty"`
}

func (m *QueryRelayResponse) Reset()         { *m = QueryRelayResponse{} }
func (m *QueryRelayResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRelayResponse) ProtoMessage()    {}
func (*QueryRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{4}
}
func (m *QueryRelayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRelayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRelayResponse.Merge(m, src)
}
func (m *QueryRelayResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRelayResponse proto.InternalMessageInfo

func (m *QueryRelayResponse) GetXferRelay() *XferRelay {
	if m != nil {
		return m.XferRelay
	}
	return nil
}

type QueryChainSignersRequest struct {
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryChainSignersRequest) Reset()         { *m = QueryChainSignersRequest{} }
func (m *QueryChainSignersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainSignersRequest) ProtoMessage()    {}
func (*QueryChainSignersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{5}
}
func (m *QueryChainSignersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainSignersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainSignersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainSignersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainSignersRequest.Merge(m, src)
}
func (m *QueryChainSignersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainSignersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainSignersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainSignersRequest proto.InternalMessageInfo

func (m *QueryChainSignersRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryChainSignersResponse struct {
	ChainSigners *ChainSigners `protobuf:"bytes,1,opt,name=chain_signers,json=chainSigners,proto3" json:"chain_signers,omitempty"`
}

func (m *QueryChainSignersResponse) Reset()         { *m = QueryChainSignersResponse{} }
func (m *QueryChainSignersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainSignersResponse) ProtoMessage()    {}
func (*QueryChainSignersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{6}
}
func (m *QueryChainSignersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainSignersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainSignersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainSignersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainSignersResponse.Merge(m, src)
}
func (m *QueryChainSignersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainSignersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainSignersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainSignersResponse proto.InternalMessageInfo

func (m *QueryChainSignersResponse) GetChainSigners() *ChainSigners {
	if m != nil {
		return m.ChainSigners
	}
	return nil
}

type QueryLatestSignersResponse struct {
	LatestSigners *LatestSigners `protobuf:"bytes,1,opt,name=latest_signers,json=latestSigners,proto3" json:"latest_signers,omitempty"`
}

func (m *QueryLatestSignersResponse) Reset()         { *m = QueryLatestSignersResponse{} }
func (m *QueryLatestSignersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestSignersResponse) ProtoMessage()    {}
func (*QueryLatestSignersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{7}
}
func (m *QueryLatestSignersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestSignersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestSignersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestSignersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestSignersResponse.Merge(m, src)
}
func (m *QueryLatestSignersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestSignersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestSignersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestSignersResponse proto.InternalMessageInfo

func (m *QueryLatestSignersResponse) GetLatestSigners() *LatestSigners {
	if m != nil {
		return m.LatestSigners
	}
	return nil
}

type QueryDebugAnyRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryDebugAnyRequest) Reset()         { *m = QueryDebugAnyRequest{} }
func (m *QueryDebugAnyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDebugAnyRequest) ProtoMessage()    {}
func (*QueryDebugAnyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{8}
}
func (m *QueryDebugAnyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebugAnyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebugAnyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebugAnyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebugAnyRequest.Merge(m, src)
}
func (m *QueryDebugAnyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebugAnyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebugAnyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebugAnyRequest proto.InternalMessageInfo

func (m *QueryDebugAnyRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type QueryDebugAnyResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryDebugAnyResponse) Reset()         { *m = QueryDebugAnyResponse{} }
func (m *QueryDebugAnyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDebugAnyResponse) ProtoMessage()    {}
func (*QueryDebugAnyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{9}
}
func (m *QueryDebugAnyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebugAnyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebugAnyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebugAnyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebugAnyResponse.Merge(m, src)
}
func (m *QueryDebugAnyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebugAnyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebugAnyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebugAnyResponse proto.InternalMessageInfo

func (m *QueryDebugAnyResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryLPsRequest struct {
	// omit any of these params to get lps in all respects. if both are omitted, returns all lps
	ChainId   uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TokenAddr string `protobuf:"bytes,2,opt,name=token_addr,json=tokenAddr,proto3" json:"token_addr,omitempty"`
}

func (m *QueryLPsRequest) Reset()         { *m = QueryLPsRequest{} }
func (m *QueryLPsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLPsRequest) ProtoMessage()    {}
func (*QueryLPsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{10}
}
func (m *QueryLPsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLPsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLPsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLPsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLPsRequest.Merge(m, src)
}
func (m *QueryLPsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLPsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLPsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLPsRequest proto.InternalMessageInfo

func (m *QueryLPsRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryLPsRequest) GetTokenAddr() string {
	if m != nil {
		return m.TokenAddr
	}
	return ""
}

type QueryLPsResponse struct {
	Lps []string `protobuf:"bytes,1,rep,name=lps,proto3" json:"lps,omitempty"`
}

func (m *QueryLPsResponse) Reset()         { *m = QueryLPsResponse{} }
func (m *QueryLPsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLPsResponse) ProtoMessage()    {}
func (*QueryLPsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{11}
}
func (m *QueryLPsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLPsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLPsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLPsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLPsResponse.Merge(m, src)
}
func (m *QueryLPsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLPsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLPsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLPsResponse proto.InternalMessageInfo

func (m *QueryLPsResponse) GetLps() []string {
	if m != nil {
		return m.Lps
	}
	return nil
}

// get both liqsum and sum of all lm- and compare if they are equal
// rpc CheckLiqSum (CheckLiqSumRequest) returns (CheckLiqSumResponse) {}
type CheckLiqSumRequest struct {
	ChainId   uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TokenAddr string `protobuf:"bytes,2,opt,name=token_addr,json=tokenAddr,proto3" json:"token_addr,omitempty"`
}

func (m *CheckLiqSumRequest) Reset()         { *m = CheckLiqSumRequest{} }
func (m *CheckLiqSumRequest) String() string { return proto.CompactTextString(m) }
func (*CheckLiqSumRequest) ProtoMessage()    {}
func (*CheckLiqSumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{12}
}
func (m *CheckLiqSumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckLiqSumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckLiqSumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckLiqSumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckLiqSumRequest.Merge(m, src)
}
func (m *CheckLiqSumRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckLiqSumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckLiqSumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckLiqSumRequest proto.InternalMessageInfo

func (m *CheckLiqSumRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *CheckLiqSumRequest) GetTokenAddr() string {
	if m != nil {
		return m.TokenAddr
	}
	return ""
}

type CheckLiqSumResponse struct {
	Liqsum  string `protobuf:"bytes,1,opt,name=liqsum,proto3" json:"liqsum,omitempty"`
	Sumiter string `protobuf:"bytes,2,opt,name=sumiter,proto3" json:"sumiter,omitempty"`
}

func (m *CheckLiqSumResponse) Reset()         { *m = CheckLiqSumResponse{} }
func (m *CheckLiqSumResponse) String() string { return proto.CompactTextString(m) }
func (*CheckLiqSumResponse) ProtoMessage()    {}
func (*CheckLiqSumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{13}
}
func (m *CheckLiqSumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckLiqSumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckLiqSumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckLiqSumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckLiqSumResponse.Merge(m, src)
}
func (m *CheckLiqSumResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckLiqSumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckLiqSumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckLiqSumResponse proto.InternalMessageInfo

func (m *CheckLiqSumResponse) GetLiqsum() string {
	if m != nil {
		return m.Liqsum
	}
	return ""
}

func (m *CheckLiqSumResponse) GetSumiter() string {
	if m != nil {
		return m.Sumiter
	}
	return ""
}

type ChainTokensConfigRequest struct {
}

func (m *ChainTokensConfigRequest) Reset()         { *m = ChainTokensConfigRequest{} }
func (m *ChainTokensConfigRequest) String() string { return proto.CompactTextString(m) }
func (*ChainTokensConfigRequest) ProtoMessage()    {}
func (*ChainTokensConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{14}
}
func (m *ChainTokensConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainTokensConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainTokensConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainTokensConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainTokensConfigRequest.Merge(m, src)
}
func (m *ChainTokensConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChainTokensConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainTokensConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainTokensConfigRequest proto.InternalMessageInfo

type ChainTokensConfigResponse struct {
	ChainTokens map[string]*Tokens `protobuf:"bytes,2,rep,name=chain_tokens,json=chainTokens,proto3" json:"chain_tokens,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ChainTokensConfigResponse) Reset()         { *m = ChainTokensConfigResponse{} }
func (m *ChainTokensConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ChainTokensConfigResponse) ProtoMessage()    {}
func (*ChainTokensConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{15}
}
func (m *ChainTokensConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainTokensConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainTokensConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainTokensConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainTokensConfigResponse.Merge(m, src)
}
func (m *ChainTokensConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChainTokensConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainTokensConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChainTokensConfigResponse proto.InternalMessageInfo

func (m *ChainTokensConfigResponse) GetChainTokens() map[string]*Tokens {
	if m != nil {
		return m.ChainTokens
	}
	return nil
}

type Tokens struct {
	Tokens       []*Token `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	ContractAddr string   `protobuf:"bytes,2,opt,name=contract_addr,json=contractAddr,proto3" json:"contract_addr,omitempty"`
	BlockDelay   uint32   `protobuf:"varint,3,opt,name=block_delay,json=blockDelay,proto3" json:"block_delay,omitempty"`
}

func (m *Tokens) Reset()         { *m = Tokens{} }
func (m *Tokens) String() string { return proto.CompactTextString(m) }
func (*Tokens) ProtoMessage()    {}
func (*Tokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{16}
}
func (m *Tokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tokens.Merge(m, src)
}
func (m *Tokens) XXX_Size() int {
	return m.Size()
}
func (m *Tokens) XXX_DiscardUnknown() {
	xxx_messageInfo_Tokens.DiscardUnknown(m)
}

var xxx_messageInfo_Tokens proto.InternalMessageInfo

func (m *Tokens) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *Tokens) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *Tokens) GetBlockDelay() uint32 {
	if m != nil {
		return m.BlockDelay
	}
	return 0
}

type GetFeeRequest struct {
	SrcChainId   uint64 `protobuf:"varint,1,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DstChainId   uint64 `protobuf:"varint,2,opt,name=dst_chain_id,json=dstChainId,proto3" json:"dst_chain_id,omitempty"`
	SrcTokenAddr string `protobuf:"bytes,3,opt,name=src_token_addr,json=srcTokenAddr,proto3" json:"src_token_addr,omitempty"`
	Amt          string `protobuf:"bytes,4,opt,name=amt,proto3" json:"amt,omitempty"`
	LpAddr       string `protobuf:"bytes,5,opt,name=lp_addr,json=lpAddr,proto3" json:"lp_addr,omitempty"`
}

func (m *GetFeeRequest) Reset()         { *m = GetFeeRequest{} }
func (m *GetFeeRequest) String() string { return proto.CompactTextString(m) }
func (*GetFeeRequest) ProtoMessage()    {}
func (*GetFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{17}
}
func (m *GetFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeeRequest.Merge(m, src)
}
func (m *GetFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeeRequest proto.InternalMessageInfo

func (m *GetFeeRequest) GetSrcChainId() uint64 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func (m *GetFeeRequest) GetDstChainId() uint64 {
	if m != nil {
		return m.DstChainId
	}
	return 0
}

func (m *GetFeeRequest) GetSrcTokenAddr() string {
	if m != nil {
		return m.SrcTokenAddr
	}
	return ""
}

func (m *GetFeeRequest) GetAmt() string {
	if m != nil {
		return m.Amt
	}
	return ""
}

func (m *GetFeeRequest) GetLpAddr() string {
	if m != nil {
		return m.LpAddr
	}
	return ""
}

type GetFeeResponse struct {
	EqValueTokenAmt string `protobuf:"bytes,2,opt,name=eq_value_token_amt,json=eqValueTokenAmt,proto3" json:"eq_value_token_amt,omitempty"`
	PercFee         string `protobuf:"bytes,3,opt,name=perc_fee,json=percFee,proto3" json:"perc_fee,omitempty"`
	BaseFee         string `protobuf:"bytes,5,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	Decimal         uint64 `protobuf:"varint,4,opt,name=decimal,proto3" json:"decimal,omitempty"`
}

func (m *GetFeeResponse) Reset()         { *m = GetFeeResponse{} }
func (m *GetFeeResponse) String() string { return proto.CompactTextString(m) }
func (*GetFeeResponse) ProtoMessage()    {}
func (*GetFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{18}
}
func (m *GetFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeeResponse.Merge(m, src)
}
func (m *GetFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeeResponse proto.InternalMessageInfo

func (m *GetFeeResponse) GetEqValueTokenAmt() string {
	if m != nil {
		return m.EqValueTokenAmt
	}
	return ""
}

func (m *GetFeeResponse) GetPercFee() string {
	if m != nil {
		return m.PercFee
	}
	return ""
}

func (m *GetFeeResponse) GetBaseFee() string {
	if m != nil {
		return m.BaseFee
	}
	return ""
}

func (m *GetFeeResponse) GetDecimal() uint64 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

type GetFeePercentageRequest struct {
	SrcChainId uint64 `protobuf:"varint,1,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DstChainId uint64 `protobuf:"varint,2,opt,name=dst_chain_id,json=dstChainId,proto3" json:"dst_chain_id,omitempty"`
	Symbol     string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *GetFeePercentageRequest) Reset()         { *m = GetFeePercentageRequest{} }
func (m *GetFeePercentageRequest) String() string { return proto.CompactTextString(m) }
func (*GetFeePercentageRequest) ProtoMessage()    {}
func (*GetFeePercentageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{19}
}
func (m *GetFeePercentageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFeePercentageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFeePercentageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFeePercentageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeePercentageRequest.Merge(m, src)
}
func (m *GetFeePercentageRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFeePercentageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeePercentageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeePercentageRequest proto.InternalMessageInfo

func (m *GetFeePercentageRequest) GetSrcChainId() uint64 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func (m *GetFeePercentageRequest) GetDstChainId() uint64 {
	if m != nil {
		return m.DstChainId
	}
	return 0
}

func (m *GetFeePercentageRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type GetFeePercentageResponse struct {
	FeePerc uint32 `protobuf:"varint,1,opt,name=fee_perc,json=feePerc,proto3" json:"fee_perc,omitempty"`
}

func (m *GetFeePercentageResponse) Reset()         { *m = GetFeePercentageResponse{} }
func (m *GetFeePercentageResponse) String() string { return proto.CompactTextString(m) }
func (*GetFeePercentageResponse) ProtoMessage()    {}
func (*GetFeePercentageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{20}
}
func (m *GetFeePercentageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFeePercentageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFeePercentageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFeePercentageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeePercentageResponse.Merge(m, src)
}
func (m *GetFeePercentageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFeePercentageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeePercentageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeePercentageResponse proto.InternalMessageInfo

func (m *GetFeePercentageResponse) GetFeePerc() uint32 {
	if m != nil {
		return m.FeePerc
	}
	return 0
}

type QueryTransferStatusRequest struct {
	TransferId []string `protobuf:"bytes,1,rep,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
}

func (m *QueryTransferStatusRequest) Reset()         { *m = QueryTransferStatusRequest{} }
func (m *QueryTransferStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTransferStatusRequest) ProtoMessage()    {}
func (*QueryTransferStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{21}
}
func (m *QueryTransferStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferStatusRequest.Merge(m, src)
}
func (m *QueryTransferStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferStatusRequest proto.InternalMessageInfo

func (m *QueryTransferStatusRequest) GetTransferId() []string {
	if m != nil {
		return m.TransferId
	}
	return nil
}

type QueryTransferStatusResponse struct {
	Status map[string]*TransferStatus `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryTransferStatusResponse) Reset()         { *m = QueryTransferStatusResponse{} }
func (m *QueryTransferStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTransferStatusResponse) ProtoMessage()    {}
func (*QueryTransferStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{22}
}
func (m *QueryTransferStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferStatusResponse.Merge(m, src)
}
func (m *QueryTransferStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferStatusResponse proto.InternalMessageInfo

func (m *QueryTransferStatusResponse) GetStatus() map[string]*TransferStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type LiquidityDetail struct {
	ChainId         uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Token           *Token `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	UsrLiquidity    string `protobuf:"bytes,3,opt,name=usr_liquidity,json=usrLiquidity,proto3" json:"usr_liquidity,omitempty"`
	UsrLpFeeEarning string `protobuf:"bytes,4,opt,name=usr_lp_fee_earning,json=usrLpFeeEarning,proto3" json:"usr_lp_fee_earning,omitempty"`
	TotalLiquidity  string `protobuf:"bytes,5,opt,name=total_liquidity,json=totalLiquidity,proto3" json:"total_liquidity,omitempty"`
}

func (m *LiquidityDetail) Reset()         { *m = LiquidityDetail{} }
func (m *LiquidityDetail) String() string { return proto.CompactTextString(m) }
func (*LiquidityDetail) ProtoMessage()    {}
func (*LiquidityDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{23}
}
func (m *LiquidityDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityDetail.Merge(m, src)
}
func (m *LiquidityDetail) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityDetail.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityDetail proto.InternalMessageInfo

func (m *LiquidityDetail) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *LiquidityDetail) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *LiquidityDetail) GetUsrLiquidity() string {
	if m != nil {
		return m.UsrLiquidity
	}
	return ""
}

func (m *LiquidityDetail) GetUsrLpFeeEarning() string {
	if m != nil {
		return m.UsrLpFeeEarning
	}
	return ""
}

func (m *LiquidityDetail) GetTotalLiquidity() string {
	if m != nil {
		return m.TotalLiquidity
	}
	return ""
}

type ChainTokenAddrPair struct {
	ChainId   uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TokenAddr string `protobuf:"bytes,2,opt,name=token_addr,json=tokenAddr,proto3" json:"token_addr,omitempty"`
}

func (m *ChainTokenAddrPair) Reset()         { *m = ChainTokenAddrPair{} }
func (m *ChainTokenAddrPair) String() string { return proto.CompactTextString(m) }
func (*ChainTokenAddrPair) ProtoMessage()    {}
func (*ChainTokenAddrPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{24}
}
func (m *ChainTokenAddrPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainTokenAddrPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainTokenAddrPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainTokenAddrPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainTokenAddrPair.Merge(m, src)
}
func (m *ChainTokenAddrPair) XXX_Size() int {
	return m.Size()
}
func (m *ChainTokenAddrPair) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainTokenAddrPair.DiscardUnknown(m)
}

var xxx_messageInfo_ChainTokenAddrPair proto.InternalMessageInfo

func (m *ChainTokenAddrPair) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ChainTokenAddrPair) GetTokenAddr() string {
	if m != nil {
		return m.TokenAddr
	}
	return ""
}

type LiquidityDetailListRequest struct {
	LpAddr     string                `protobuf:"bytes,1,opt,name=lp_addr,json=lpAddr,proto3" json:"lp_addr,omitempty"`
	ChainToken []*ChainTokenAddrPair `protobuf:"bytes,2,rep,name=chain_token,json=chainToken,proto3" json:"chain_token,omitempty"`
}

func (m *LiquidityDetailListRequest) Reset()         { *m = LiquidityDetailListRequest{} }
func (m *LiquidityDetailListRequest) String() string { return proto.CompactTextString(m) }
func (*LiquidityDetailListRequest) ProtoMessage()    {}
func (*LiquidityDetailListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{25}
}
func (m *LiquidityDetailListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityDetailListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityDetailListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityDetailListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityDetailListRequest.Merge(m, src)
}
func (m *LiquidityDetailListRequest) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityDetailListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityDetailListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityDetailListRequest proto.InternalMessageInfo

func (m *LiquidityDetailListRequest) GetLpAddr() string {
	if m != nil {
		return m.LpAddr
	}
	return ""
}

func (m *LiquidityDetailListRequest) GetChainToken() []*ChainTokenAddrPair {
	if m != nil {
		return m.ChainToken
	}
	return nil
}

type LiquidityDetailListResponse struct {
	LiquidityDetail []*LiquidityDetail `protobuf:"bytes,2,rep,name=liquidity_detail,json=liquidityDetail,proto3" json:"liquidity_detail,omitempty"`
}

func (m *LiquidityDetailListResponse) Reset()         { *m = LiquidityDetailListResponse{} }
func (m *LiquidityDetailListResponse) String() string { return proto.CompactTextString(m) }
func (*LiquidityDetailListResponse) ProtoMessage()    {}
func (*LiquidityDetailListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{26}
}
func (m *LiquidityDetailListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityDetailListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityDetailListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityDetailListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityDetailListResponse.Merge(m, src)
}
func (m *LiquidityDetailListResponse) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityDetailListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityDetailListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityDetailListResponse proto.InternalMessageInfo

func (m *LiquidityDetailListResponse) GetLiquidityDetail() []*LiquidityDetail {
	if m != nil {
		return m.LiquidityDetail
	}
	return nil
}

type QueryTotalLiquidityRequest struct {
	ChainId   uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TokenAddr string `protobuf:"bytes,2,opt,name=token_addr,json=tokenAddr,proto3" json:"token_addr,omitempty"`
}

func (m *QueryTotalLiquidityRequest) Reset()         { *m = QueryTotalLiquidityRequest{} }
func (m *QueryTotalLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLiquidityRequest) ProtoMessage()    {}
func (*QueryTotalLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{27}
}
func (m *QueryTotalLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLiquidityRequest.Merge(m, src)
}
func (m *QueryTotalLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLiquidityRequest proto.InternalMessageInfo

func (m *QueryTotalLiquidityRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryTotalLiquidityRequest) GetTokenAddr() string {
	if m != nil {
		return m.TokenAddr
	}
	return ""
}

type QueryTotalLiquidityResponse struct {
	TotalLiq string `protobuf:"bytes,1,opt,name=total_liq,json=totalLiq,proto3" json:"total_liq,omitempty"`
}

func (m *QueryTotalLiquidityResponse) Reset()         { *m = QueryTotalLiquidityResponse{} }
func (m *QueryTotalLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLiquidityResponse) ProtoMessage()    {}
func (*QueryTotalLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{28}
}
func (m *QueryTotalLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLiquidityResponse.Merge(m, src)
}
func (m *QueryTotalLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLiquidityResponse proto.InternalMessageInfo

func (m *QueryTotalLiquidityResponse) GetTotalLiq() string {
	if m != nil {
		return m.TotalLiq
	}
	return ""
}

type QueryAddLiquidityStatusRequest struct {
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	SeqNum  uint64 `protobuf:"varint,2,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
}

func (m *QueryAddLiquidityStatusRequest) Reset()         { *m = QueryAddLiquidityStatusRequest{} }
func (m *QueryAddLiquidityStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAddLiquidityStatusRequest) ProtoMessage()    {}
func (*QueryAddLiquidityStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{29}
}
func (m *QueryAddLiquidityStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddLiquidityStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddLiquidityStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddLiquidityStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddLiquidityStatusRequest.Merge(m, src)
}
func (m *QueryAddLiquidityStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddLiquidityStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddLiquidityStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddLiquidityStatusRequest proto.InternalMessageInfo

func (m *QueryAddLiquidityStatusRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryAddLiquidityStatusRequest) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

type QueryWithdrawLiquidityStatusRequest struct {
	SeqNum  uint64 `protobuf:"varint,1,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	UsrAddr string `protobuf:"bytes,2,opt,name=usr_addr,json=usrAddr,proto3" json:"usr_addr,omitempty"`
}

func (m *QueryWithdrawLiquidityStatusRequest) Reset()         { *m = QueryWithdrawLiquidityStatusRequest{} }
func (m *QueryWithdrawLiquidityStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawLiquidityStatusRequest) ProtoMessage()    {}
func (*QueryWithdrawLiquidityStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{30}
}
func (m *QueryWithdrawLiquidityStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawLiquidityStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawLiquidityStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawLiquidityStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawLiquidityStatusRequest.Merge(m, src)
}
func (m *QueryWithdrawLiquidityStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawLiquidityStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawLiquidityStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawLiquidityStatusRequest proto.InternalMessageInfo

func (m *QueryWithdrawLiquidityStatusRequest) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *QueryWithdrawLiquidityStatusRequest) GetUsrAddr() string {
	if m != nil {
		return m.UsrAddr
	}
	return ""
}

type QueryLiquidityStatusResponse struct {
	Status WithdrawStatus  `protobuf:"varint,1,opt,name=status,proto3,enum=sgn.cbridge.v1.WithdrawStatus" json:"status,omitempty"`
	Detail *WithdrawDetail `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (m *QueryLiquidityStatusResponse) Reset()         { *m = QueryLiquidityStatusResponse{} }
func (m *QueryLiquidityStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityStatusResponse) ProtoMessage()    {}
func (*QueryLiquidityStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{31}
}
func (m *QueryLiquidityStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityStatusResponse.Merge(m, src)
}
func (m *QueryLiquidityStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityStatusResponse proto.InternalMessageInfo

func (m *QueryLiquidityStatusResponse) GetStatus() WithdrawStatus {
	if m != nil {
		return m.Status
	}
	return WithdrawStatus_WD_UNKNOWN
}

func (m *QueryLiquidityStatusResponse) GetDetail() *WithdrawDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

type CheckChainTokenValidRequest struct {
	SrcChainId   uint64 `protobuf:"varint,1,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	SrcTokenAddr string `protobuf:"bytes,2,opt,name=src_token_addr,json=srcTokenAddr,proto3" json:"src_token_addr,omitempty"`
	DestChainId  uint64 `protobuf:"varint,3,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
}

func (m *CheckChainTokenValidRequest) Reset()         { *m = CheckChainTokenValidRequest{} }
func (m *CheckChainTokenValidRequest) String() string { return proto.CompactTextString(m) }
func (*CheckChainTokenValidRequest) ProtoMessage()    {}
func (*CheckChainTokenValidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{32}
}
func (m *CheckChainTokenValidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckChainTokenValidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckChainTokenValidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckChainTokenValidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckChainTokenValidRequest.Merge(m, src)
}
func (m *CheckChainTokenValidRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckChainTokenValidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckChainTokenValidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckChainTokenValidRequest proto.InternalMessageInfo

func (m *CheckChainTokenValidRequest) GetSrcChainId() uint64 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func (m *CheckChainTokenValidRequest) GetSrcTokenAddr() string {
	if m != nil {
		return m.SrcTokenAddr
	}
	return ""
}

func (m *CheckChainTokenValidRequest) GetDestChainId() uint64 {
	if m != nil {
		return m.DestChainId
	}
	return 0
}

type CheckChainTokenValidResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *CheckChainTokenValidResponse) Reset()         { *m = CheckChainTokenValidResponse{} }
func (m *CheckChainTokenValidResponse) String() string { return proto.CompactTextString(m) }
func (*CheckChainTokenValidResponse) ProtoMessage()    {}
func (*CheckChainTokenValidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{33}
}
func (m *CheckChainTokenValidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckChainTokenValidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckChainTokenValidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckChainTokenValidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckChainTokenValidResponse.Merge(m, src)
}
func (m *CheckChainTokenValidResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckChainTokenValidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckChainTokenValidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckChainTokenValidResponse proto.InternalMessageInfo

func (m *CheckChainTokenValidResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type TransferStatus struct {
	GatewayStatus TransferHistoryStatus `protobuf:"varint,1,opt,name=gateway_status,json=gatewayStatus,proto3,enum=sgn.cbridge.v1.TransferHistoryStatus" json:"gateway_status,omitempty"`
	SgnStatus     XferStatus            `protobuf:"varint,2,opt,name=sgn_status,json=sgnStatus,proto3,enum=sgn.cbridge.v1.XferStatus" json:"sgn_status,omitempty"`
}

func (m *TransferStatus) Reset()         { *m = TransferStatus{} }
func (m *TransferStatus) String() string { return proto.CompactTextString(m) }
func (*TransferStatus) ProtoMessage()    {}
func (*TransferStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{34}
}
func (m *TransferStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferStatus.Merge(m, src)
}
func (m *TransferStatus) XXX_Size() int {
	return m.Size()
}
func (m *TransferStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TransferStatus proto.InternalMessageInfo

func (m *TransferStatus) GetGatewayStatus() TransferHistoryStatus {
	if m != nil {
		return m.GatewayStatus
	}
	return TransferHistoryStatus_TRANSFER_UNKNOWN
}

func (m *TransferStatus) GetSgnStatus() XferStatus {
	if m != nil {
		return m.SgnStatus
	}
	return XferStatus_UNKNOWN
}

type Token struct {
	Symbol       string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address      string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Decimal      int32  `protobuf:"varint,3,opt,name=decimal,proto3" json:"decimal,omitempty"`
	XferDisabled bool   `protobuf:"varint,4,opt,name=xfer_disabled,json=xferDisabled,proto3" json:"xfer_disabled,omitempty"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff091f26d628673, []int{35}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Token) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Token) GetDecimal() int32 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

func (m *Token) GetXferDisabled() bool {
	if m != nil {
		return m.XferDisabled
	}
	return false
}

func init() {
	proto.RegisterEnum("sgn.cbridge.v1.WithdrawStatus", WithdrawStatus_name, WithdrawStatus_value)
	proto.RegisterEnum("sgn.cbridge.v1.TransferHistoryStatus", TransferHistoryStatus_name, TransferHistoryStatus_value)
	proto.RegisterType((*EmptyRequest)(nil), "sgn.cbridge.v1.EmptyRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "sgn.cbridge.v1.QueryParamsResponse")
	proto.RegisterType((*QueryConfigResponse)(nil), "sgn.cbridge.v1.QueryConfigResponse")
	proto.RegisterType((*QueryRelayRequest)(nil), "sgn.cbridge.v1.QueryRelayRequest")
	proto.RegisterType((*QueryRelayResponse)(nil), "sgn.cbridge.v1.QueryRelayResponse")
	proto.RegisterType((*QueryChainSignersRequest)(nil), "sgn.cbridge.v1.QueryChainSignersRequest")
	proto.RegisterType((*QueryChainSignersResponse)(nil), "sgn.cbridge.v1.QueryChainSignersResponse")
	proto.RegisterType((*QueryLatestSignersResponse)(nil), "sgn.cbridge.v1.QueryLatestSignersResponse")
	proto.RegisterType((*QueryDebugAnyRequest)(nil), "sgn.cbridge.v1.QueryDebugAnyRequest")
	proto.RegisterType((*QueryDebugAnyResponse)(nil), "sgn.cbridge.v1.QueryDebugAnyResponse")
	proto.RegisterType((*QueryLPsRequest)(nil), "sgn.cbridge.v1.QueryLPsRequest")
	proto.RegisterType((*QueryLPsResponse)(nil), "sgn.cbridge.v1.QueryLPsResponse")
	proto.RegisterType((*CheckLiqSumRequest)(nil), "sgn.cbridge.v1.CheckLiqSumRequest")
	proto.RegisterType((*CheckLiqSumResponse)(nil), "sgn.cbridge.v1.CheckLiqSumResponse")
	proto.RegisterType((*ChainTokensConfigRequest)(nil), "sgn.cbridge.v1.ChainTokensConfigRequest")
	proto.RegisterType((*ChainTokensConfigResponse)(nil), "sgn.cbridge.v1.ChainTokensConfigResponse")
	proto.RegisterMapType((map[string]*Tokens)(nil), "sgn.cbridge.v1.ChainTokensConfigResponse.ChainTokensEntry")
	proto.RegisterType((*Tokens)(nil), "sgn.cbridge.v1.Tokens")
	proto.RegisterType((*GetFeeRequest)(nil), "sgn.cbridge.v1.GetFeeRequest")
	proto.RegisterType((*GetFeeResponse)(nil), "sgn.cbridge.v1.GetFeeResponse")
	proto.RegisterType((*GetFeePercentageRequest)(nil), "sgn.cbridge.v1.GetFeePercentageRequest")
	proto.RegisterType((*GetFeePercentageResponse)(nil), "sgn.cbridge.v1.GetFeePercentageResponse")
	proto.RegisterType((*QueryTransferStatusRequest)(nil), "sgn.cbridge.v1.QueryTransferStatusRequest")
	proto.RegisterType((*QueryTransferStatusResponse)(nil), "sgn.cbridge.v1.QueryTransferStatusResponse")
	proto.RegisterMapType((map[string]*TransferStatus)(nil), "sgn.cbridge.v1.QueryTransferStatusResponse.StatusEntry")
	proto.RegisterType((*LiquidityDetail)(nil), "sgn.cbridge.v1.LiquidityDetail")
	proto.RegisterType((*ChainTokenAddrPair)(nil), "sgn.cbridge.v1.ChainTokenAddrPair")
	proto.RegisterType((*LiquidityDetailListRequest)(nil), "sgn.cbridge.v1.LiquidityDetailListRequest")
	proto.RegisterType((*LiquidityDetailListResponse)(nil), "sgn.cbridge.v1.LiquidityDetailListResponse")
	proto.RegisterType((*QueryTotalLiquidityRequest)(nil), "sgn.cbridge.v1.QueryTotalLiquidityRequest")
	proto.RegisterType((*QueryTotalLiquidityResponse)(nil), "sgn.cbridge.v1.QueryTotalLiquidityResponse")
	proto.RegisterType((*QueryAddLiquidityStatusRequest)(nil), "sgn.cbridge.v1.QueryAddLiquidityStatusRequest")
	proto.RegisterType((*QueryWithdrawLiquidityStatusRequest)(nil), "sgn.cbridge.v1.QueryWithdrawLiquidityStatusRequest")
	proto.RegisterType((*QueryLiquidityStatusResponse)(nil), "sgn.cbridge.v1.QueryLiquidityStatusResponse")
	proto.RegisterType((*CheckChainTokenValidRequest)(nil), "sgn.cbridge.v1.CheckChainTokenValidRequest")
	proto.RegisterType((*CheckChainTokenValidResponse)(nil), "sgn.cbridge.v1.CheckChainTokenValidResponse")
	proto.RegisterType((*TransferStatus)(nil), "sgn.cbridge.v1.TransferStatus")
	proto.RegisterType((*Token)(nil), "sgn.cbridge.v1.Token")
}

func init() { proto.RegisterFile("sgn/cbridge/v1/query.proto", fileDescriptor_5ff091f26d628673) }

var fileDescriptor_5ff091f26d628673 = []byte{
	// 1949 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4b, 0x73, 0xdb, 0xc8,
	0x11, 0x26, 0xf4, 0x20, 0xc5, 0xa6, 0x48, 0xc1, 0xe3, 0x87, 0x24, 0xca, 0x4b, 0x69, 0xc7, 0x76,
	0xad, 0xd6, 0xb2, 0xa5, 0x5a, 0xef, 0x26, 0xbb, 0x71, 0x55, 0x0e, 0xb4, 0x08, 0x39, 0xcc, 0xd2,
	0xa4, 0x16, 0xa2, 0xac, 0x38, 0xa9, 0x2c, 0x02, 0x12, 0x23, 0x1a, 0x11, 0x09, 0x92, 0x18, 0xd0,
	0x16, 0x53, 0x95, 0x53, 0x4e, 0x39, 0x24, 0x95, 0xaa, 0x9c, 0x72, 0xcf, 0x8f, 0x49, 0x6e, 0x5b,
	0x49, 0x0e, 0x39, 0xa6, 0xec, 0x5f, 0x91, 0x5b, 0x6a, 0x1e, 0x80, 0xf0, 0xa2, 0x2c, 0xc7, 0x7b,
	0xc3, 0xf4, 0x74, 0x7f, 0xdd, 0xd3, 0xd3, 0xdd, 0xe8, 0x1e, 0x28, 0xd3, 0x9e, 0xb3, 0xd7, 0xed,
	0xb8, 0xb6, 0xd5, 0x23, 0x7b, 0xaf, 0x3e, 0xdb, 0x1b, 0x4f, 0x88, 0x3b, 0xdd, 0x1d, 0xb9, 0x43,
	0x6f, 0x88, 0x4a, 0xb4, 0xe7, 0xec, 0xca, 0xbd, 0xdd, 0x57, 0x9f, 0x95, 0x6f, 0xc7, 0x78, 0xfd,
	0x2d, 0xce, 0x8d, 0x4b, 0xb0, 0xac, 0x0d, 0x46, 0xde, 0x54, 0x27, 0xe3, 0x09, 0xa1, 0x1e, 0xd6,
	0xe0, 0xfa, 0x37, 0x0c, 0xec, 0xd0, 0x74, 0xcd, 0x01, 0xd5, 0x09, 0x1d, 0x0d, 0x1d, 0x4a, 0xd0,
	0x2e, 0x64, 0x47, 0x9c, 0xb2, 0xa6, 0x6c, 0x29, 0xdb, 0x85, 0x47, 0xb7, 0x76, 0xa3, 0x5a, 0x76,
	0x25, 0xbf, 0xe4, 0xc2, 0x4d, 0x09, 0xb3, 0x3f, 0x74, 0x4e, 0xed, 0x5e, 0x00, 0xf3, 0x25, 0xe4,
	0xbb, 0x1d, 0x57, 0x10, 0x25, 0xd2, 0x7a, 0x1c, 0x69, 0xdf, 0x67, 0xd0, 0x2f, 0x78, 0xf1, 0x03,
	0xb8, 0xc6, 0xf1, 0x74, 0xd2, 0x37, 0x7d, 0x5b, 0xd1, 0x2a, 0xe4, 0xce, 0x5d, 0x72, 0x6a, 0xd8,
	0x16, 0xc7, 0x5a, 0xd6, 0xb3, 0x6c, 0x59, 0xb7, 0x70, 0x13, 0x50, 0x98, 0x5b, 0x2a, 0xff, 0x0a,
	0xe0, 0xfc, 0x94, 0xb8, 0x86, 0xcb, 0xa8, 0xb3, 0xb4, 0xff, 0xec, 0x94, 0xb8, 0x42, 0x2c, 0x7f,
	0xee, 0x7f, 0xe2, 0x1f, 0xc0, 0x9a, 0x38, 0xcd, 0x4b, 0xd3, 0x76, 0x8e, 0xec, 0x9e, 0x43, 0x5c,
	0xea, 0x1b, 0xb1, 0x0e, 0x4b, 0x5d, 0x46, 0xf6, 0xad, 0x58, 0xd0, 0x73, 0x7c, 0x5d, 0xb7, 0xf0,
	0xb7, 0xb0, 0x9e, 0x22, 0x26, 0xad, 0xa9, 0x42, 0x51, 0xc8, 0x51, 0xb1, 0x21, 0x0d, 0xba, 0x9d,
	0x70, 0x47, 0x58, 0x78, 0xb9, 0x1b, 0x5a, 0xe1, 0x0e, 0x94, 0x39, 0x7e, 0xc3, 0xf4, 0x08, 0xf5,
	0xe2, 0x0a, 0x6a, 0x50, 0xea, 0xf3, 0x8d, 0x98, 0x86, 0x8f, 0xe2, 0x1a, 0xa2, 0xe2, 0xc5, 0x7e,
	0x78, 0x89, 0xb7, 0xe1, 0x06, 0xd7, 0x51, 0x23, 0x9d, 0x49, 0xaf, 0xea, 0x04, 0xbe, 0x57, 0x61,
	0xfe, 0x8c, 0x4c, 0xa5, 0xdf, 0xd9, 0x27, 0xde, 0x81, 0x9b, 0x31, 0x4e, 0x69, 0x08, 0x82, 0x05,
	0xcb, 0xf4, 0x4c, 0xc9, 0xcb, 0xbf, 0xf1, 0xd7, 0xb0, 0x22, 0x4c, 0x3f, 0xbc, 0x82, 0x23, 0xd1,
	0x47, 0x00, 0xde, 0xf0, 0x8c, 0x38, 0x86, 0x69, 0x59, 0xee, 0xda, 0xdc, 0x96, 0xb2, 0x9d, 0xd7,
	0xf3, 0x9c, 0x52, 0xb5, 0x2c, 0x17, 0xdf, 0x05, 0xf5, 0x02, 0x4c, 0x2a, 0x55, 0x61, 0xbe, 0x3f,
	0x62, 0x47, 0x9e, 0xdf, 0xce, 0xeb, 0xec, 0x93, 0x05, 0xc5, 0xfe, 0x4b, 0xd2, 0x3d, 0x6b, 0xd8,
	0xe3, 0xa3, 0xc9, 0xe0, 0xc3, 0xb5, 0x3e, 0x85, 0xeb, 0x11, 0x3c, 0xa9, 0xf8, 0x16, 0x64, 0xfb,
	0xf6, 0x98, 0x4e, 0x06, 0x1c, 0x2e, 0xaf, 0xcb, 0x15, 0x5a, 0x83, 0x1c, 0x9d, 0x0c, 0x6c, 0x8f,
	0xf8, 0x50, 0xfe, 0x12, 0x97, 0x61, 0x8d, 0x5f, 0x72, 0x9b, 0x41, 0x53, 0x3f, 0x63, 0x44, 0x3a,
	0xfe, 0x43, 0x81, 0xf5, 0x94, 0x4d, 0xa9, 0xeb, 0x97, 0x20, 0x02, 0xc2, 0xe0, 0x56, 0xd1, 0xb5,
	0xb9, 0xad, 0xf9, 0xed, 0xc2, 0xa3, 0xc7, 0xa9, 0x21, 0x94, 0x06, 0x10, 0xde, 0xd1, 0x1c, 0xcf,
	0x9d, 0xea, 0x85, 0xee, 0x05, 0xa5, 0xfc, 0x1c, 0xd4, 0x38, 0x43, 0xf8, 0xde, 0xf3, 0xfc, 0xde,
	0xd1, 0x03, 0x58, 0x7c, 0x65, 0xf6, 0x27, 0x84, 0x1f, 0x2b, 0xa5, 0x32, 0x08, 0x69, 0x5d, 0x30,
	0x3d, 0x9e, 0xfb, 0x4a, 0xc1, 0xbf, 0x85, 0xac, 0x20, 0xa2, 0x87, 0x90, 0x95, 0xa6, 0x2b, 0xdc,
	0xf4, 0x9b, 0xa9, 0xc2, 0xba, 0x64, 0x42, 0x77, 0xa0, 0xd8, 0x1d, 0x3a, 0x9e, 0x6b, 0x76, 0xbd,
	0xf0, 0xa5, 0x2c, 0xfb, 0x44, 0x76, 0x2f, 0x68, 0x13, 0x0a, 0x9d, 0xfe, 0xb0, 0x7b, 0x66, 0x58,
	0x3c, 0xcf, 0xe7, 0xb7, 0x94, 0xed, 0xa2, 0x0e, 0x9c, 0x54, 0xe3, 0xd9, 0xfc, 0x57, 0x05, 0x8a,
	0x4f, 0x89, 0x77, 0x40, 0x88, 0x1f, 0x04, 0x5b, 0xb0, 0x4c, 0xdd, 0xae, 0x11, 0x0b, 0x04, 0xa0,
	0x6e, 0x77, 0x5f, 0xc6, 0xc2, 0x16, 0x2c, 0x5b, 0xd4, 0xbb, 0xe0, 0x98, 0x13, 0x1c, 0x16, 0xf5,
	0x7c, 0x8e, 0xbb, 0x50, 0x62, 0x18, 0xa1, 0x88, 0x99, 0x17, 0xc6, 0x51, 0xb7, 0xdb, 0xf6, 0x83,
	0x86, 0xb9, 0xcf, 0x1c, 0x78, 0x6b, 0x0b, 0xc2, 0x7d, 0xe6, 0x80, 0x17, 0xb1, 0xfe, 0x48, 0x08,
	0x2c, 0xca, 0x80, 0x19, 0xf1, 0xf8, 0xfa, 0x83, 0x02, 0x25, 0xdf, 0x4c, 0x79, 0xdf, 0x3b, 0x80,
	0xc8, 0xd8, 0xe0, 0x8e, 0xf4, 0x15, 0x0d, 0x3c, 0xe9, 0x84, 0x15, 0x32, 0x7e, 0xce, 0x36, 0x84,
	0xae, 0x01, 0x8f, 0xec, 0x11, 0x71, 0xbb, 0xc6, 0x29, 0x21, 0xd2, 0x94, 0x1c, 0x5b, 0x1f, 0x10,
	0xc2, 0xb6, 0x3a, 0x26, 0x25, 0x7c, 0x4b, 0x28, 0xcd, 0xb1, 0x35, 0xdb, 0x5a, 0x83, 0x9c, 0x45,
	0xba, 0xf6, 0xc0, 0xec, 0x73, 0x23, 0x17, 0x74, 0x7f, 0x89, 0x27, 0xb0, 0x2a, 0xcc, 0x39, 0x24,
	0x6e, 0x97, 0x38, 0x9e, 0xd9, 0xfb, 0x5e, 0xfd, 0x77, 0x0b, 0xb2, 0x74, 0x3a, 0xe8, 0x0c, 0xfb,
	0xd2, 0x58, 0xb9, 0x62, 0xb5, 0x37, 0xa9, 0x56, 0xfa, 0x63, 0x1d, 0x96, 0x4e, 0x09, 0x31, 0xd8,
	0xb1, 0xb8, 0xce, 0xa2, 0x9e, 0x3b, 0x15, 0x8c, 0xf8, 0xc7, 0xb2, 0x36, 0xb6, 0x5d, 0xd3, 0xa1,
	0xa7, 0xc4, 0x3d, 0xf2, 0x4c, 0x6f, 0x12, 0xd4, 0x9a, 0x4d, 0x28, 0x78, 0x72, 0x43, 0xd8, 0xcb,
	0xaa, 0x04, 0xf8, 0xa4, 0xba, 0x85, 0xff, 0xae, 0xc0, 0x46, 0xaa, 0xbc, 0xd4, 0xdc, 0x82, 0x2c,
	0xe5, 0x14, 0x99, 0x73, 0x5f, 0xc6, 0x03, 0xf7, 0x12, 0xe1, 0x5d, 0xb1, 0x14, 0x09, 0x27, 0x61,
	0xca, 0x2f, 0xa0, 0x10, 0x22, 0xa7, 0xa4, 0xd9, 0x17, 0xd1, 0x34, 0xab, 0x24, 0x32, 0x25, 0xaa,
	0x2b, 0x94, 0x6e, 0xff, 0x52, 0x60, 0xa5, 0x61, 0x8f, 0x27, 0xb6, 0x65, 0x7b, 0xd3, 0x1a, 0xf1,
	0x4c, 0xbb, 0x7f, 0x59, 0xd9, 0xdb, 0x81, 0x45, 0x1e, 0x5b, 0x52, 0xd1, 0x8c, 0x94, 0x14, 0x3c,
	0x2c, 0x23, 0x27, 0xd4, 0x35, 0xfa, 0x3e, 0xbc, 0x1f, 0xf4, 0x13, 0xea, 0x06, 0x2a, 0x59, 0xd8,
	0x72, 0xa6, 0x11, 0x0b, 0x38, 0x83, 0x98, 0xae, 0x63, 0x3b, 0x3d, 0x99, 0x03, 0x2b, 0x8c, 0x73,
	0x74, 0x40, 0x88, 0x26, 0xc8, 0xe8, 0x13, 0x58, 0xf1, 0x86, 0x9e, 0xd9, 0x0f, 0x61, 0x8a, 0x10,
	0x2d, 0x71, 0x72, 0x80, 0x2a, 0xea, 0xb9, 0x5f, 0x9d, 0x58, 0xc6, 0x1c, 0x9a, 0xb6, 0xfb, 0x01,
	0xf5, 0xfc, 0x37, 0x50, 0x8e, 0x79, 0xa9, 0x61, 0x53, 0x2f, 0xd4, 0x6b, 0xf8, 0x69, 0xaa, 0x84,
	0xd3, 0x14, 0xed, 0x43, 0x21, 0x54, 0x83, 0x65, 0x38, 0xe0, 0xd9, 0x25, 0xd8, 0xb7, 0x54, 0x87,
	0x8b, 0x52, 0x8b, 0x6d, 0xd8, 0x48, 0xd5, 0x2d, 0xa3, 0xed, 0xa7, 0xa0, 0x06, 0xde, 0x30, 0x2c,
	0xbe, 0x2f, 0x15, 0x6d, 0x26, 0x7e, 0xe6, 0x51, 0x18, 0x7d, 0xa5, 0x1f, 0x25, 0xe0, 0xe7, 0x7e,
	0x62, 0x44, 0xbc, 0xf9, 0xe1, 0xbf, 0xc3, 0xc7, 0x7e, 0xc2, 0xc4, 0x70, 0xe5, 0x11, 0x36, 0x20,
	0x1f, 0x5c, 0xab, 0xf4, 0xe0, 0x92, 0x7f, 0xa1, 0xb8, 0x0d, 0x15, 0x2e, 0x5b, 0xb5, 0xac, 0x40,
	0x32, 0x9a, 0xb0, 0x97, 0xd8, 0xb5, 0x0a, 0x39, 0x4a, 0xc6, 0x86, 0x33, 0x19, 0xc8, 0xaa, 0x92,
	0xa5, 0x64, 0xdc, 0x9c, 0x0c, 0xf0, 0x0b, 0xb8, 0xc3, 0x51, 0x4f, 0x6c, 0xef, 0xa5, 0xe5, 0x9a,
	0xaf, 0x67, 0x40, 0x87, 0xe4, 0x95, 0xb0, 0x3c, 0xd3, 0xc9, 0xc2, 0x36, 0x74, 0xdc, 0xdc, 0x84,
	0xba, 0xfc, 0xb0, 0x7f, 0x54, 0xe0, 0xb6, 0x68, 0x39, 0xe2, 0x98, 0xf2, 0xb8, 0x3f, 0x0c, 0xea,
	0x03, 0xc3, 0x2c, 0x25, 0xd3, 0xd5, 0x37, 0x4a, 0xca, 0x49, 0x6e, 0x26, 0x17, 0xdc, 0x6f, 0x6a,
	0x9a, 0xfb, 0x72, 0xf2, 0x7a, 0x25, 0x37, 0xfe, 0xbd, 0x02, 0x1b, 0xbc, 0x1b, 0xb9, 0x08, 0xb4,
	0xe7, 0x66, 0xdf, 0xb6, 0xae, 0x5e, 0xa1, 0x93, 0xff, 0xaf, 0xb9, 0x94, 0xff, 0x17, 0x86, 0xa2,
	0x45, 0xc2, 0x85, 0x7c, 0x9e, 0x03, 0x15, 0x18, 0x51, 0x22, 0xe1, 0x2f, 0xe0, 0x76, 0xba, 0x29,
	0xd2, 0x37, 0x37, 0x78, 0x25, 0x93, 0x46, 0x2c, 0xe9, 0x62, 0x81, 0xff, 0xa2, 0x40, 0x29, 0x5a,
	0xc3, 0x50, 0x03, 0x4a, 0x3d, 0xd3, 0x23, 0xaf, 0xcd, 0xa9, 0x11, 0x71, 0xe6, 0xbd, 0x59, 0xb5,
	0xef, 0x27, 0x36, 0xf5, 0x86, 0xae, 0x7f, 0x17, 0x45, 0x29, 0x2c, 0xd1, 0x7e, 0x04, 0x40, 0x7b,
	0x8e, 0x11, 0x94, 0x6d, 0x86, 0x54, 0x4e, 0x6b, 0xff, 0xa5, 0x78, 0x9e, 0xf6, 0x1c, 0xf1, 0x89,
	0xcf, 0x61, 0x91, 0x9f, 0x23, 0xf4, 0x93, 0x52, 0xc2, 0x3f, 0x29, 0xf6, 0xd7, 0x64, 0x2e, 0x23,
	0x94, 0xfa, 0x91, 0x22, 0x97, 0xe1, 0xff, 0x29, 0x73, 0xd5, 0x62, 0xf0, 0x3f, 0x65, 0xa5, 0x93,
	0x8f, 0x23, 0x96, 0x4d, 0xcd, 0x4e, 0x9f, 0x58, 0xbc, 0x20, 0x2e, 0xe9, 0xcb, 0x8c, 0x58, 0x93,
	0xb4, 0xfb, 0x7f, 0x56, 0xa0, 0x14, 0x0d, 0x15, 0x54, 0x02, 0x38, 0xa9, 0x19, 0xc7, 0xcd, 0xaf,
	0x9b, 0xad, 0x93, 0xa6, 0x9a, 0x41, 0xb7, 0x00, 0x9d, 0xd4, 0x8c, 0x93, 0x6a, 0xbd, 0x5d, 0x6f,
	0x3e, 0x35, 0x0e, 0x5a, 0xba, 0x71, 0xf4, 0xb4, 0xa9, 0x2a, 0xe8, 0x26, 0x5c, 0x8b, 0xd1, 0x1b,
	0x87, 0xea, 0x1c, 0xba, 0x06, 0xc5, 0x93, 0x9a, 0x71, 0x74, 0xfc, 0xe4, 0x59, 0xbd, 0xcd, 0x76,
	0xd4, 0x79, 0xa4, 0xc2, 0xf2, 0x49, 0xcd, 0xd8, 0x6f, 0x3d, 0x3b, 0x6c, 0x68, 0x6d, 0xad, 0xa6,
	0x2e, 0xa0, 0x22, 0xe4, 0x4f, 0x6a, 0xc6, 0x41, 0xb5, 0xde, 0xd0, 0x6a, 0xea, 0xa2, 0x54, 0x59,
	0xd3, 0x1a, 0xd5, 0x17, 0x5a, 0x4d, 0xcd, 0xde, 0xff, 0xef, 0x1c, 0xdc, 0x4c, 0xf5, 0x39, 0xba,
	0x01, 0x6a, 0x5b, 0xaf, 0x36, 0x8f, 0x0e, 0x34, 0x3d, 0x64, 0xe2, 0x2a, 0x5c, 0x0f, 0xa8, 0x21,
	0xcd, 0x0a, 0xba, 0x0e, 0x2b, 0xc1, 0x86, 0xd4, 0x36, 0x87, 0x3e, 0x85, 0x7b, 0x01, 0x31, 0x76,
	0x2c, 0x63, 0xbf, 0xd5, 0x3c, 0xa8, 0xeb, 0xcf, 0xaa, 0xed, 0x7a, 0xab, 0xa9, 0xce, 0xa3, 0x7b,
	0xf0, 0x71, 0x2a, 0xeb, 0xc1, 0x71, 0xb3, 0x66, 0xe8, 0x5a, 0x43, 0xab, 0x1e, 0x69, 0xea, 0x02,
	0x73, 0x51, 0xc0, 0x76, 0x71, 0xcc, 0x45, 0xb4, 0x01, 0xab, 0x01, 0xbd, 0xdd, 0x32, 0x9e, 0x68,
	0x86, 0xae, 0x31, 0x51, 0x76, 0x48, 0x54, 0x81, 0x72, 0xb0, 0xa9, 0x6b, 0xdf, 0x1c, 0x6b, 0x47,
	0x1c, 0x5e, 0x70, 0xa8, 0x39, 0x74, 0x07, 0x36, 0x43, 0xfb, 0x5c, 0xa3, 0xc0, 0x90, 0x36, 0x6a,
	0x35, 0x75, 0x29, 0xc2, 0x24, 0xe9, 0x0c, 0xe4, 0x45, 0xeb, 0xd8, 0x17, 0x52, 0xf3, 0xec, 0xa6,
	0x62, 0x48, 0x5a, 0x4d, 0x85, 0x88, 0x2f, 0x7d, 0xdf, 0x17, 0x1e, 0xfd, 0xb3, 0x08, 0x8b, 0xbc,
	0xf4, 0x20, 0x1d, 0x0a, 0xa1, 0x51, 0x1d, 0x25, 0x26, 0xc7, 0xf0, 0x5c, 0x5f, 0xbe, 0x93, 0xda,
	0xa0, 0x44, 0xa7, 0x7c, 0x9c, 0x09, 0x30, 0xc5, 0x9c, 0xf0, 0x7f, 0x61, 0x46, 0x47, 0x0c, 0x9c,
	0x41, 0xc7, 0x00, 0x17, 0xd3, 0x38, 0xfa, 0x38, 0x55, 0x28, 0x3c, 0xd7, 0x97, 0xf1, 0x65, 0x2c,
	0x01, 0xec, 0xaf, 0xe5, 0x93, 0x40, 0x78, 0x40, 0x46, 0xdb, 0xe9, 0x26, 0x25, 0xe7, 0xf6, 0xf2,
	0xa7, 0x57, 0xe0, 0x0c, 0x74, 0xfd, 0x4a, 0x3e, 0x28, 0x44, 0x46, 0xe5, 0x77, 0x78, 0xe7, 0x7e,
	0xaa, 0x82, 0xd4, 0x59, 0x1d, 0x67, 0xd0, 0x79, 0xf0, 0x56, 0x90, 0xac, 0x9c, 0x68, 0x27, 0xd9,
	0x4e, 0xcc, 0x2c, 0xf5, 0xe5, 0x07, 0x57, 0x63, 0x0e, 0x34, 0xff, 0x02, 0x4a, 0x52, 0xb3, 0x1c,
	0x65, 0x11, 0x4e, 0x45, 0x88, 0xcc, 0xcd, 0xc9, 0xbb, 0x4f, 0x99, 0x85, 0x71, 0x06, 0x7d, 0x0b,
	0xc5, 0xc8, 0xa3, 0x00, 0xba, 0x9b, 0xea, 0x95, 0xd8, 0xeb, 0x42, 0xf9, 0xde, 0x3b, 0xb8, 0xc2,
	0x41, 0x90, 0x98, 0x6e, 0x93, 0x41, 0x30, 0x6b, 0xbc, 0x4e, 0x06, 0xc1, 0xcc, 0x51, 0x19, 0x67,
	0x50, 0x1d, 0xb2, 0x62, 0x12, 0x41, 0x89, 0x27, 0x94, 0xc8, 0x38, 0x59, 0xae, 0xcc, 0xda, 0x0e,
	0xa0, 0x7a, 0xa0, 0xc6, 0x87, 0x1a, 0xf4, 0x49, 0xba, 0x54, 0x62, 0xda, 0x2a, 0x6f, 0xbf, 0x9b,
	0x31, 0x50, 0x34, 0x92, 0xef, 0x70, 0xb1, 0x3f, 0xeb, 0xfd, 0x2b, 0x8d, 0x2b, 0x42, 0xdd, 0xce,
	0x7b, 0x8c, 0x36, 0x42, 0x63, 0x4a, 0x2b, 0x9b, 0xd4, 0x38, 0xbb, 0xd7, 0x4e, 0x6a, 0xbc, 0xa4,
	0x37, 0x0e, 0x9f, 0x31, 0xd2, 0x79, 0xce, 0x3a, 0x63, 0x5a, 0xdb, 0x3b, 0xeb, 0x8c, 0xa9, 0xad,
	0x2c, 0xce, 0xa0, 0x29, 0xac, 0xce, 0xe8, 0x57, 0xd1, 0x6e, 0x2a, 0xd2, 0xcc, 0xc6, 0x36, 0x99,
	0xad, 0x97, 0xb5, 0x95, 0x38, 0x83, 0x7e, 0xe7, 0x77, 0x9e, 0x33, 0xba, 0x5a, 0xf4, 0x79, 0x2a,
	0xe0, 0xe5, 0x3d, 0xf0, 0x7b, 0x5b, 0xd1, 0x82, 0x25, 0xff, 0xc5, 0x0d, 0x6d, 0xa6, 0xcb, 0x06,
	0x0f, 0x7b, 0xe5, 0xad, 0xd9, 0x0c, 0x3e, 0xe0, 0x93, 0xfa, 0xdf, 0xde, 0x54, 0x94, 0xef, 0xde,
	0x54, 0x94, 0xff, 0xbc, 0xa9, 0x28, 0x7f, 0x7a, 0x5b, 0xc9, 0x7c, 0xf7, 0xb6, 0x92, 0xf9, 0xf7,
	0xdb, 0x4a, 0xe6, 0xe7, 0x7b, 0x3d, 0xdb, 0x7b, 0x39, 0xe9, 0xec, 0x76, 0x87, 0x83, 0xbd, 0x2e,
	0xe9, 0x13, 0xf7, 0xa1, 0x43, 0xbc, 0xd7, 0x43, 0xf7, 0x6c, 0x8f, 0xf6, 0x9c, 0x87, 0xaf, 0x1e,
	0xed, 0x9d, 0x07, 0x8f, 0xdb, 0xde, 0x74, 0x44, 0x68, 0x27, 0xcb, 0x1f, 0xb6, 0x3f, 0xff, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x98, 0xaf, 0xb7, 0x5a, 0x24, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryParams(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryConfig(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryConfigResponse, error)
	QueryRelay(ctx context.Context, in *QueryRelayRequest, opts ...grpc.CallOption) (*QueryRelayResponse, error)
	QueryChainSigners(ctx context.Context, in *QueryChainSignersRequest, opts ...grpc.CallOption) (*QueryChainSignersResponse, error)
	QueryLatestSigners(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryLatestSignersResponse, error)
	QueryCheckChainTokenValid(ctx context.Context, in *CheckChainTokenValidRequest, opts ...grpc.CallOption) (*CheckChainTokenValidResponse, error)
	QueryChkLiqSum(ctx context.Context, in *CheckLiqSumRequest, opts ...grpc.CallOption) (*CheckLiqSumResponse, error)
	QueryDebugAny(ctx context.Context, in *QueryDebugAnyRequest, opts ...grpc.CallOption) (*QueryDebugAnyResponse, error)
	// for gateway query only below
	ChainTokensConfig(ctx context.Context, in *ChainTokensConfigRequest, opts ...grpc.CallOption) (*ChainTokensConfigResponse, error)
	GetFee(ctx context.Context, in *GetFeeRequest, opts ...grpc.CallOption) (*GetFeeResponse, error)
	// get fee percentage between 2 chains
	GetFeePercentage(ctx context.Context, in *GetFeePercentageRequest, opts ...grpc.CallOption) (*GetFeePercentageResponse, error)
	QueryTransferStatus(ctx context.Context, in *QueryTransferStatusRequest, opts ...grpc.CallOption) (*QueryTransferStatusResponse, error)
	// LP
	LiquidityDetailList(ctx context.Context, in *LiquidityDetailListRequest, opts ...grpc.CallOption) (*LiquidityDetailListResponse, error)
	QueryTotalLiquidity(ctx context.Context, in *QueryTotalLiquidityRequest, opts ...grpc.CallOption) (*QueryTotalLiquidityResponse, error)
	QueryAddLiquidityStatus(ctx context.Context, in *QueryAddLiquidityStatusRequest, opts ...grpc.CallOption) (*QueryLiquidityStatusResponse, error)
	QueryWithdrawLiquidityStatus(ctx context.Context, in *QueryWithdrawLiquidityStatusRequest, opts ...grpc.CallOption) (*QueryLiquidityStatusResponse, error)
	// for sync farming tool
	QueryLPs(ctx context.Context, in *QueryLPsRequest, opts ...grpc.CallOption) (*QueryLPsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryConfig(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryConfigResponse, error) {
	out := new(QueryConfigResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRelay(ctx context.Context, in *QueryRelayRequest, opts ...grpc.CallOption) (*QueryRelayResponse, error) {
	out := new(QueryRelayResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryChainSigners(ctx context.Context, in *QueryChainSignersRequest, opts ...grpc.CallOption) (*QueryChainSignersResponse, error) {
	out := new(QueryChainSignersResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryChainSigners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLatestSigners(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QueryLatestSignersResponse, error) {
	out := new(QueryLatestSignersResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryLatestSigners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCheckChainTokenValid(ctx context.Context, in *CheckChainTokenValidRequest, opts ...grpc.CallOption) (*CheckChainTokenValidResponse, error) {
	out := new(CheckChainTokenValidResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryCheckChainTokenValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryChkLiqSum(ctx context.Context, in *CheckLiqSumRequest, opts ...grpc.CallOption) (*CheckLiqSumResponse, error) {
	out := new(CheckLiqSumResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryChkLiqSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDebugAny(ctx context.Context, in *QueryDebugAnyRequest, opts ...grpc.CallOption) (*QueryDebugAnyResponse, error) {
	out := new(QueryDebugAnyResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryDebugAny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainTokensConfig(ctx context.Context, in *ChainTokensConfigRequest, opts ...grpc.CallOption) (*ChainTokensConfigResponse, error) {
	out := new(ChainTokensConfigResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/ChainTokensConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetFee(ctx context.Context, in *GetFeeRequest, opts ...grpc.CallOption) (*GetFeeResponse, error) {
	out := new(GetFeeResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/GetFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetFeePercentage(ctx context.Context, in *GetFeePercentageRequest, opts ...grpc.CallOption) (*GetFeePercentageResponse, error) {
	out := new(GetFeePercentageResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/GetFeePercentage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTransferStatus(ctx context.Context, in *QueryTransferStatusRequest, opts ...grpc.CallOption) (*QueryTransferStatusResponse, error) {
	out := new(QueryTransferStatusResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryTransferStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityDetailList(ctx context.Context, in *LiquidityDetailListRequest, opts ...grpc.CallOption) (*LiquidityDetailListResponse, error) {
	out := new(LiquidityDetailListResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/LiquidityDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTotalLiquidity(ctx context.Context, in *QueryTotalLiquidityRequest, opts ...grpc.CallOption) (*QueryTotalLiquidityResponse, error) {
	out := new(QueryTotalLiquidityResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryTotalLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAddLiquidityStatus(ctx context.Context, in *QueryAddLiquidityStatusRequest, opts ...grpc.CallOption) (*QueryLiquidityStatusResponse, error) {
	out := new(QueryLiquidityStatusResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryAddLiquidityStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWithdrawLiquidityStatus(ctx context.Context, in *QueryWithdrawLiquidityStatusRequest, opts ...grpc.CallOption) (*QueryLiquidityStatusResponse, error) {
	out := new(QueryLiquidityStatusResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryWithdrawLiquidityStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLPs(ctx context.Context, in *QueryLPsRequest, opts ...grpc.CallOption) (*QueryLPsResponse, error) {
	out := new(QueryLPsResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Query/QueryLPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryParams(context.Context, *EmptyRequest) (*QueryParamsResponse, error)
	QueryConfig(context.Context, *EmptyRequest) (*QueryConfigResponse, error)
	QueryRelay(context.Context, *QueryRelayRequest) (*QueryRelayResponse, error)
	QueryChainSigners(context.Context, *QueryChainSignersRequest) (*QueryChainSignersResponse, error)
	QueryLatestSigners(context.Context, *EmptyRequest) (*QueryLatestSignersResponse, error)
	QueryCheckChainTokenValid(context.Context, *CheckChainTokenValidRequest) (*CheckChainTokenValidResponse, error)
	QueryChkLiqSum(context.Context, *CheckLiqSumRequest) (*CheckLiqSumResponse, error)
	QueryDebugAny(context.Context, *QueryDebugAnyRequest) (*QueryDebugAnyResponse, error)
	// for gateway query only below
	ChainTokensConfig(context.Context, *ChainTokensConfigRequest) (*ChainTokensConfigResponse, error)
	GetFee(context.Context, *GetFeeRequest) (*GetFeeResponse, error)
	// get fee percentage between 2 chains
	GetFeePercentage(context.Context, *GetFeePercentageRequest) (*GetFeePercentageResponse, error)
	QueryTransferStatus(context.Context, *QueryTransferStatusRequest) (*QueryTransferStatusResponse, error)
	// LP
	LiquidityDetailList(context.Context, *LiquidityDetailListRequest) (*LiquidityDetailListResponse, error)
	QueryTotalLiquidity(context.Context, *QueryTotalLiquidityRequest) (*QueryTotalLiquidityResponse, error)
	QueryAddLiquidityStatus(context.Context, *QueryAddLiquidityStatusRequest) (*QueryLiquidityStatusResponse, error)
	QueryWithdrawLiquidityStatus(context.Context, *QueryWithdrawLiquidityStatusRequest) (*QueryLiquidityStatusResponse, error)
	// for sync farming tool
	QueryLPs(context.Context, *QueryLPsRequest) (*QueryLPsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *EmptyRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryConfig(ctx context.Context, req *EmptyRequest) (*QueryConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConfig not implemented")
}
func (*UnimplementedQueryServer) QueryRelay(ctx context.Context, req *QueryRelayRequest) (*QueryRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRelay not implemented")
}
func (*UnimplementedQueryServer) QueryChainSigners(ctx context.Context, req *QueryChainSignersRequest) (*QueryChainSignersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChainSigners not implemented")
}
func (*UnimplementedQueryServer) QueryLatestSigners(ctx context.Context, req *EmptyRequest) (*QueryLatestSignersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLatestSigners not implemented")
}
func (*UnimplementedQueryServer) QueryCheckChainTokenValid(ctx context.Context, req *CheckChainTokenValidRequest) (*CheckChainTokenValidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCheckChainTokenValid not implemented")
}
func (*UnimplementedQueryServer) QueryChkLiqSum(ctx context.Context, req *CheckLiqSumRequest) (*CheckLiqSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChkLiqSum not implemented")
}
func (*UnimplementedQueryServer) QueryDebugAny(ctx context.Context, req *QueryDebugAnyRequest) (*QueryDebugAnyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDebugAny not implemented")
}
func (*UnimplementedQueryServer) ChainTokensConfig(ctx context.Context, req *ChainTokensConfigRequest) (*ChainTokensConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainTokensConfig not implemented")
}
func (*UnimplementedQueryServer) GetFee(ctx context.Context, req *GetFeeRequest) (*GetFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFee not implemented")
}
func (*UnimplementedQueryServer) GetFeePercentage(ctx context.Context, req *GetFeePercentageRequest) (*GetFeePercentageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeePercentage not implemented")
}
func (*UnimplementedQueryServer) QueryTransferStatus(ctx context.Context, req *QueryTransferStatusRequest) (*QueryTransferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTransferStatus not implemented")
}
func (*UnimplementedQueryServer) LiquidityDetailList(ctx context.Context, req *LiquidityDetailListRequest) (*LiquidityDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityDetailList not implemented")
}
func (*UnimplementedQueryServer) QueryTotalLiquidity(ctx context.Context, req *QueryTotalLiquidityRequest) (*QueryTotalLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTotalLiquidity not implemented")
}
func (*UnimplementedQueryServer) QueryAddLiquidityStatus(ctx context.Context, req *QueryAddLiquidityStatusRequest) (*QueryLiquidityStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAddLiquidityStatus not implemented")
}
func (*UnimplementedQueryServer) QueryWithdrawLiquidityStatus(ctx context.Context, req *QueryWithdrawLiquidityStatusRequest) (*QueryLiquidityStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithdrawLiquidityStatus not implemented")
}
func (*UnimplementedQueryServer) QueryLPs(ctx context.Context, req *QueryLPsRequest) (*QueryLPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLPs not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryConfig(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRelay(ctx, req.(*QueryRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryChainSigners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainSignersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryChainSigners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryChainSigners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryChainSigners(ctx, req.(*QueryChainSignersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLatestSigners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLatestSigners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryLatestSigners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLatestSigners(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCheckChainTokenValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChainTokenValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCheckChainTokenValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryCheckChainTokenValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCheckChainTokenValid(ctx, req.(*CheckChainTokenValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryChkLiqSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLiqSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryChkLiqSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryChkLiqSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryChkLiqSum(ctx, req.(*CheckLiqSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDebugAny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDebugAnyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDebugAny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryDebugAny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDebugAny(ctx, req.(*QueryDebugAnyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainTokensConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainTokensConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainTokensConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/ChainTokensConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainTokensConfig(ctx, req.(*ChainTokensConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/GetFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetFee(ctx, req.(*GetFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetFeePercentage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeePercentageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetFeePercentage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/GetFeePercentage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetFeePercentage(ctx, req.(*GetFeePercentageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryTransferStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTransferStatus(ctx, req.(*QueryTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityDetailListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/LiquidityDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityDetailList(ctx, req.(*LiquidityDetailListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTotalLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTotalLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryTotalLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTotalLiquidity(ctx, req.(*QueryTotalLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAddLiquidityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddLiquidityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAddLiquidityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryAddLiquidityStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAddLiquidityStatus(ctx, req.(*QueryAddLiquidityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWithdrawLiquidityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawLiquidityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWithdrawLiquidityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryWithdrawLiquidityStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWithdrawLiquidityStatus(ctx, req.(*QueryWithdrawLiquidityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Query/QueryLPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLPs(ctx, req.(*QueryLPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgn.cbridge.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryConfig",
			Handler:    _Query_QueryConfig_Handler,
		},
		{
			MethodName: "QueryRelay",
			Handler:    _Query_QueryRelay_Handler,
		},
		{
			MethodName: "QueryChainSigners",
			Handler:    _Query_QueryChainSigners_Handler,
		},
		{
			MethodName: "QueryLatestSigners",
			Handler:    _Query_QueryLatestSigners_Handler,
		},
		{
			MethodName: "QueryCheckChainTokenValid",
			Handler:    _Query_QueryCheckChainTokenValid_Handler,
		},
		{
			MethodName: "QueryChkLiqSum",
			Handler:    _Query_QueryChkLiqSum_Handler,
		},
		{
			MethodName: "QueryDebugAny",
			Handler:    _Query_QueryDebugAny_Handler,
		},
		{
			MethodName: "ChainTokensConfig",
			Handler:    _Query_ChainTokensConfig_Handler,
		},
		{
			MethodName: "GetFee",
			Handler:    _Query_GetFee_Handler,
		},
		{
			MethodName: "GetFeePercentage",
			Handler:    _Query_GetFeePercentage_Handler,
		},
		{
			MethodName: "QueryTransferStatus",
			Handler:    _Query_QueryTransferStatus_Handler,
		},
		{
			MethodName: "LiquidityDetailList",
			Handler:    _Query_LiquidityDetailList_Handler,
		},
		{
			MethodName: "QueryTotalLiquidity",
			Handler:    _Query_QueryTotalLiquidity_Handler,
		},
		{
			MethodName: "QueryAddLiquidityStatus",
			Handler:    _Query_QueryAddLiquidityStatus_Handler,
		},
		{
			MethodName: "QueryWithdrawLiquidityStatus",
			Handler:    _Query_QueryWithdrawLiquidityStatus_Handler,
		},
		{
			MethodName: "QueryLPs",
			Handler:    _Query_QueryLPs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgn/cbridge/v1/query.proto",
}

func (m *EmptyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CbrConfig != nil {
		{
			size, err := m.CbrConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRelayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRelayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRelayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XrefId) > 0 {
		i -= len(m.XrefId)
		copy(dAtA[i:], m.XrefId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.XrefId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRelayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRelayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRelayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XferRelay != nil {
		{
			size, err := m.XferRelay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainSignersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainSignersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainSignersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainSignersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainSignersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainSignersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainSigners != nil {
		{
			size, err := m.ChainSigners.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestSignersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestSignersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestSignersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestSigners != nil {
		{
			size, err := m.LatestSigners.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDebugAnyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebugAnyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebugAnyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDebugAnyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebugAnyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebugAnyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLPsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLPsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLPsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenAddr) > 0 {
		i -= len(m.TokenAddr)
		copy(dAtA[i:], m.TokenAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLPsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLPsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLPsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lps) > 0 {
		for iNdEx := len(m.Lps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Lps[iNdEx])
			copy(dAtA[i:], m.Lps[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Lps[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CheckLiqSumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckLiqSumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckLiqSumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenAddr) > 0 {
		i -= len(m.TokenAddr)
		copy(dAtA[i:], m.TokenAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckLiqSumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckLiqSumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckLiqSumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sumiter) > 0 {
		i -= len(m.Sumiter)
		copy(dAtA[i:], m.Sumiter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sumiter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Liqsum) > 0 {
		i -= len(m.Liqsum)
		copy(dAtA[i:], m.Liqsum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Liqsum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainTokensConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainTokensConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainTokensConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChainTokensConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainTokensConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainTokensConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainTokens) > 0 {
		for k := range m.ChainTokens {
			v := m.ChainTokens[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *Tokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockDelay != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockDelay))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LpAddr) > 0 {
		i -= len(m.LpAddr)
		copy(dAtA[i:], m.LpAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LpAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amt) > 0 {
		i -= len(m.Amt)
		copy(dAtA[i:], m.Amt)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SrcTokenAddr) > 0 {
		i -= len(m.SrcTokenAddr)
		copy(dAtA[i:], m.SrcTokenAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SrcTokenAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DstChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DstChainId))
		i--
		dAtA[i] = 0x10
	}
	if m.SrcChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseFee) > 0 {
		i -= len(m.BaseFee)
		copy(dAtA[i:], m.BaseFee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseFee)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Decimal != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PercFee) > 0 {
		i -= len(m.PercFee)
		copy(dAtA[i:], m.PercFee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PercFee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EqValueTokenAmt) > 0 {
		i -= len(m.EqValueTokenAmt)
		copy(dAtA[i:], m.EqValueTokenAmt)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EqValueTokenAmt)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *GetFeePercentageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFeePercentageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFeePercentageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DstChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DstChainId))
		i--
		dAtA[i] = 0x10
	}
	if m.SrcChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetFeePercentageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFeePercentageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFeePercentageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeePerc != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FeePerc))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTransferStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransferId) > 0 {
		for iNdEx := len(m.TransferId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TransferId[iNdEx])
			copy(dAtA[i:], m.TransferId[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.TransferId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTransferStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for k := range m.Status {
			v := m.Status[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalLiquidity) > 0 {
		i -= len(m.TotalLiquidity)
		copy(dAtA[i:], m.TotalLiquidity)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalLiquidity)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UsrLpFeeEarning) > 0 {
		i -= len(m.UsrLpFeeEarning)
		copy(dAtA[i:], m.UsrLpFeeEarning)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UsrLpFeeEarning)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UsrLiquidity) > 0 {
		i -= len(m.UsrLiquidity)
		copy(dAtA[i:], m.UsrLiquidity)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UsrLiquidity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainTokenAddrPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainTokenAddrPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainTokenAddrPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenAddr) > 0 {
		i -= len(m.TokenAddr)
		copy(dAtA[i:], m.TokenAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityDetailListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityDetailListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityDetailListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainToken) > 0 {
		for iNdEx := len(m.ChainToken) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainToken[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LpAddr) > 0 {
		i -= len(m.LpAddr)
		copy(dAtA[i:], m.LpAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LpAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityDetailListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityDetailListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityDetailListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidityDetail) > 0 {
		for iNdEx := len(m.LiquidityDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityDetail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenAddr) > 0 {
		i -= len(m.TokenAddr)
		copy(dAtA[i:], m.TokenAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalLiq) > 0 {
		i -= len(m.TotalLiq)
		copy(dAtA[i:], m.TotalLiq)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalLiq)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddLiquidityStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddLiquidityStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddLiquidityStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeqNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SeqNum))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawLiquidityStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawLiquidityStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawLiquidityStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UsrAddr) > 0 {
		i -= len(m.UsrAddr)
		copy(dAtA[i:], m.UsrAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UsrAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.SeqNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SeqNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Detail != nil {
		{
			size, err := m.Detail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckChainTokenValidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChainTokenValidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckChainTokenValidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DestChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SrcTokenAddr) > 0 {
		i -= len(m.SrcTokenAddr)
		copy(dAtA[i:], m.SrcTokenAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SrcTokenAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.SrcChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckChainTokenValidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChainTokenValidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckChainTokenValidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SgnStatus != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SgnStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.GatewayStatus != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GatewayStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XferDisabled {
		i--
		if m.XferDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Decimal != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmptyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CbrConfig != nil {
		l = m.CbrConfig.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRelayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XrefId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRelayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XferRelay != nil {
		l = m.XferRelay.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainSignersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryChainSignersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainSigners != nil {
		l = m.ChainSigners.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestSignersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestSigners != nil {
		l = m.LatestSigners.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDebugAnyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDebugAnyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLPsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	l = len(m.TokenAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLPsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lps) > 0 {
		for _, s := range m.Lps {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *CheckLiqSumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	l = len(m.TokenAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CheckLiqSumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Liqsum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Sumiter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ChainTokensConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChainTokensConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainTokens) > 0 {
		for k, v := range m.ChainTokens {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Tokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockDelay != 0 {
		n += 1 + sovQuery(uint64(m.BlockDelay))
	}
	return n
}

func (m *GetFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcChainId != 0 {
		n += 1 + sovQuery(uint64(m.SrcChainId))
	}
	if m.DstChainId != 0 {
		n += 1 + sovQuery(uint64(m.DstChainId))
	}
	l = len(m.SrcTokenAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amt)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LpAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EqValueTokenAmt)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PercFee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Decimal != 0 {
		n += 1 + sovQuery(uint64(m.Decimal))
	}
	l = len(m.BaseFee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetFeePercentageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcChainId != 0 {
		n += 1 + sovQuery(uint64(m.SrcChainId))
	}
	if m.DstChainId != 0 {
		n += 1 + sovQuery(uint64(m.DstChainId))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetFeePercentageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeePerc != 0 {
		n += 1 + sovQuery(uint64(m.FeePerc))
	}
	return n
}

func (m *QueryTransferStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransferId) > 0 {
		for _, s := range m.TransferId {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTransferStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Status) > 0 {
		for k, v := range m.Status {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LiquidityDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UsrLiquidity)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UsrLpFeeEarning)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalLiquidity)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ChainTokenAddrPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	l = len(m.TokenAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *LiquidityDetailListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LpAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.ChainToken) > 0 {
		for _, e := range m.ChainToken {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *LiquidityDetailListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidityDetail) > 0 {
		for _, e := range m.LiquidityDetail {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTotalLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	l = len(m.TokenAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalLiq)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddLiquidityStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.SeqNum != 0 {
		n += 1 + sovQuery(uint64(m.SeqNum))
	}
	return n
}

func (m *QueryWithdrawLiquidityStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqNum != 0 {
		n += 1 + sovQuery(uint64(m.SeqNum))
	}
	l = len(m.UsrAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidityStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Detail != nil {
		l = m.Detail.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CheckChainTokenValidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcChainId != 0 {
		n += 1 + sovQuery(uint64(m.SrcChainId))
	}
	l = len(m.SrcTokenAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DestChainId != 0 {
		n += 1 + sovQuery(uint64(m.DestChainId))
	}
	return n
}

func (m *CheckChainTokenValidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	return n
}

func (m *TransferStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GatewayStatus != 0 {
		n += 1 + sovQuery(uint64(m.GatewayStatus))
	}
	if m.SgnStatus != 0 {
		n += 1 + sovQuery(uint64(m.SgnStatus))
	}
	return n
}

func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Decimal != 0 {
		n += 1 + sovQuery(uint64(m.Decimal))
	}
	if m.XferDisabled {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbrConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CbrConfig == nil {
				m.CbrConfig = &CbrConfig{}
			}
			if err := m.CbrConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRelayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRelayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRelayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XrefId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XrefId = append(m.XrefId[:0], dAtA[iNdEx:postIndex]...)
			if m.XrefId == nil {
				m.XrefId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRelayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRelayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRelayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XferRelay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XferRelay == nil {
				m.XferRelay = &XferRelay{}
			}
			if err := m.XferRelay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainSignersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainSignersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainSignersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainSignersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainSignersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainSignersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainSigners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainSigners == nil {
				m.ChainSigners = &ChainSigners{}
			}
			if err := m.ChainSigners.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestSignersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestSignersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestSignersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestSigners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestSigners == nil {
				m.LatestSigners = &LatestSigners{}
			}
			if err := m.LatestSigners.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebugAnyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebugAnyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebugAnyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebugAnyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebugAnyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebugAnyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLPsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLPsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLPsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLPsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLPsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLPsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lps = append(m.Lps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckLiqSumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLiqSumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLiqSumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckLiqSumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLiqSumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLiqSumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liqsum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liqsum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sumiter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sumiter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainTokensConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainTokensConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainTokensConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainTokensConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainTokensConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainTokensConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainTokens == nil {
				m.ChainTokens = make(map[string]*Tokens)
			}
			var mapkey string
			var mapvalue *Tokens
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Tokens{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ChainTokens[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &Token{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDelay", wireType)
			}
			m.BlockDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockDelay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainId", wireType)
			}
			m.DstChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTokenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTokenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EqValueTokenAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EqValueTokenAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PercFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFeePercentageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFeePercentageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFeePercentageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainId", wireType)
			}
			m.DstChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFeePercentageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFeePercentageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFeePercentageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePerc", wireType)
			}
			m.FeePerc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeePerc |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferId = append(m.TransferId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = make(map[string]*TransferStatus)
			}
			var mapkey string
			var mapvalue *TransferStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TransferStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Status[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsrLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsrLiquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsrLpFeeEarning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsrLpFeeEarning = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalLiquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainTokenAddrPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainTokenAddrPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainTokenAddrPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityDetailListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityDetailListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityDetailListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainToken = append(m.ChainToken, &ChainTokenAddrPair{})
			if err := m.ChainToken[len(m.ChainToken)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityDetailListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityDetailListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityDetailListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityDetail = append(m.LiquidityDetail, &LiquidityDetail{})
			if err := m.LiquidityDetail[len(m.LiquidityDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalLiq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddLiquidityStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddLiquidityStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddLiquidityStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNum", wireType)
			}
			m.SeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawLiquidityStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawLiquidityStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawLiquidityStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNum", wireType)
			}
			m.SeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsrAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsrAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WithdrawStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = &WithdrawDetail{}
			}
			if err := m.Detail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChainTokenValidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChainTokenValidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChainTokenValidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTokenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTokenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			m.DestChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChainTokenValidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChainTokenValidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChainTokenValidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayStatus", wireType)
			}
			m.GatewayStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatewayStatus |= TransferHistoryStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgnStatus", wireType)
			}
			m.SgnStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SgnStatus |= XferStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XferDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XferDisabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
