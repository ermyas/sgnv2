// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/cbridge/v1/cbridge.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ========== x/cbridge kv value types
// for src transfer id
type XferStatus int32

const (
	XferStatus_UNKNOWN       XferStatus = 0
	XferStatus_BAD_LIQUIDITY XferStatus = 1
	XferStatus_BAD_SLIPPAGE  XferStatus = 2
	XferStatus_OK_TO_RELAY   XferStatus = 3
	XferStatus_HAS_RELAY_SIG XferStatus = 4
	XferStatus_COMPLETED     XferStatus = 5
	// withdraw flow
	XferStatus_HAS_WITHDRAW_SIG XferStatus = 6
	XferStatus_WITHDRAW_DONE    XferStatus = 7
)

var XferStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "BAD_LIQUIDITY",
	2: "BAD_SLIPPAGE",
	3: "OK_TO_RELAY",
	4: "HAS_RELAY_SIG",
	5: "COMPLETED",
	6: "HAS_WITHDRAW_SIG",
	7: "WITHDRAW_DONE",
}

var XferStatus_value = map[string]int32{
	"UNKNOWN":          0,
	"BAD_LIQUIDITY":    1,
	"BAD_SLIPPAGE":     2,
	"OK_TO_RELAY":      3,
	"HAS_RELAY_SIG":    4,
	"COMPLETED":        5,
	"HAS_WITHDRAW_SIG": 6,
	"WITHDRAW_DONE":    7,
}

func (x XferStatus) String() string {
	return proto.EnumName(XferStatus_name, int32(x))
}

func (XferStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{0}
}

// ========== params
type Params struct {
	MultiChainAssetParam MultiChainAssetParam `protobuf:"bytes,1,opt,name=multi_chain_asset_param,json=multiChainAssetParam,proto3" json:"multi_chain_asset_param"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMultiChainAssetParam() MultiChainAssetParam {
	if m != nil {
		return m.MultiChainAssetParam
	}
	return MultiChainAssetParam{}
}

type MultiChainAssetParam struct {
	ChainAsset []ChainAsset `protobuf:"bytes,1,rep,name=chain_asset,json=chainAsset,proto3" json:"chain_asset"`
}

func (m *MultiChainAssetParam) Reset()         { *m = MultiChainAssetParam{} }
func (m *MultiChainAssetParam) String() string { return proto.CompactTextString(m) }
func (*MultiChainAssetParam) ProtoMessage()    {}
func (*MultiChainAssetParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{1}
}
func (m *MultiChainAssetParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiChainAssetParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiChainAssetParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiChainAssetParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiChainAssetParam.Merge(m, src)
}
func (m *MultiChainAssetParam) XXX_Size() int {
	return m.Size()
}
func (m *MultiChainAssetParam) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiChainAssetParam.DiscardUnknown(m)
}

var xxx_messageInfo_MultiChainAssetParam proto.InternalMessageInfo

func (m *MultiChainAssetParam) GetChainAsset() []ChainAsset {
	if m != nil {
		return m.ChainAsset
	}
	return nil
}

type ChainAsset struct {
	ChainId      uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TokenSymbol  string `protobuf:"bytes,2,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TokenAddr    string `protobuf:"bytes,3,opt,name=token_addr,json=tokenAddr,proto3" json:"token_addr,omitempty"`
	Decimal      uint64 `protobuf:"varint,4,opt,name=decimal,proto3" json:"decimal,omitempty"`
	MaxFeeAmount string `protobuf:"bytes,5,opt,name=max_fee_amount,json=maxFeeAmount,proto3" json:"max_fee_amount,omitempty"`
}

func (m *ChainAsset) Reset()         { *m = ChainAsset{} }
func (m *ChainAsset) String() string { return proto.CompactTextString(m) }
func (*ChainAsset) ProtoMessage()    {}
func (*ChainAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{2}
}
func (m *ChainAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainAsset.Merge(m, src)
}
func (m *ChainAsset) XXX_Size() int {
	return m.Size()
}
func (m *ChainAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainAsset.DiscardUnknown(m)
}

var xxx_messageInfo_ChainAsset proto.InternalMessageInfo

func (m *ChainAsset) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ChainAsset) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *ChainAsset) GetTokenAddr() string {
	if m != nil {
		return m.TokenAddr
	}
	return ""
}

func (m *ChainAsset) GetDecimal() uint64 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

func (m *ChainAsset) GetMaxFeeAmount() string {
	if m != nil {
		return m.MaxFeeAmount
	}
	return ""
}

// ========== for sync propose
// to be included in sync propose update, broadcast by syncer to tell others
// an onchain event happened. for completeness we include chainid, even though
// propose update also has it
type OnChainEvent struct {
	Chainid uint64 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Evtype  string `protobuf:"bytes,2,opt,name=evtype,proto3" json:"evtype,omitempty"`
	Elog    []byte `protobuf:"bytes,3,opt,name=elog,proto3" json:"elog,omitempty"`
}

func (m *OnChainEvent) Reset()         { *m = OnChainEvent{} }
func (m *OnChainEvent) String() string { return proto.CompactTextString(m) }
func (*OnChainEvent) ProtoMessage()    {}
func (*OnChainEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{3}
}
func (m *OnChainEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnChainEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnChainEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnChainEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnChainEvent.Merge(m, src)
}
func (m *OnChainEvent) XXX_Size() int {
	return m.Size()
}
func (m *OnChainEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_OnChainEvent.DiscardUnknown(m)
}

var xxx_messageInfo_OnChainEvent proto.InternalMessageInfo

func (m *OnChainEvent) GetChainid() uint64 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *OnChainEvent) GetEvtype() string {
	if m != nil {
		return m.Evtype
	}
	return ""
}

func (m *OnChainEvent) GetElog() []byte {
	if m != nil {
		return m.Elog
	}
	return nil
}

// ========== onchain tx data
// same proto used by solidity, serialized bytes are signed by sgn nodes then submit onchain to relay function
// x/cbridge will emit tendermint event, relayer monitor and send msg w/ its signature
type RelayOnChain struct {
	Sender        []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver      []byte `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Token         []byte `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount        []byte `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	SrcChainId    uint64 `protobuf:"varint,5,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DstChainId    uint64 `protobuf:"varint,6,opt,name=dst_chain_id,json=dstChainId,proto3" json:"dst_chain_id,omitempty"`
	SrcTransferId []byte `protobuf:"bytes,7,opt,name=src_transfer_id,json=srcTransferId,proto3" json:"src_transfer_id,omitempty"`
}

func (m *RelayOnChain) Reset()         { *m = RelayOnChain{} }
func (m *RelayOnChain) String() string { return proto.CompactTextString(m) }
func (*RelayOnChain) ProtoMessage()    {}
func (*RelayOnChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{4}
}
func (m *RelayOnChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayOnChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayOnChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayOnChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayOnChain.Merge(m, src)
}
func (m *RelayOnChain) XXX_Size() int {
	return m.Size()
}
func (m *RelayOnChain) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayOnChain.DiscardUnknown(m)
}

var xxx_messageInfo_RelayOnChain proto.InternalMessageInfo

func (m *RelayOnChain) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *RelayOnChain) GetReceiver() []byte {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *RelayOnChain) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *RelayOnChain) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *RelayOnChain) GetSrcChainId() uint64 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func (m *RelayOnChain) GetDstChainId() uint64 {
	if m != nil {
		return m.DstChainId
	}
	return 0
}

func (m *RelayOnChain) GetSrcTransferId() []byte {
	if m != nil {
		return m.SrcTransferId
	}
	return nil
}

// data when call withdraw onchain
type WithdrawOnchain struct {
	Chainid  uint64 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Seqnum   uint64 `protobuf:"varint,2,opt,name=seqnum,proto3" json:"seqnum,omitempty"`
	Receiver []byte `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Token    []byte `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Amount   []byte `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *WithdrawOnchain) Reset()         { *m = WithdrawOnchain{} }
func (m *WithdrawOnchain) String() string { return proto.CompactTextString(m) }
func (*WithdrawOnchain) ProtoMessage()    {}
func (*WithdrawOnchain) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{5}
}
func (m *WithdrawOnchain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawOnchain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawOnchain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawOnchain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawOnchain.Merge(m, src)
}
func (m *WithdrawOnchain) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawOnchain) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawOnchain.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawOnchain proto.InternalMessageInfo

func (m *WithdrawOnchain) GetChainid() uint64 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *WithdrawOnchain) GetSeqnum() uint64 {
	if m != nil {
		return m.Seqnum
	}
	return 0
}

func (m *WithdrawOnchain) GetReceiver() []byte {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *WithdrawOnchain) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *WithdrawOnchain) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

// sorted by signer address
type SortedSigners struct {
	Signers []*AddrAmt `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *SortedSigners) Reset()         { *m = SortedSigners{} }
func (m *SortedSigners) String() string { return proto.CompactTextString(m) }
func (*SortedSigners) ProtoMessage()    {}
func (*SortedSigners) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{6}
}
func (m *SortedSigners) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortedSigners) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortedSigners.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SortedSigners) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortedSigners.Merge(m, src)
}
func (m *SortedSigners) XXX_Size() int {
	return m.Size()
}
func (m *SortedSigners) XXX_DiscardUnknown() {
	xxx_messageInfo_SortedSigners.DiscardUnknown(m)
}

var xxx_messageInfo_SortedSigners proto.InternalMessageInfo

func (m *SortedSigners) GetSigners() []*AddrAmt {
	if m != nil {
		return m.Signers
	}
	return nil
}

type AddrAmt struct {
	Addr []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Amt  []byte `protobuf:"bytes,2,opt,name=amt,proto3" json:"amt,omitempty"`
}

func (m *AddrAmt) Reset()         { *m = AddrAmt{} }
func (m *AddrAmt) String() string { return proto.CompactTextString(m) }
func (*AddrAmt) ProtoMessage()    {}
func (*AddrAmt) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{7}
}
func (m *AddrAmt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddrAmt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddrAmt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddrAmt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddrAmt.Merge(m, src)
}
func (m *AddrAmt) XXX_Size() int {
	return m.Size()
}
func (m *AddrAmt) XXX_DiscardUnknown() {
	xxx_messageInfo_AddrAmt.DiscardUnknown(m)
}

var xxx_messageInfo_AddrAmt proto.InternalMessageInfo

func (m *AddrAmt) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddrAmt) GetAmt() []byte {
	if m != nil {
		return m.Amt
	}
	return nil
}

// saved by x/cbridge for each src transfer
type XferDetail struct {
	SendEvent []byte     `protobuf:"bytes,1,opt,name=send_event,json=sendEvent,proto3" json:"send_event,omitempty"`
	LiqToAdd  []*AddrAmt `protobuf:"bytes,2,rep,name=liq_to_add,json=liqToAdd,proto3" json:"liq_to_add,omitempty"`
}

func (m *XferDetail) Reset()         { *m = XferDetail{} }
func (m *XferDetail) String() string { return proto.CompactTextString(m) }
func (*XferDetail) ProtoMessage()    {}
func (*XferDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{8}
}
func (m *XferDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XferDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XferDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XferDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XferDetail.Merge(m, src)
}
func (m *XferDetail) XXX_Size() int {
	return m.Size()
}
func (m *XferDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_XferDetail.DiscardUnknown(m)
}

var xxx_messageInfo_XferDetail proto.InternalMessageInfo

func (m *XferDetail) GetSendEvent() []byte {
	if m != nil {
		return m.SendEvent
	}
	return nil
}

func (m *XferDetail) GetLiqToAdd() []*AddrAmt {
	if m != nil {
		return m.LiqToAdd
	}
	return nil
}

// saved and updated when new sig is added
type XferRelay struct {
	Relay []byte `protobuf:"bytes,1,opt,name=relay,proto3" json:"relay,omitempty"`
	// each sgn node send SendMySig and x/cbridge add to sigs,
	// NOTE sigs need to be sorted by recovered signer address
	SortedSigs []*AddrSig `protobuf:"bytes,2,rep,name=sorted_sigs,json=sortedSigs,proto3" json:"sorted_sigs,omitempty"`
}

func (m *XferRelay) Reset()         { *m = XferRelay{} }
func (m *XferRelay) String() string { return proto.CompactTextString(m) }
func (*XferRelay) ProtoMessage()    {}
func (*XferRelay) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{9}
}
func (m *XferRelay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XferRelay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XferRelay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XferRelay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XferRelay.Merge(m, src)
}
func (m *XferRelay) XXX_Size() int {
	return m.Size()
}
func (m *XferRelay) XXX_DiscardUnknown() {
	xxx_messageInfo_XferRelay.DiscardUnknown(m)
}

var xxx_messageInfo_XferRelay proto.InternalMessageInfo

func (m *XferRelay) GetRelay() []byte {
	if m != nil {
		return m.Relay
	}
	return nil
}

func (m *XferRelay) GetSortedSigs() []*AddrSig {
	if m != nil {
		return m.SortedSigs
	}
	return nil
}

type AddrSig struct {
	Addr []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Sig  []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *AddrSig) Reset()         { *m = AddrSig{} }
func (m *AddrSig) String() string { return proto.CompactTextString(m) }
func (*AddrSig) ProtoMessage()    {}
func (*AddrSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{10}
}
func (m *AddrSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddrSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddrSig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddrSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddrSig.Merge(m, src)
}
func (m *AddrSig) XXX_Size() int {
	return m.Size()
}
func (m *AddrSig) XXX_DiscardUnknown() {
	xxx_messageInfo_AddrSig.DiscardUnknown(m)
}

var xxx_messageInfo_AddrSig proto.InternalMessageInfo

func (m *AddrSig) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddrSig) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func init() {
	proto.RegisterEnum("sgn.cbridge.v1.XferStatus", XferStatus_name, XferStatus_value)
	proto.RegisterType((*Params)(nil), "sgn.cbridge.v1.Params")
	proto.RegisterType((*MultiChainAssetParam)(nil), "sgn.cbridge.v1.MultiChainAssetParam")
	proto.RegisterType((*ChainAsset)(nil), "sgn.cbridge.v1.ChainAsset")
	proto.RegisterType((*OnChainEvent)(nil), "sgn.cbridge.v1.OnChainEvent")
	proto.RegisterType((*RelayOnChain)(nil), "sgn.cbridge.v1.RelayOnChain")
	proto.RegisterType((*WithdrawOnchain)(nil), "sgn.cbridge.v1.WithdrawOnchain")
	proto.RegisterType((*SortedSigners)(nil), "sgn.cbridge.v1.SortedSigners")
	proto.RegisterType((*AddrAmt)(nil), "sgn.cbridge.v1.AddrAmt")
	proto.RegisterType((*XferDetail)(nil), "sgn.cbridge.v1.XferDetail")
	proto.RegisterType((*XferRelay)(nil), "sgn.cbridge.v1.XferRelay")
	proto.RegisterType((*AddrSig)(nil), "sgn.cbridge.v1.AddrSig")
}

func init() { proto.RegisterFile("sgn/cbridge/v1/cbridge.proto", fileDescriptor_ea88343271b63cf0) }

var fileDescriptor_ea88343271b63cf0 = []byte{
	// 810 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xb6, 0xe2, 0xbf, 0xf8, 0x58, 0x69, 0x34, 0xc2, 0x58, 0xbd, 0x60, 0xf3, 0x3c, 0xa1, 0x18,
	0x82, 0x01, 0xb5, 0x91, 0x0c, 0x03, 0x76, 0xab, 0xc4, 0x5e, 0x2b, 0x34, 0x8d, 0x33, 0xc9, 0x45,
	0x96, 0xed, 0x42, 0xa0, 0x45, 0x46, 0x21, 0xa2, 0x9f, 0x84, 0xa4, 0xdd, 0xe4, 0x21, 0x06, 0xec,
	0x7a, 0x6f, 0xb0, 0x37, 0xe9, 0x65, 0x2f, 0x77, 0x31, 0x0c, 0x43, 0xf2, 0x22, 0x03, 0x29, 0xda,
	0x69, 0x83, 0x34, 0x77, 0xe7, 0x7c, 0xfc, 0xce, 0xc7, 0xf3, 0x1d, 0x1e, 0x09, 0xbe, 0x14, 0x49,
	0x3e, 0x8c, 0x67, 0x9c, 0x91, 0x84, 0x0e, 0x17, 0x3b, 0xcb, 0x70, 0x70, 0xc1, 0x0b, 0x59, 0xa0,
	0x27, 0x22, 0xc9, 0x07, 0x4b, 0x68, 0xb1, 0xb3, 0xd5, 0x49, 0x8a, 0xa4, 0xd0, 0x47, 0x43, 0x15,
	0x95, 0x2c, 0xf7, 0x1c, 0x1a, 0x47, 0x98, 0xe3, 0x4c, 0x20, 0x0c, 0x4f, 0xb3, 0x79, 0x2a, 0x59,
	0x14, 0x9f, 0x61, 0x96, 0x47, 0x58, 0x08, 0x2a, 0xa3, 0x0b, 0x75, 0xd6, 0xb5, 0xfa, 0xd6, 0x76,
	0x7b, 0xf7, 0xd9, 0xe0, 0x63, 0xc5, 0xc1, 0x6b, 0x45, 0xdf, 0x57, 0x6c, 0x4f, 0x91, 0xb5, 0xce,
	0x5e, 0xed, 0xdd, 0xbf, 0x5f, 0x57, 0x82, 0x4e, 0xf6, 0xc0, 0x99, 0x7b, 0x02, 0x9d, 0x87, 0x6a,
	0x90, 0x07, 0xed, 0x0f, 0x2e, 0xed, 0x5a, 0xfd, 0xea, 0x76, 0x7b, 0x77, 0xeb, 0xfe, 0x75, 0x77,
	0x55, 0xe6, 0x12, 0x88, 0x57, 0x88, 0xfb, 0x97, 0x05, 0x70, 0x47, 0x40, 0x5f, 0xc0, 0x7a, 0xa9,
	0xc8, 0x88, 0xee, 0xbe, 0x16, 0x34, 0x75, 0xee, 0x13, 0xf4, 0x0d, 0xd8, 0xb2, 0x38, 0xa7, 0x79,
	0x24, 0xae, 0xb3, 0x59, 0x91, 0x76, 0xd7, 0xfa, 0xd6, 0x76, 0x2b, 0x68, 0x6b, 0x2c, 0xd4, 0x10,
	0xfa, 0x0a, 0xa0, 0xa4, 0x60, 0x42, 0x78, 0xb7, 0xaa, 0x09, 0x2d, 0x8d, 0x78, 0x84, 0x70, 0xd4,
	0x85, 0x26, 0xa1, 0x31, 0xcb, 0x70, 0xda, 0xad, 0x95, 0xda, 0x26, 0x45, 0xcf, 0xe0, 0x49, 0x86,
	0xaf, 0xa2, 0x53, 0x4a, 0x23, 0x9c, 0x15, 0xf3, 0x5c, 0x76, 0xeb, 0xba, 0xd8, 0xce, 0xf0, 0xd5,
	0x4f, 0x94, 0x7a, 0x1a, 0x73, 0xa7, 0x60, 0x4f, 0x72, 0xdd, 0xec, 0x78, 0x41, 0x73, 0xa9, 0xf4,
	0x74, 0x73, 0xf7, 0x7a, 0x65, 0x04, 0x7d, 0x0e, 0x0d, 0xba, 0x90, 0xd7, 0x17, 0xd4, 0x74, 0x69,
	0x32, 0x84, 0xa0, 0x46, 0xd3, 0x22, 0xd1, 0xad, 0xd9, 0x81, 0x8e, 0xdd, 0x7f, 0x2c, 0xb0, 0x03,
	0x9a, 0xe2, 0x6b, 0xa3, 0xad, 0x8a, 0x05, 0xcd, 0x09, 0xe5, 0x5a, 0xd5, 0x0e, 0x4c, 0x86, 0xb6,
	0x60, 0x9d, 0xd3, 0x98, 0xb2, 0x05, 0xe5, 0x5a, 0xd6, 0x0e, 0x56, 0x39, 0xea, 0x40, 0x5d, 0xfb,
	0x34, 0xca, 0x65, 0xa2, 0x94, 0x8c, 0x9d, 0x5a, 0xa9, 0x54, 0x66, 0xa8, 0x0f, 0xb6, 0xe0, 0x71,
	0xb4, 0x9a, 0x74, 0x5d, 0x77, 0x0f, 0x82, 0xc7, 0xfb, 0x66, 0xd8, 0x7d, 0xb0, 0x89, 0x90, 0x77,
	0x8c, 0x46, 0xc9, 0x20, 0x42, 0x2e, 0x19, 0xdf, 0xc2, 0xa6, 0xd2, 0x90, 0x1c, 0xe7, 0xe2, 0x94,
	0x72, 0x45, 0x6a, 0xea, 0x4b, 0x36, 0x04, 0x8f, 0xa7, 0x06, 0xf5, 0x89, 0xfb, 0xbb, 0x05, 0x9b,
	0xc7, 0x4c, 0x9e, 0x11, 0x8e, 0xdf, 0x4e, 0x72, 0x2d, 0xf8, 0xf8, 0xe0, 0x04, 0xbd, 0xcc, 0xe7,
	0x99, 0x76, 0x58, 0x0b, 0x4c, 0xf6, 0x91, 0xf7, 0xea, 0xa7, 0xbc, 0xd7, 0x1e, 0xf6, 0x5e, 0xff,
	0xd0, 0xbb, 0xbb, 0x07, 0x1b, 0x61, 0xc1, 0x25, 0x25, 0x21, 0x4b, 0x72, 0xca, 0x05, 0xda, 0x81,
	0xa6, 0x28, 0x43, 0xb3, 0xc0, 0x4f, 0xef, 0x2f, 0xb0, 0x5a, 0x1e, 0x2f, 0x93, 0xc1, 0x92, 0xe7,
	0x0e, 0xa1, 0x69, 0x30, 0xf5, 0xa2, 0x7a, 0xd9, 0xca, 0xa7, 0xd2, 0x31, 0x72, 0xa0, 0x8a, 0x33,
	0x69, 0xde, 0x48, 0x85, 0xee, 0x0c, 0xe0, 0x97, 0x53, 0xca, 0x47, 0x54, 0x62, 0xa6, 0xd7, 0x54,
	0x3d, 0x69, 0x44, 0xd5, 0x16, 0x99, 0xca, 0x96, 0x42, 0xca, 0xb5, 0xfa, 0x01, 0x20, 0x65, 0x97,
	0x91, 0x2c, 0xd4, 0x1a, 0x77, 0xd7, 0x1e, 0xef, 0x69, 0x3d, 0x65, 0x97, 0xd3, 0xc2, 0x23, 0xc4,
	0xfd, 0x0d, 0x5a, 0xea, 0x0e, 0xbd, 0x4a, 0x6a, 0x26, 0x5c, 0x05, 0x46, 0xbd, 0x4c, 0xd0, 0x8f,
	0xd0, 0x16, 0xda, 0x7b, 0x24, 0x58, 0x22, 0x1e, 0x93, 0x0e, 0x59, 0x12, 0x80, 0x58, 0xce, 0x69,
	0xe5, 0x38, 0x64, 0xc9, 0xa7, 0x1c, 0x0b, 0x96, 0x2c, 0x1d, 0x0b, 0x96, 0x7c, 0xf7, 0xa7, 0x55,
	0x5a, 0x0e, 0x25, 0x96, 0x73, 0x81, 0xda, 0xd0, 0x7c, 0x73, 0xf8, 0xea, 0x70, 0x72, 0x7c, 0xe8,
	0x54, 0xd0, 0x67, 0xb0, 0xb1, 0xe7, 0x8d, 0xa2, 0x03, 0xff, 0xe7, 0x37, 0xfe, 0xc8, 0x9f, 0x9e,
	0x38, 0x16, 0x72, 0xc0, 0x56, 0x50, 0x78, 0xe0, 0x1f, 0x1d, 0x79, 0x2f, 0xc6, 0xce, 0x1a, 0xda,
	0x84, 0xf6, 0xe4, 0x55, 0x34, 0x9d, 0x44, 0xc1, 0xf8, 0xc0, 0x3b, 0x71, 0xaa, 0xaa, 0xea, 0xa5,
	0x17, 0x96, 0x69, 0x14, 0xfa, 0x2f, 0x9c, 0x1a, 0xda, 0x80, 0xd6, 0xfe, 0xe4, 0xf5, 0xd1, 0xc1,
	0x78, 0x3a, 0x1e, 0x39, 0x75, 0xd4, 0x01, 0x47, 0x31, 0x8e, 0xfd, 0xe9, 0xcb, 0x51, 0xe0, 0x1d,
	0x6b, 0x52, 0x43, 0xd5, 0xad, 0x90, 0xd1, 0xe4, 0x70, 0xec, 0x34, 0xf7, 0xfc, 0x77, 0x37, 0x3d,
	0xeb, 0xfd, 0x4d, 0xcf, 0xfa, 0xef, 0xa6, 0x67, 0xfd, 0x71, 0xdb, 0xab, 0xbc, 0xbf, 0xed, 0x55,
	0xfe, 0xbe, 0xed, 0x55, 0x7e, 0x1d, 0x26, 0x4c, 0x9e, 0xcd, 0x67, 0x83, 0xb8, 0xc8, 0x86, 0x31,
	0x4d, 0x29, 0x7f, 0x9e, 0x53, 0xf9, 0xb6, 0xe0, 0xe7, 0x43, 0x91, 0xe4, 0xcf, 0x17, 0xbb, 0xc3,
	0xab, 0xd5, 0x8f, 0x5b, 0x7d, 0xd0, 0x62, 0xd6, 0xd0, 0xbf, 0xe3, 0xef, 0xff, 0x0f, 0x00, 0x00,
	0xff, 0xff, 0xf6, 0x1d, 0x6e, 0xbd, 0xd4, 0x05, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MultiChainAssetParam.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCbridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MultiChainAssetParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiChainAssetParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiChainAssetParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainAsset) > 0 {
		for iNdEx := len(m.ChainAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxFeeAmount) > 0 {
		i -= len(m.MaxFeeAmount)
		copy(dAtA[i:], m.MaxFeeAmount)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.MaxFeeAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Decimal != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TokenAddr) > 0 {
		i -= len(m.TokenAddr)
		copy(dAtA[i:], m.TokenAddr)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.TokenAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OnChainEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnChainEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnChainEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Elog) > 0 {
		i -= len(m.Elog)
		copy(dAtA[i:], m.Elog)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Elog)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Evtype) > 0 {
		i -= len(m.Evtype)
		copy(dAtA[i:], m.Evtype)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Evtype)))
		i--
		dAtA[i] = 0x12
	}
	if m.Chainid != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Chainid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelayOnChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayOnChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayOnChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SrcTransferId) > 0 {
		i -= len(m.SrcTransferId)
		copy(dAtA[i:], m.SrcTransferId)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.SrcTransferId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DstChainId != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.DstChainId))
		i--
		dAtA[i] = 0x30
	}
	if m.SrcChainId != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawOnchain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawOnchain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawOnchain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Seqnum != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Seqnum))
		i--
		dAtA[i] = 0x10
	}
	if m.Chainid != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Chainid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SortedSigners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortedSigners) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortedSigners) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddrAmt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddrAmt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddrAmt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amt) > 0 {
		i -= len(m.Amt)
		copy(dAtA[i:], m.Amt)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Amt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *XferDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XferDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XferDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiqToAdd) > 0 {
		for iNdEx := len(m.LiqToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiqToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SendEvent) > 0 {
		i -= len(m.SendEvent)
		copy(dAtA[i:], m.SendEvent)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.SendEvent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *XferRelay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XferRelay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XferRelay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SortedSigs) > 0 {
		for iNdEx := len(m.SortedSigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SortedSigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Relay) > 0 {
		i -= len(m.Relay)
		copy(dAtA[i:], m.Relay)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Relay)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddrSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddrSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddrSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCbridge(dAtA []byte, offset int, v uint64) int {
	offset -= sovCbridge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MultiChainAssetParam.Size()
	n += 1 + l + sovCbridge(uint64(l))
	return n
}

func (m *MultiChainAssetParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainAsset) > 0 {
		for _, e := range m.ChainAsset {
			l = e.Size()
			n += 1 + l + sovCbridge(uint64(l))
		}
	}
	return n
}

func (m *ChainAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovCbridge(uint64(m.ChainId))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.TokenAddr)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	if m.Decimal != 0 {
		n += 1 + sovCbridge(uint64(m.Decimal))
	}
	l = len(m.MaxFeeAmount)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *OnChainEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chainid != 0 {
		n += 1 + sovCbridge(uint64(m.Chainid))
	}
	l = len(m.Evtype)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Elog)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *RelayOnChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	if m.SrcChainId != 0 {
		n += 1 + sovCbridge(uint64(m.SrcChainId))
	}
	if m.DstChainId != 0 {
		n += 1 + sovCbridge(uint64(m.DstChainId))
	}
	l = len(m.SrcTransferId)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *WithdrawOnchain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chainid != 0 {
		n += 1 + sovCbridge(uint64(m.Chainid))
	}
	if m.Seqnum != 0 {
		n += 1 + sovCbridge(uint64(m.Seqnum))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *SortedSigners) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for _, e := range m.Signers {
			l = e.Size()
			n += 1 + l + sovCbridge(uint64(l))
		}
	}
	return n
}

func (m *AddrAmt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Amt)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *XferDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SendEvent)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	if len(m.LiqToAdd) > 0 {
		for _, e := range m.LiqToAdd {
			l = e.Size()
			n += 1 + l + sovCbridge(uint64(l))
		}
	}
	return n
}

func (m *XferRelay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Relay)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	if len(m.SortedSigs) > 0 {
		for _, e := range m.SortedSigs {
			l = e.Size()
			n += 1 + l + sovCbridge(uint64(l))
		}
	}
	return n
}

func (m *AddrSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func sovCbridge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCbridge(x uint64) (n int) {
	return sovCbridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiChainAssetParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MultiChainAssetParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiChainAssetParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiChainAssetParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiChainAssetParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainAsset = append(m.ChainAsset, ChainAsset{})
			if err := m.ChainAsset[len(m.ChainAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxFeeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnChainEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnChainEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnChainEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chainid", wireType)
			}
			m.Chainid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chainid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elog", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elog = append(m.Elog[:0], dAtA[iNdEx:postIndex]...)
			if m.Elog == nil {
				m.Elog = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayOnChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayOnChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayOnChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = append(m.Receiver[:0], dAtA[iNdEx:postIndex]...)
			if m.Receiver == nil {
				m.Receiver = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount[:0], dAtA[iNdEx:postIndex]...)
			if m.Amount == nil {
				m.Amount = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainId", wireType)
			}
			m.DstChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTransferId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTransferId = append(m.SrcTransferId[:0], dAtA[iNdEx:postIndex]...)
			if m.SrcTransferId == nil {
				m.SrcTransferId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawOnchain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawOnchain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawOnchain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chainid", wireType)
			}
			m.Chainid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chainid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqnum", wireType)
			}
			m.Seqnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seqnum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = append(m.Receiver[:0], dAtA[iNdEx:postIndex]...)
			if m.Receiver == nil {
				m.Receiver = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount[:0], dAtA[iNdEx:postIndex]...)
			if m.Amount == nil {
				m.Amount = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortedSigners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortedSigners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortedSigners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, &AddrAmt{})
			if err := m.Signers[len(m.Signers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddrAmt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrAmt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrAmt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amt = append(m.Amt[:0], dAtA[iNdEx:postIndex]...)
			if m.Amt == nil {
				m.Amt = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XferDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XferDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XferDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendEvent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendEvent = append(m.SendEvent[:0], dAtA[iNdEx:postIndex]...)
			if m.SendEvent == nil {
				m.SendEvent = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiqToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiqToAdd = append(m.LiqToAdd, &AddrAmt{})
			if err := m.LiqToAdd[len(m.LiqToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XferRelay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XferRelay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XferRelay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relay", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relay = append(m.Relay[:0], dAtA[iNdEx:postIndex]...)
			if m.Relay == nil {
				m.Relay = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortedSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortedSigs = append(m.SortedSigs, &AddrSig{})
			if err := m.SortedSigs[len(m.SortedSigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddrSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCbridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCbridge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCbridge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCbridge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCbridge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCbridge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCbridge = fmt.Errorf("proto: unexpected end of group")
)
