// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/cbridge/v1/cbridge.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ========== x/cbridge kv value types
// for src transfer id
// normal status flow: after sgn applied user's Send event, status is OK_TO_RELAY. then after apply Relay event
// status is SUCCESS
// can't relay flow: after apply send, status will be BAD_xxx, and there'll be no relay. so user need to InitWithdraw, status becomes refund_requested
// when sgn apply withdrawDone event, status becomes REFUND_DONE
type XferStatus int32

const (
	XferStatus_UNKNOWN XferStatus = 0
	// normal flow only has ok then success
	XferStatus_OK_TO_RELAY XferStatus = 1
	XferStatus_SUCCESS     XferStatus = 2
	// can't relay flow status
	XferStatus_BAD_LIQUIDITY XferStatus = 3
	XferStatus_BAD_SLIPPAGE  XferStatus = 4
	// refund, using withdraw flow
	XferStatus_REFUND_REQUESTED XferStatus = 5
	XferStatus_REFUND_DONE      XferStatus = 6
)

var XferStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK_TO_RELAY",
	2: "SUCCESS",
	3: "BAD_LIQUIDITY",
	4: "BAD_SLIPPAGE",
	5: "REFUND_REQUESTED",
	6: "REFUND_DONE",
}

var XferStatus_value = map[string]int32{
	"UNKNOWN":          0,
	"OK_TO_RELAY":      1,
	"SUCCESS":          2,
	"BAD_LIQUIDITY":    3,
	"BAD_SLIPPAGE":     4,
	"REFUND_REQUESTED": 5,
	"REFUND_DONE":      6,
}

func (x XferStatus) String() string {
	return proto.EnumName(XferStatus_name, int32(x))
}

func (XferStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{0}
}

// ========== params
type Params struct {
	SignerUpdateDuration time.Duration `protobuf:"bytes,1,opt,name=signer_update_duration,json=signerUpdateDuration,proto3,stdduration" json:"signer_update_duration,omitempty" yaml:"signer_update_duration"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSignerUpdateDuration() time.Duration {
	if m != nil {
		return m.SignerUpdateDuration
	}
	return 0
}

// ========== configs
// use configs to avoid confusion w/ cosmos param
type CbrConfig struct {
	LpFee      uint32        `protobuf:"varint,1,opt,name=lp_fee,json=lpFee,proto3" json:"lp_fee,omitempty"`
	Assets     []*ChainAsset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	ChainPairs []*ChainPair  `protobuf:"bytes,3,rep,name=chain_pairs,json=chainPairs,proto3" json:"chain_pairs,omitempty"`
}

func (m *CbrConfig) Reset()         { *m = CbrConfig{} }
func (m *CbrConfig) String() string { return proto.CompactTextString(m) }
func (*CbrConfig) ProtoMessage()    {}
func (*CbrConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{1}
}
func (m *CbrConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CbrConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CbrConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CbrConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbrConfig.Merge(m, src)
}
func (m *CbrConfig) XXX_Size() int {
	return m.Size()
}
func (m *CbrConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CbrConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CbrConfig proto.InternalMessageInfo

func (m *CbrConfig) GetLpFee() uint32 {
	if m != nil {
		return m.LpFee
	}
	return 0
}

func (m *CbrConfig) GetAssets() []*ChainAsset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *CbrConfig) GetChainPairs() []*ChainPair {
	if m != nil {
		return m.ChainPairs
	}
	return nil
}

// represent asset detail on one chain.
type ChainAsset struct {
	Symbol       string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	ChainId      uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Addr         string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	Decimal      uint32 `protobuf:"varint,4,opt,name=decimal,proto3" json:"decimal,omitempty"`
	MaxFeeAmount string `protobuf:"bytes,5,opt,name=max_fee_amount,json=maxFeeAmount,proto3" json:"max_fee_amount,omitempty"`
}

func (m *ChainAsset) Reset()         { *m = ChainAsset{} }
func (m *ChainAsset) String() string { return proto.CompactTextString(m) }
func (*ChainAsset) ProtoMessage()    {}
func (*ChainAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{2}
}
func (m *ChainAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainAsset.Merge(m, src)
}
func (m *ChainAsset) XXX_Size() int {
	return m.Size()
}
func (m *ChainAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainAsset.DiscardUnknown(m)
}

var xxx_messageInfo_ChainAsset proto.InternalMessageInfo

func (m *ChainAsset) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ChainAsset) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ChainAsset) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ChainAsset) GetDecimal() uint32 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

func (m *ChainAsset) GetMaxFeeAmount() string {
	if m != nil {
		return m.MaxFeeAmount
	}
	return ""
}

// chid1 must be smaller than chid2 order
type ChainPair struct {
	Chid1   uint64 `protobuf:"varint,1,opt,name=chid1,proto3" json:"chid1,omitempty"`
	Chid2   uint64 `protobuf:"varint,2,opt,name=chid2,proto3" json:"chid2,omitempty"`
	Weight1 uint32 `protobuf:"varint,3,opt,name=weight1,proto3" json:"weight1,omitempty"`
	Fee1To2 uint32 `protobuf:"varint,4,opt,name=fee1to2,proto3" json:"fee1to2,omitempty"`
	Fee2To1 uint32 `protobuf:"varint,5,opt,name=fee2to1,proto3" json:"fee2to1,omitempty"`
	ConstA  uint32 `protobuf:"varint,6,opt,name=const_a,json=constA,proto3" json:"const_a,omitempty"`
}

func (m *ChainPair) Reset()         { *m = ChainPair{} }
func (m *ChainPair) String() string { return proto.CompactTextString(m) }
func (*ChainPair) ProtoMessage()    {}
func (*ChainPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{3}
}
func (m *ChainPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainPair.Merge(m, src)
}
func (m *ChainPair) XXX_Size() int {
	return m.Size()
}
func (m *ChainPair) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainPair.DiscardUnknown(m)
}

var xxx_messageInfo_ChainPair proto.InternalMessageInfo

func (m *ChainPair) GetChid1() uint64 {
	if m != nil {
		return m.Chid1
	}
	return 0
}

func (m *ChainPair) GetChid2() uint64 {
	if m != nil {
		return m.Chid2
	}
	return 0
}

func (m *ChainPair) GetWeight1() uint32 {
	if m != nil {
		return m.Weight1
	}
	return 0
}

func (m *ChainPair) GetFee1To2() uint32 {
	if m != nil {
		return m.Fee1To2
	}
	return 0
}

func (m *ChainPair) GetFee2To1() uint32 {
	if m != nil {
		return m.Fee2To1
	}
	return 0
}

func (m *ChainPair) GetConstA() uint32 {
	if m != nil {
		return m.ConstA
	}
	return 0
}

// ========== for sync propose
// to be included in sync propose update, broadcast by syncer to tell others
// an onchain event happened. for completeness we include chainid, even though
// propose update also has it
type OnChainEvent struct {
	Chainid uint64 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Evtype  string `protobuf:"bytes,2,opt,name=evtype,proto3" json:"evtype,omitempty"`
	Elog    []byte `protobuf:"bytes,3,opt,name=elog,proto3" json:"elog,omitempty"`
}

func (m *OnChainEvent) Reset()         { *m = OnChainEvent{} }
func (m *OnChainEvent) String() string { return proto.CompactTextString(m) }
func (*OnChainEvent) ProtoMessage()    {}
func (*OnChainEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{4}
}
func (m *OnChainEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnChainEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnChainEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnChainEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnChainEvent.Merge(m, src)
}
func (m *OnChainEvent) XXX_Size() int {
	return m.Size()
}
func (m *OnChainEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_OnChainEvent.DiscardUnknown(m)
}

var xxx_messageInfo_OnChainEvent proto.InternalMessageInfo

func (m *OnChainEvent) GetChainid() uint64 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *OnChainEvent) GetEvtype() string {
	if m != nil {
		return m.Evtype
	}
	return ""
}

func (m *OnChainEvent) GetElog() []byte {
	if m != nil {
		return m.Elog
	}
	return nil
}

// ========== onchain tx data
// same proto used by solidity, serialized bytes are signed by sgn nodes then submit onchain to relay function
// x/cbridge will emit tendermint event, relayer monitor and send msg w/ its signature
type RelayOnChain struct {
	Sender        []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver      []byte `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Token         []byte `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount        []byte `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	SrcChainId    uint64 `protobuf:"varint,5,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DstChainId    uint64 `protobuf:"varint,6,opt,name=dst_chain_id,json=dstChainId,proto3" json:"dst_chain_id,omitempty"`
	SrcTransferId []byte `protobuf:"bytes,7,opt,name=src_transfer_id,json=srcTransferId,proto3" json:"src_transfer_id,omitempty"`
}

func (m *RelayOnChain) Reset()      { *m = RelayOnChain{} }
func (*RelayOnChain) ProtoMessage() {}
func (*RelayOnChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{5}
}
func (m *RelayOnChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayOnChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayOnChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayOnChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayOnChain.Merge(m, src)
}
func (m *RelayOnChain) XXX_Size() int {
	return m.Size()
}
func (m *RelayOnChain) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayOnChain.DiscardUnknown(m)
}

var xxx_messageInfo_RelayOnChain proto.InternalMessageInfo

func (m *RelayOnChain) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *RelayOnChain) GetReceiver() []byte {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *RelayOnChain) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *RelayOnChain) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *RelayOnChain) GetSrcChainId() uint64 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func (m *RelayOnChain) GetDstChainId() uint64 {
	if m != nil {
		return m.DstChainId
	}
	return 0
}

func (m *RelayOnChain) GetSrcTransferId() []byte {
	if m != nil {
		return m.SrcTransferId
	}
	return nil
}

// data when call withdraw onchain
type WithdrawOnchain struct {
	Chainid  uint64 `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Seqnum   uint64 `protobuf:"varint,2,opt,name=seqnum,proto3" json:"seqnum,omitempty"`
	Receiver []byte `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Token    []byte `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Amount   []byte `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *WithdrawOnchain) Reset()      { *m = WithdrawOnchain{} }
func (*WithdrawOnchain) ProtoMessage() {}
func (*WithdrawOnchain) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{6}
}
func (m *WithdrawOnchain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawOnchain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawOnchain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawOnchain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawOnchain.Merge(m, src)
}
func (m *WithdrawOnchain) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawOnchain) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawOnchain.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawOnchain proto.InternalMessageInfo

func (m *WithdrawOnchain) GetChainid() uint64 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *WithdrawOnchain) GetSeqnum() uint64 {
	if m != nil {
		return m.Seqnum
	}
	return 0
}

func (m *WithdrawOnchain) GetReceiver() []byte {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *WithdrawOnchain) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *WithdrawOnchain) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

// sorted by signer address
type SortedSigners struct {
	Signers []*AddrAmt `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *SortedSigners) Reset()      { *m = SortedSigners{} }
func (*SortedSigners) ProtoMessage() {}
func (*SortedSigners) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{7}
}
func (m *SortedSigners) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortedSigners) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortedSigners.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SortedSigners) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortedSigners.Merge(m, src)
}
func (m *SortedSigners) XXX_Size() int {
	return m.Size()
}
func (m *SortedSigners) XXX_DiscardUnknown() {
	xxx_messageInfo_SortedSigners.DiscardUnknown(m)
}

var xxx_messageInfo_SortedSigners proto.InternalMessageInfo

func (m *SortedSigners) GetSigners() []*AddrAmt {
	if m != nil {
		return m.Signers
	}
	return nil
}

type AddrAmt struct {
	Addr []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Amt  []byte `protobuf:"bytes,2,opt,name=amt,proto3" json:"amt,omitempty"`
}

func (m *AddrAmt) Reset()         { *m = AddrAmt{} }
func (m *AddrAmt) String() string { return proto.CompactTextString(m) }
func (*AddrAmt) ProtoMessage()    {}
func (*AddrAmt) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{8}
}
func (m *AddrAmt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddrAmt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddrAmt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddrAmt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddrAmt.Merge(m, src)
}
func (m *AddrAmt) XXX_Size() int {
	return m.Size()
}
func (m *AddrAmt) XXX_DiscardUnknown() {
	xxx_messageInfo_AddrAmt.DiscardUnknown(m)
}

var xxx_messageInfo_AddrAmt proto.InternalMessageInfo

func (m *AddrAmt) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddrAmt) GetAmt() []byte {
	if m != nil {
		return m.Amt
	}
	return nil
}

// saved and updated when new sig is added
type XferRelay struct {
	Relay []byte `protobuf:"bytes,1,opt,name=relay,proto3" json:"relay,omitempty"`
	// each sgn node send SendMySig and x/cbridge add to sigs,
	// NOTE sigs need to be sorted by recovered signer address
	SortedSigs []*AddrSig `protobuf:"bytes,2,rep,name=sorted_sigs,json=sortedSigs,proto3" json:"sorted_sigs,omitempty"`
}

func (m *XferRelay) Reset()         { *m = XferRelay{} }
func (m *XferRelay) String() string { return proto.CompactTextString(m) }
func (*XferRelay) ProtoMessage()    {}
func (*XferRelay) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{9}
}
func (m *XferRelay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XferRelay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XferRelay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XferRelay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XferRelay.Merge(m, src)
}
func (m *XferRelay) XXX_Size() int {
	return m.Size()
}
func (m *XferRelay) XXX_DiscardUnknown() {
	xxx_messageInfo_XferRelay.DiscardUnknown(m)
}

var xxx_messageInfo_XferRelay proto.InternalMessageInfo

func (m *XferRelay) GetRelay() []byte {
	if m != nil {
		return m.Relay
	}
	return nil
}

func (m *XferRelay) GetSortedSigs() []*AddrSig {
	if m != nil {
		return m.SortedSigs
	}
	return nil
}

type WithdrawDetail struct {
	WdOnchain   []byte     `protobuf:"bytes,1,opt,name=wd_onchain,json=wdOnchain,proto3" json:"wd_onchain,omitempty"`
	SortedSigs  []*AddrSig `protobuf:"bytes,2,rep,name=sorted_sigs,json=sortedSigs,proto3" json:"sorted_sigs,omitempty"`
	Completed   bool       `protobuf:"varint,3,opt,name=completed,proto3" json:"completed,omitempty"`
	LastReqTime int64      `protobuf:"varint,4,opt,name=last_req_time,json=lastReqTime,proto3" json:"last_req_time,omitempty"`
	XferId      []byte     `protobuf:"bytes,5,opt,name=xferId,proto3" json:"xferId,omitempty"`
}

func (m *WithdrawDetail) Reset()         { *m = WithdrawDetail{} }
func (m *WithdrawDetail) String() string { return proto.CompactTextString(m) }
func (*WithdrawDetail) ProtoMessage()    {}
func (*WithdrawDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{10}
}
func (m *WithdrawDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawDetail.Merge(m, src)
}
func (m *WithdrawDetail) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawDetail.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawDetail proto.InternalMessageInfo

func (m *WithdrawDetail) GetWdOnchain() []byte {
	if m != nil {
		return m.WdOnchain
	}
	return nil
}

func (m *WithdrawDetail) GetSortedSigs() []*AddrSig {
	if m != nil {
		return m.SortedSigs
	}
	return nil
}

func (m *WithdrawDetail) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *WithdrawDetail) GetLastReqTime() int64 {
	if m != nil {
		return m.LastReqTime
	}
	return 0
}

func (m *WithdrawDetail) GetXferId() []byte {
	if m != nil {
		return m.XferId
	}
	return nil
}

type AddrSig struct {
	Addr []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Sig  []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *AddrSig) Reset()         { *m = AddrSig{} }
func (m *AddrSig) String() string { return proto.CompactTextString(m) }
func (*AddrSig) ProtoMessage()    {}
func (*AddrSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{11}
}
func (m *AddrSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddrSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddrSig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddrSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddrSig.Merge(m, src)
}
func (m *AddrSig) XXX_Size() int {
	return m.Size()
}
func (m *AddrSig) XXX_DiscardUnknown() {
	xxx_messageInfo_AddrSig.DiscardUnknown(m)
}

var xxx_messageInfo_AddrSig proto.InternalMessageInfo

func (m *AddrSig) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddrSig) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type ChainSigners struct {
	ChainId      uint64         `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CurrSigners  *SortedSigners `protobuf:"bytes,2,opt,name=curr_signers,json=currSigners,proto3" json:"curr_signers,omitempty"`
	SignersBytes []byte         `protobuf:"bytes,3,opt,name=signers_bytes,json=signersBytes,proto3" json:"signers_bytes,omitempty"`
}

func (m *ChainSigners) Reset()      { *m = ChainSigners{} }
func (*ChainSigners) ProtoMessage() {}
func (*ChainSigners) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{12}
}
func (m *ChainSigners) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainSigners) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainSigners.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainSigners) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainSigners.Merge(m, src)
}
func (m *ChainSigners) XXX_Size() int {
	return m.Size()
}
func (m *ChainSigners) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainSigners.DiscardUnknown(m)
}

var xxx_messageInfo_ChainSigners proto.InternalMessageInfo

func (m *ChainSigners) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ChainSigners) GetCurrSigners() *SortedSigners {
	if m != nil {
		return m.CurrSigners
	}
	return nil
}

func (m *ChainSigners) GetSignersBytes() []byte {
	if m != nil {
		return m.SignersBytes
	}
	return nil
}

type LatestSigners struct {
	Signers      *SortedSigners `protobuf:"bytes,1,opt,name=signers,proto3" json:"signers,omitempty"`
	SignersBytes []byte         `protobuf:"bytes,2,opt,name=signers_bytes,json=signersBytes,proto3" json:"signers_bytes,omitempty"`
	SortedSigs   []*AddrSig     `protobuf:"bytes,3,rep,name=sorted_sigs,json=sortedSigs,proto3" json:"sorted_sigs,omitempty"`
	UpdateTime   time.Time      `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,stdtime" json:"update_time" yaml:"update_time"`
}

func (m *LatestSigners) Reset()      { *m = LatestSigners{} }
func (*LatestSigners) ProtoMessage() {}
func (*LatestSigners) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea88343271b63cf0, []int{13}
}
func (m *LatestSigners) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestSigners) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestSigners.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestSigners) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestSigners.Merge(m, src)
}
func (m *LatestSigners) XXX_Size() int {
	return m.Size()
}
func (m *LatestSigners) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestSigners.DiscardUnknown(m)
}

var xxx_messageInfo_LatestSigners proto.InternalMessageInfo

func (m *LatestSigners) GetSigners() *SortedSigners {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *LatestSigners) GetSignersBytes() []byte {
	if m != nil {
		return m.SignersBytes
	}
	return nil
}

func (m *LatestSigners) GetSortedSigs() []*AddrSig {
	if m != nil {
		return m.SortedSigs
	}
	return nil
}

func (m *LatestSigners) GetUpdateTime() time.Time {
	if m != nil {
		return m.UpdateTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("sgn.cbridge.v1.XferStatus", XferStatus_name, XferStatus_value)
	proto.RegisterType((*Params)(nil), "sgn.cbridge.v1.Params")
	proto.RegisterType((*CbrConfig)(nil), "sgn.cbridge.v1.CbrConfig")
	proto.RegisterType((*ChainAsset)(nil), "sgn.cbridge.v1.ChainAsset")
	proto.RegisterType((*ChainPair)(nil), "sgn.cbridge.v1.ChainPair")
	proto.RegisterType((*OnChainEvent)(nil), "sgn.cbridge.v1.OnChainEvent")
	proto.RegisterType((*RelayOnChain)(nil), "sgn.cbridge.v1.RelayOnChain")
	proto.RegisterType((*WithdrawOnchain)(nil), "sgn.cbridge.v1.WithdrawOnchain")
	proto.RegisterType((*SortedSigners)(nil), "sgn.cbridge.v1.SortedSigners")
	proto.RegisterType((*AddrAmt)(nil), "sgn.cbridge.v1.AddrAmt")
	proto.RegisterType((*XferRelay)(nil), "sgn.cbridge.v1.XferRelay")
	proto.RegisterType((*WithdrawDetail)(nil), "sgn.cbridge.v1.WithdrawDetail")
	proto.RegisterType((*AddrSig)(nil), "sgn.cbridge.v1.AddrSig")
	proto.RegisterType((*ChainSigners)(nil), "sgn.cbridge.v1.ChainSigners")
	proto.RegisterType((*LatestSigners)(nil), "sgn.cbridge.v1.LatestSigners")
}

func init() { proto.RegisterFile("sgn/cbridge/v1/cbridge.proto", fileDescriptor_ea88343271b63cf0) }

var fileDescriptor_ea88343271b63cf0 = []byte{
	// 1157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4d, 0x6f, 0x1b, 0xc5,
	0x1f, 0xce, 0xc6, 0x8e, 0xdd, 0xfc, 0xbc, 0x6e, 0xfd, 0x1f, 0xe5, 0xdf, 0x3a, 0x51, 0x6b, 0x47,
	0x0b, 0x42, 0x15, 0xa2, 0xb6, 0x6c, 0x0e, 0xa0, 0x9e, 0x70, 0x62, 0x17, 0xac, 0x86, 0x24, 0x5d,
	0xdb, 0x2a, 0xa5, 0x87, 0xd5, 0x78, 0x77, 0xbc, 0x19, 0x75, 0x5f, 0xdc, 0x99, 0xb1, 0x13, 0x9f,
	0xb9, 0x71, 0xaa, 0x40, 0x42, 0x3d, 0x55, 0x5c, 0xf9, 0x1c, 0x5c, 0x7a, 0xec, 0x91, 0x53, 0x40,
	0xe9, 0x8d, 0x63, 0x3f, 0x01, 0x9a, 0xd9, 0x99, 0x34, 0x49, 0x53, 0x54, 0x71, 0x9b, 0xe7, 0xf7,
	0xbe, 0xcf, 0x33, 0x2f, 0x0b, 0x37, 0x79, 0x98, 0x34, 0xfd, 0x31, 0xa3, 0x41, 0x48, 0x9a, 0xf3,
	0x96, 0x59, 0x36, 0xa6, 0x2c, 0x15, 0x29, 0xba, 0xca, 0xc3, 0xa4, 0x61, 0x4c, 0xf3, 0xd6, 0xc6,
	0xba, 0x9f, 0xf2, 0x38, 0xe5, 0x9e, 0xf2, 0x36, 0x33, 0x90, 0x85, 0x6e, 0xac, 0x85, 0x69, 0x98,
	0x66, 0x76, 0xb9, 0xd2, 0xd6, 0x7a, 0x98, 0xa6, 0x61, 0x44, 0x9a, 0x0a, 0x8d, 0x67, 0x93, 0xa6,
	0xa0, 0x31, 0xe1, 0x02, 0xc7, 0x53, 0x1d, 0x50, 0xbb, 0x18, 0x10, 0xcc, 0x18, 0x16, 0x34, 0x4d,
	0x32, 0xbf, 0xf3, 0x9b, 0x05, 0x85, 0x7d, 0xcc, 0x70, 0xcc, 0xd1, 0x0b, 0x0b, 0xae, 0x73, 0x1a,
	0x26, 0x84, 0x79, 0xb3, 0x69, 0x80, 0x05, 0xf1, 0x4c, 0x6c, 0xd5, 0xda, 0xb4, 0x6e, 0x97, 0xda,
	0xeb, 0x8d, 0xac, 0x58, 0xc3, 0x14, 0x6b, 0x74, 0x75, 0xc0, 0xd6, 0xb7, 0x2f, 0x8f, 0xeb, 0x4b,
	0x7f, 0x1f, 0xd7, 0x37, 0x2f, 0x2f, 0xf0, 0x59, 0x1a, 0x53, 0x41, 0xe2, 0xa9, 0x58, 0xbc, 0x39,
	0xae, 0xdf, 0x5a, 0xe0, 0x38, 0xba, 0xeb, 0x5c, 0x1e, 0xe9, 0x3c, 0xff, 0xb3, 0x6e, 0xb9, 0x6b,
	0x99, 0x73, 0xa4, 0x7c, 0xa6, 0x89, 0xf3, 0x93, 0x05, 0xab, 0xdb, 0x63, 0xb6, 0x9d, 0x26, 0x13,
	0x1a, 0xa2, 0xff, 0x43, 0x21, 0x9a, 0x7a, 0x13, 0x42, 0xd4, 0x74, 0x65, 0x77, 0x25, 0x9a, 0xde,
	0x23, 0x04, 0xb5, 0xa1, 0x80, 0x39, 0x27, 0x82, 0x57, 0x97, 0x37, 0x73, 0xb7, 0x4b, 0xed, 0x8d,
	0xc6, 0x79, 0x8e, 0x1b, 0xdb, 0x07, 0x98, 0x26, 0x1d, 0x19, 0xe2, 0xea, 0x48, 0x74, 0x17, 0x4a,
	0xbe, 0xb4, 0x7a, 0x53, 0x4c, 0x19, 0xaf, 0xe6, 0x54, 0xe2, 0xfa, 0xa5, 0x89, 0xfb, 0x98, 0x32,
	0x17, 0x7c, 0xb3, 0xe4, 0xce, 0xcf, 0x16, 0xc0, 0xdb, 0x92, 0xe8, 0x3a, 0x14, 0xf8, 0x22, 0x1e,
	0xa7, 0x91, 0x9a, 0x6a, 0xd5, 0xd5, 0x08, 0xad, 0xc3, 0x95, 0xac, 0x05, 0x0d, 0xaa, 0xcb, 0x9b,
	0xd6, 0xed, 0xbc, 0x5b, 0x54, 0xb8, 0x1f, 0x20, 0x04, 0x79, 0x1c, 0x04, 0xac, 0x9a, 0x53, 0x09,
	0x6a, 0x8d, 0xaa, 0x50, 0x0c, 0x88, 0x4f, 0x63, 0x1c, 0x55, 0xf3, 0xea, 0xeb, 0x0c, 0x44, 0x1f,
	0xc3, 0xd5, 0x18, 0x1f, 0xc9, 0xef, 0xf6, 0x70, 0x9c, 0xce, 0x12, 0x51, 0x5d, 0x51, 0x79, 0x76,
	0x8c, 0x8f, 0xee, 0x11, 0xd2, 0x51, 0x36, 0xe7, 0x85, 0xa4, 0xca, 0x0c, 0x89, 0xd6, 0x60, 0xc5,
	0x3f, 0xa0, 0x41, 0x4b, 0xcd, 0x94, 0x77, 0x33, 0x60, 0xac, 0x6d, 0x3d, 0x4f, 0x06, 0x64, 0xe7,
	0x43, 0x42, 0xc3, 0x03, 0xd1, 0x52, 0x03, 0x95, 0x5d, 0x03, 0xa5, 0x67, 0x42, 0x48, 0x4b, 0xa4,
	0x6d, 0x33, 0x93, 0x86, 0xda, 0xd3, 0x16, 0x69, 0x4b, 0x0d, 0x93, 0x79, 0x24, 0x44, 0x37, 0xa0,
	0xe8, 0xa7, 0x09, 0x17, 0x1e, 0xae, 0x16, 0x94, 0xa7, 0xa0, 0x60, 0xc7, 0x19, 0x82, 0xbd, 0x97,
	0xa8, 0x09, 0x7b, 0x73, 0x92, 0x08, 0x59, 0x42, 0xf1, 0x41, 0x03, 0x3d, 0xa4, 0x81, 0x92, 0x51,
	0x32, 0x17, 0x8b, 0x29, 0x51, 0x73, 0xae, 0xba, 0x1a, 0x49, 0xda, 0x48, 0x94, 0x86, 0x6a, 0x4a,
	0xdb, 0x55, 0x6b, 0xe7, 0xc4, 0x02, 0xdb, 0x25, 0x11, 0x5e, 0xe8, 0xda, 0x4a, 0x0e, 0x92, 0x04,
	0x84, 0xa9, 0xaa, 0xb6, 0xab, 0x11, 0xda, 0x80, 0x2b, 0x8c, 0xf8, 0x84, 0xce, 0x09, 0x53, 0x65,
	0x6d, 0xf7, 0x14, 0x4b, 0x5e, 0x44, 0xfa, 0x84, 0x24, 0xba, 0x72, 0x06, 0x64, 0x25, 0xcd, 0x77,
	0x3e, 0xab, 0x94, 0x21, 0xb4, 0x09, 0x36, 0x67, 0xbe, 0x77, 0x2a, 0xee, 0x8a, 0x9a, 0x1e, 0x38,
	0xf3, 0xb7, 0xb5, 0xbe, 0x9b, 0x60, 0x07, 0x5c, 0xbc, 0x8d, 0x28, 0x64, 0x11, 0x01, 0x17, 0x26,
	0xe2, 0x13, 0xb8, 0x26, 0x6b, 0x08, 0x86, 0x13, 0x3e, 0x21, 0x4c, 0x06, 0x15, 0x55, 0x93, 0x32,
	0x67, 0xfe, 0x50, 0x5b, 0xfb, 0xc1, 0xdd, 0xfc, 0xf3, 0x5f, 0xeb, 0x4b, 0x72, 0xc7, 0x5d, 0x7b,
	0x48, 0xc5, 0x41, 0xc0, 0xf0, 0xe1, 0x5e, 0xa2, 0xca, 0xfe, 0x3b, 0x7d, 0x9c, 0x3c, 0x4d, 0x66,
	0xb1, 0x96, 0x59, 0xa3, 0x73, 0x0c, 0xe4, 0xde, 0xc7, 0x40, 0xfe, 0x72, 0x06, 0x56, 0xce, 0x32,
	0xa0, 0xa7, 0xfa, 0x06, 0xca, 0x83, 0x94, 0x09, 0x12, 0x0c, 0xd4, 0xd1, 0xe5, 0xa8, 0x05, 0xc5,
	0xec, 0x14, 0xf3, 0xaa, 0xa5, 0x0e, 0xd4, 0x8d, 0x8b, 0x07, 0xaa, 0x13, 0x04, 0xac, 0x13, 0x0b,
	0xd7, 0xc4, 0xe9, 0x4a, 0x4d, 0x28, 0x6a, 0xcf, 0xe9, 0xd1, 0xc8, 0xc4, 0xcb, 0x8e, 0x46, 0x05,
	0x72, 0x38, 0x16, 0x5a, 0x35, 0xb9, 0x74, 0x1e, 0xc3, 0xea, 0x77, 0x13, 0xc2, 0x94, 0xf0, 0x72,
	0x76, 0x26, 0x17, 0x3a, 0x27, 0x03, 0xe8, 0x4b, 0x28, 0x71, 0x35, 0x9d, 0xc7, 0x69, 0x68, 0xae,
	0x86, 0x4b, 0x07, 0x1a, 0xd0, 0xd0, 0x05, 0x6e, 0xbe, 0x84, 0x3b, 0xbf, 0x5b, 0x70, 0xd5, 0xb0,
	0xdd, 0x25, 0x02, 0xd3, 0x08, 0xdd, 0x02, 0x38, 0x0c, 0xbc, 0x34, 0xa3, 0x5e, 0xf7, 0x59, 0x3d,
	0x0c, 0x8c, 0x16, 0xff, 0xb9, 0x17, 0xba, 0x09, 0xab, 0x7e, 0x1a, 0x4f, 0x23, 0x22, 0x48, 0xa0,
	0x44, 0xb9, 0xe2, 0xbe, 0x35, 0x20, 0x07, 0xca, 0x11, 0xe6, 0xc2, 0x63, 0xe4, 0xa9, 0x27, 0xaf,
	0x79, 0xa5, 0x4e, 0xce, 0x2d, 0x49, 0xa3, 0x4b, 0x9e, 0x0e, 0x69, 0x4c, 0xa4, 0x46, 0x47, 0x6a,
	0xaf, 0x18, 0x8d, 0x32, 0x64, 0x38, 0x1d, 0xd0, 0xf0, 0x7d, 0x9c, 0x72, 0x1a, 0x1a, 0x4e, 0x39,
	0x0d, 0x9d, 0x5f, 0x2c, 0xb0, 0xd5, 0xf6, 0x34, 0x72, 0x9e, 0xbd, 0xc0, 0xac, 0xf3, 0x17, 0xd8,
	0x57, 0x60, 0xfb, 0x33, 0xc6, 0x3c, 0x23, 0xf7, 0xb2, 0x7a, 0x2d, 0x6e, 0x5d, 0xfc, 0xe2, 0x73,
	0xdb, 0xc3, 0x2d, 0xc9, 0x14, 0x53, 0xfc, 0x23, 0x28, 0xeb, 0x64, 0x6f, 0xbc, 0x10, 0x84, 0xeb,
	0x1d, 0x69, 0x6b, 0xe3, 0x96, 0xb4, 0xe9, 0xdd, 0xf1, 0xe3, 0x32, 0x94, 0x77, 0xb0, 0x20, 0x5c,
	0x98, 0xe4, 0x2f, 0xce, 0x6e, 0xb4, 0x0f, 0xe8, 0x6c, 0xa2, 0xdf, 0xed, 0xba, 0xfc, 0x6e, 0xd7,
	0x8b, 0x6a, 0xe6, 0x3e, 0x5c, 0xcd, 0xc7, 0x50, 0xd2, 0x8f, 0xdb, 0xa9, 0x5a, 0xf2, 0x39, 0xba,
	0xf8, 0x86, 0x0e, 0xcd, 0x8b, 0xbd, 0x55, 0x93, 0x8f, 0xe8, 0x9b, 0xe3, 0x3a, 0xca, 0x1e, 0xc8,
	0x33, 0xc9, 0xce, 0x33, 0xf9, 0x2a, 0x42, 0x66, 0x91, 0x09, 0x19, 0x19, 0x9f, 0xfe, 0x60, 0x01,
	0xc8, 0xad, 0x3f, 0x10, 0x58, 0xcc, 0x38, 0x2a, 0x41, 0x71, 0xb4, 0x7b, 0x7f, 0x77, 0xef, 0xe1,
	0x6e, 0x65, 0x09, 0x5d, 0x83, 0xd2, 0xde, 0x7d, 0x6f, 0xb8, 0xe7, 0xb9, 0xbd, 0x9d, 0xce, 0xa3,
	0x8a, 0x25, 0xbd, 0x83, 0xd1, 0xf6, 0x76, 0x6f, 0x30, 0xa8, 0x2c, 0xa3, 0xff, 0x41, 0x79, 0xab,
	0xd3, 0xf5, 0x76, 0xfa, 0x0f, 0x46, 0xfd, 0x6e, 0x7f, 0xf8, 0xa8, 0x92, 0x43, 0x15, 0xb0, 0xa5,
	0x69, 0xb0, 0xd3, 0xdf, 0xdf, 0xef, 0x7c, 0xdd, 0xab, 0xe4, 0xd1, 0x1a, 0x54, 0xdc, 0xde, 0xbd,
	0xd1, 0x6e, 0xd7, 0x73, 0x7b, 0x0f, 0x46, 0xbd, 0xc1, 0xb0, 0xd7, 0xad, 0xac, 0xc8, 0xc2, 0xda,
	0xda, 0xdd, 0xdb, 0xed, 0x55, 0x0a, 0x5b, 0xfd, 0x97, 0x27, 0x35, 0xeb, 0xd5, 0x49, 0xcd, 0xfa,
	0xeb, 0xa4, 0x66, 0x3d, 0x7b, 0x5d, 0x5b, 0x7a, 0xf5, 0xba, 0xb6, 0xf4, 0xc7, 0xeb, 0xda, 0xd2,
	0xf7, 0xcd, 0x90, 0x8a, 0x83, 0xd9, 0xb8, 0xe1, 0xa7, 0x71, 0xd3, 0x27, 0x11, 0x61, 0x77, 0x12,
	0x22, 0x0e, 0x53, 0xf6, 0xa4, 0xc9, 0xc3, 0xe4, 0xce, 0xbc, 0xdd, 0x3c, 0x3a, 0xfd, 0x37, 0x92,
	0x77, 0x3a, 0x1f, 0x17, 0x14, 0x2d, 0x9f, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xcd, 0x3c,
	0x7e, 0x37, 0x09, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.SignerUpdateDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.SignerUpdateDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCbridge(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CbrConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CbrConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CbrConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainPairs) > 0 {
		for iNdEx := len(m.ChainPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.LpFee != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.LpFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxFeeAmount) > 0 {
		i -= len(m.MaxFeeAmount)
		copy(dAtA[i:], m.MaxFeeAmount)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.MaxFeeAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Decimal != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConstA != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.ConstA))
		i--
		dAtA[i] = 0x30
	}
	if m.Fee2To1 != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Fee2To1))
		i--
		dAtA[i] = 0x28
	}
	if m.Fee1To2 != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Fee1To2))
		i--
		dAtA[i] = 0x20
	}
	if m.Weight1 != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Weight1))
		i--
		dAtA[i] = 0x18
	}
	if m.Chid2 != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Chid2))
		i--
		dAtA[i] = 0x10
	}
	if m.Chid1 != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Chid1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OnChainEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnChainEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnChainEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Elog) > 0 {
		i -= len(m.Elog)
		copy(dAtA[i:], m.Elog)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Elog)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Evtype) > 0 {
		i -= len(m.Evtype)
		copy(dAtA[i:], m.Evtype)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Evtype)))
		i--
		dAtA[i] = 0x12
	}
	if m.Chainid != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Chainid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelayOnChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayOnChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayOnChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SrcTransferId) > 0 {
		i -= len(m.SrcTransferId)
		copy(dAtA[i:], m.SrcTransferId)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.SrcTransferId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DstChainId != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.DstChainId))
		i--
		dAtA[i] = 0x30
	}
	if m.SrcChainId != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawOnchain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawOnchain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawOnchain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Seqnum != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Seqnum))
		i--
		dAtA[i] = 0x10
	}
	if m.Chainid != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.Chainid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SortedSigners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortedSigners) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortedSigners) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddrAmt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddrAmt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddrAmt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amt) > 0 {
		i -= len(m.Amt)
		copy(dAtA[i:], m.Amt)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Amt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *XferRelay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XferRelay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XferRelay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SortedSigs) > 0 {
		for iNdEx := len(m.SortedSigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SortedSigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Relay) > 0 {
		i -= len(m.Relay)
		copy(dAtA[i:], m.Relay)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Relay)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XferId) > 0 {
		i -= len(m.XferId)
		copy(dAtA[i:], m.XferId)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.XferId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastReqTime != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.LastReqTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.SortedSigs) > 0 {
		for iNdEx := len(m.SortedSigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SortedSigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WdOnchain) > 0 {
		i -= len(m.WdOnchain)
		copy(dAtA[i:], m.WdOnchain)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.WdOnchain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddrSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddrSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddrSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainSigners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainSigners) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainSigners) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignersBytes) > 0 {
		i -= len(m.SignersBytes)
		copy(dAtA[i:], m.SignersBytes)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.SignersBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CurrSigners != nil {
		{
			size, err := m.CurrSigners.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintCbridge(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LatestSigners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestSigners) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestSigners) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdateTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintCbridge(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if len(m.SortedSigs) > 0 {
		for iNdEx := len(m.SortedSigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SortedSigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SignersBytes) > 0 {
		i -= len(m.SignersBytes)
		copy(dAtA[i:], m.SignersBytes)
		i = encodeVarintCbridge(dAtA, i, uint64(len(m.SignersBytes)))
		i--
		dAtA[i] = 0x12
	}
	if m.Signers != nil {
		{
			size, err := m.Signers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCbridge(dAtA []byte, offset int, v uint64) int {
	offset -= sovCbridge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.SignerUpdateDuration)
	n += 1 + l + sovCbridge(uint64(l))
	return n
}

func (m *CbrConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LpFee != 0 {
		n += 1 + sovCbridge(uint64(m.LpFee))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovCbridge(uint64(l))
		}
	}
	if len(m.ChainPairs) > 0 {
		for _, e := range m.ChainPairs {
			l = e.Size()
			n += 1 + l + sovCbridge(uint64(l))
		}
	}
	return n
}

func (m *ChainAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovCbridge(uint64(m.ChainId))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	if m.Decimal != 0 {
		n += 1 + sovCbridge(uint64(m.Decimal))
	}
	l = len(m.MaxFeeAmount)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *ChainPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chid1 != 0 {
		n += 1 + sovCbridge(uint64(m.Chid1))
	}
	if m.Chid2 != 0 {
		n += 1 + sovCbridge(uint64(m.Chid2))
	}
	if m.Weight1 != 0 {
		n += 1 + sovCbridge(uint64(m.Weight1))
	}
	if m.Fee1To2 != 0 {
		n += 1 + sovCbridge(uint64(m.Fee1To2))
	}
	if m.Fee2To1 != 0 {
		n += 1 + sovCbridge(uint64(m.Fee2To1))
	}
	if m.ConstA != 0 {
		n += 1 + sovCbridge(uint64(m.ConstA))
	}
	return n
}

func (m *OnChainEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chainid != 0 {
		n += 1 + sovCbridge(uint64(m.Chainid))
	}
	l = len(m.Evtype)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Elog)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *RelayOnChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	if m.SrcChainId != 0 {
		n += 1 + sovCbridge(uint64(m.SrcChainId))
	}
	if m.DstChainId != 0 {
		n += 1 + sovCbridge(uint64(m.DstChainId))
	}
	l = len(m.SrcTransferId)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *WithdrawOnchain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chainid != 0 {
		n += 1 + sovCbridge(uint64(m.Chainid))
	}
	if m.Seqnum != 0 {
		n += 1 + sovCbridge(uint64(m.Seqnum))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *SortedSigners) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for _, e := range m.Signers {
			l = e.Size()
			n += 1 + l + sovCbridge(uint64(l))
		}
	}
	return n
}

func (m *AddrAmt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Amt)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *XferRelay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Relay)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	if len(m.SortedSigs) > 0 {
		for _, e := range m.SortedSigs {
			l = e.Size()
			n += 1 + l + sovCbridge(uint64(l))
		}
	}
	return n
}

func (m *WithdrawDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WdOnchain)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	if len(m.SortedSigs) > 0 {
		for _, e := range m.SortedSigs {
			l = e.Size()
			n += 1 + l + sovCbridge(uint64(l))
		}
	}
	if m.Completed {
		n += 2
	}
	if m.LastReqTime != 0 {
		n += 1 + sovCbridge(uint64(m.LastReqTime))
	}
	l = len(m.XferId)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *AddrSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *ChainSigners) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovCbridge(uint64(m.ChainId))
	}
	if m.CurrSigners != nil {
		l = m.CurrSigners.Size()
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.SignersBytes)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	return n
}

func (m *LatestSigners) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Signers != nil {
		l = m.Signers.Size()
		n += 1 + l + sovCbridge(uint64(l))
	}
	l = len(m.SignersBytes)
	if l > 0 {
		n += 1 + l + sovCbridge(uint64(l))
	}
	if len(m.SortedSigs) > 0 {
		for _, e := range m.SortedSigs {
			l = e.Size()
			n += 1 + l + sovCbridge(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime)
	n += 1 + l + sovCbridge(uint64(l))
	return n
}

func sovCbridge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCbridge(x uint64) (n int) {
	return sovCbridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerUpdateDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.SignerUpdateDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CbrConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CbrConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CbrConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpFee", wireType)
			}
			m.LpFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LpFee |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &ChainAsset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainPairs = append(m.ChainPairs, &ChainPair{})
			if err := m.ChainPairs[len(m.ChainPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxFeeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chid1", wireType)
			}
			m.Chid1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chid1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chid2", wireType)
			}
			m.Chid2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chid2 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight1", wireType)
			}
			m.Weight1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight1 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee1To2", wireType)
			}
			m.Fee1To2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee1To2 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee2To1", wireType)
			}
			m.Fee2To1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee2To1 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstA", wireType)
			}
			m.ConstA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstA |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnChainEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnChainEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnChainEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chainid", wireType)
			}
			m.Chainid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chainid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elog", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elog = append(m.Elog[:0], dAtA[iNdEx:postIndex]...)
			if m.Elog == nil {
				m.Elog = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayOnChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayOnChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayOnChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = append(m.Receiver[:0], dAtA[iNdEx:postIndex]...)
			if m.Receiver == nil {
				m.Receiver = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount[:0], dAtA[iNdEx:postIndex]...)
			if m.Amount == nil {
				m.Amount = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainId", wireType)
			}
			m.DstChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTransferId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTransferId = append(m.SrcTransferId[:0], dAtA[iNdEx:postIndex]...)
			if m.SrcTransferId == nil {
				m.SrcTransferId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawOnchain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawOnchain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawOnchain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chainid", wireType)
			}
			m.Chainid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chainid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqnum", wireType)
			}
			m.Seqnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seqnum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = append(m.Receiver[:0], dAtA[iNdEx:postIndex]...)
			if m.Receiver == nil {
				m.Receiver = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount[:0], dAtA[iNdEx:postIndex]...)
			if m.Amount == nil {
				m.Amount = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortedSigners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortedSigners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortedSigners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, &AddrAmt{})
			if err := m.Signers[len(m.Signers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddrAmt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrAmt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrAmt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amt = append(m.Amt[:0], dAtA[iNdEx:postIndex]...)
			if m.Amt == nil {
				m.Amt = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XferRelay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XferRelay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XferRelay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relay", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relay = append(m.Relay[:0], dAtA[iNdEx:postIndex]...)
			if m.Relay == nil {
				m.Relay = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortedSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortedSigs = append(m.SortedSigs, &AddrSig{})
			if err := m.SortedSigs[len(m.SortedSigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WdOnchain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WdOnchain = append(m.WdOnchain[:0], dAtA[iNdEx:postIndex]...)
			if m.WdOnchain == nil {
				m.WdOnchain = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortedSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortedSigs = append(m.SortedSigs, &AddrSig{})
			if err := m.SortedSigs[len(m.SortedSigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReqTime", wireType)
			}
			m.LastReqTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReqTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XferId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XferId = append(m.XferId[:0], dAtA[iNdEx:postIndex]...)
			if m.XferId == nil {
				m.XferId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddrSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainSigners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainSigners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainSigners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrSigners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrSigners == nil {
				m.CurrSigners = &SortedSigners{}
			}
			if err := m.CurrSigners.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignersBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignersBytes = append(m.SignersBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SignersBytes == nil {
				m.SignersBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestSigners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestSigners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestSigners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signers == nil {
				m.Signers = &SortedSigners{}
			}
			if err := m.Signers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignersBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignersBytes = append(m.SignersBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SignersBytes == nil {
				m.SignersBytes = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortedSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortedSigs = append(m.SortedSigs, &AddrSig{})
			if err := m.SortedSigs[len(m.SortedSigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCbridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCbridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCbridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCbridge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCbridge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCbridge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCbridge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCbridge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCbridge = fmt.Errorf("proto: unexpected end of group")
)
