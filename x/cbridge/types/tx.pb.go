// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/cbridge/v1/tx.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgMultiAssetProposal struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *MsgMultiAssetProposal) Reset()         { *m = MsgMultiAssetProposal{} }
func (m *MsgMultiAssetProposal) String() string { return proto.CompactTextString(m) }
func (*MsgMultiAssetProposal) ProtoMessage()    {}
func (*MsgMultiAssetProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{0}
}
func (m *MsgMultiAssetProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMultiAssetProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMultiAssetProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMultiAssetProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMultiAssetProposal.Merge(m, src)
}
func (m *MsgMultiAssetProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgMultiAssetProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMultiAssetProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMultiAssetProposal proto.InternalMessageInfo

func (m *MsgMultiAssetProposal) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type MsgMultiAssetUpdates struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *MsgMultiAssetUpdates) Reset()         { *m = MsgMultiAssetUpdates{} }
func (m *MsgMultiAssetUpdates) String() string { return proto.CompactTextString(m) }
func (*MsgMultiAssetUpdates) ProtoMessage()    {}
func (*MsgMultiAssetUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{1}
}
func (m *MsgMultiAssetUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMultiAssetUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMultiAssetUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMultiAssetUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMultiAssetUpdates.Merge(m, src)
}
func (m *MsgMultiAssetUpdates) XXX_Size() int {
	return m.Size()
}
func (m *MsgMultiAssetUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMultiAssetUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMultiAssetUpdates proto.InternalMessageInfo

func (m *MsgMultiAssetUpdates) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type NewEvent struct {
	Chainid uint64    `protobuf:"varint,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Evtype  EventType `protobuf:"varint,2,opt,name=evtype,proto3,enum=sgn.cbridge.v1.EventType" json:"evtype,omitempty"`
	Elog    []byte    `protobuf:"bytes,3,opt,name=elog,proto3" json:"elog,omitempty"`
}

func (m *NewEvent) Reset()         { *m = NewEvent{} }
func (m *NewEvent) String() string { return proto.CompactTextString(m) }
func (*NewEvent) ProtoMessage()    {}
func (*NewEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{2}
}
func (m *NewEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewEvent.Merge(m, src)
}
func (m *NewEvent) XXX_Size() int {
	return m.Size()
}
func (m *NewEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_NewEvent.DiscardUnknown(m)
}

var xxx_messageInfo_NewEvent proto.InternalMessageInfo

func (m *NewEvent) GetChainid() uint64 {
	if m != nil {
		return m.Chainid
	}
	return 0
}

func (m *NewEvent) GetEvtype() EventType {
	if m != nil {
		return m.Evtype
	}
	return EventType_INVALID_EVENT
}

func (m *NewEvent) GetElog() []byte {
	if m != nil {
		return m.Elog
	}
	return nil
}

type MsgProposeUpdates struct {
	Events []*NewEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *MsgProposeUpdates) Reset()         { *m = MsgProposeUpdates{} }
func (m *MsgProposeUpdates) String() string { return proto.CompactTextString(m) }
func (*MsgProposeUpdates) ProtoMessage()    {}
func (*MsgProposeUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{3}
}
func (m *MsgProposeUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeUpdates.Merge(m, src)
}
func (m *MsgProposeUpdates) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeUpdates proto.InternalMessageInfo

func (m *MsgProposeUpdates) GetEvents() []*NewEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgMultiAssetProposal)(nil), "sgn.cbridge.v1.MsgMultiAssetProposal")
	proto.RegisterType((*MsgMultiAssetUpdates)(nil), "sgn.cbridge.v1.MsgMultiAssetUpdates")
	proto.RegisterType((*NewEvent)(nil), "sgn.cbridge.v1.NewEvent")
	proto.RegisterType((*MsgProposeUpdates)(nil), "sgn.cbridge.v1.MsgProposeUpdates")
}

func init() { proto.RegisterFile("sgn/cbridge/v1/tx.proto", fileDescriptor_f8bb6ecae18aabd7) }

var fileDescriptor_f8bb6ecae18aabd7 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4e, 0xc2, 0x30,
	0x18, 0xc7, 0x57, 0x21, 0x68, 0x8a, 0x21, 0x71, 0x41, 0x9d, 0xc4, 0x4c, 0xc2, 0x69, 0x17, 0x56,
	0x99, 0xbe, 0x80, 0x24, 0x1c, 0x4c, 0x9c, 0x21, 0x8b, 0x5e, 0xbc, 0x8d, 0xf1, 0xa5, 0x2c, 0x8c,
	0x76, 0x69, 0xcb, 0x80, 0xb7, 0xf0, 0xb1, 0x38, 0x72, 0xf4, 0x64, 0x0c, 0xbc, 0x88, 0x59, 0xd9,
	0x4c, 0xe0, 0xe8, 0xed, 0x6b, 0xff, 0xbf, 0xfc, 0xfa, 0x6f, 0x3e, 0x7c, 0x2d, 0x29, 0x23, 0xd1,
	0x48, 0xc4, 0x63, 0x0a, 0x24, 0xeb, 0x11, 0xb5, 0x74, 0x53, 0xc1, 0x15, 0x37, 0x1b, 0x92, 0x32,
	0xb7, 0x08, 0xdc, 0xac, 0xd7, 0xba, 0x3d, 0x02, 0xcb, 0x48, 0xd3, 0xad, 0x26, 0xe5, 0x94, 0xeb,
	0x91, 0xe4, 0xd3, 0xfe, 0xb6, 0xe3, 0xe3, 0x4b, 0x5f, 0x52, 0x7f, 0x9e, 0xa8, 0xf8, 0x49, 0x4a,
	0x50, 0x43, 0xc1, 0x53, 0x2e, 0xc3, 0xc4, 0x7c, 0xc4, 0xb5, 0x34, 0x14, 0xe1, 0x4c, 0x5a, 0xa8,
	0x8d, 0x9c, 0xba, 0x77, 0xe5, 0x1e, 0xbe, 0xe6, 0x0e, 0x75, 0xda, 0xaf, 0xae, 0xbf, 0xef, 0x8c,
	0xa0, 0x60, 0x3b, 0x2f, 0xb8, 0x79, 0xa0, 0x7b, 0x4f, 0xc7, 0xa1, 0x02, 0xf9, 0x4f, 0xdb, 0x14,
	0x9f, 0xbd, 0xc2, 0x62, 0x90, 0x01, 0x53, 0xa6, 0x85, 0x4f, 0xa3, 0x49, 0x18, 0xb3, 0x78, 0xac,
	0x15, 0xd5, 0xa0, 0x3c, 0x9a, 0x3d, 0x5c, 0x83, 0x4c, 0xad, 0x52, 0xb0, 0x4e, 0xda, 0xc8, 0x69,
	0x78, 0x37, 0xc7, 0x6e, 0x2d, 0x78, 0x5b, 0xa5, 0x10, 0x14, 0xa0, 0x69, 0xe2, 0x2a, 0x24, 0x9c,
	0x5a, 0x95, 0x36, 0x72, 0xce, 0x03, 0x3d, 0x77, 0x06, 0xf8, 0xc2, 0x97, 0x74, 0xff, 0x7f, 0x28,
	0x7b, 0xdf, 0xe7, 0x6e, 0x60, 0x2a, 0xef, 0x5d, 0x71, 0xea, 0x9e, 0x75, 0xec, 0x2e, 0xfb, 0x05,
	0x05, 0xd7, 0x7f, 0x5e, 0x6f, 0x6d, 0xb4, 0xd9, 0xda, 0xe8, 0x67, 0x6b, 0xa3, 0xcf, 0x9d, 0x6d,
	0x6c, 0x76, 0xb6, 0xf1, 0xb5, 0xb3, 0x8d, 0x0f, 0x42, 0x63, 0x35, 0x99, 0x8f, 0xdc, 0x88, 0xcf,
	0x48, 0x04, 0x09, 0x88, 0x2e, 0x03, 0xb5, 0xe0, 0x62, 0x4a, 0x24, 0x65, 0xdd, 0xcc, 0x23, 0xcb,
	0xbf, 0xe5, 0xe5, 0x25, 0xe5, 0xa8, 0xa6, 0x57, 0xf4, 0xf0, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x3e,
	0xf7, 0x55, 0xb7, 0x01, 0x02, 0x00, 0x00,
}

func (m *MsgMultiAssetProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMultiAssetProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMultiAssetProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgMultiAssetUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMultiAssetUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMultiAssetUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NewEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Elog) > 0 {
		i -= len(m.Elog)
		copy(dAtA[i:], m.Elog)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Elog)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Evtype != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Evtype))
		i--
		dAtA[i] = 0x10
	}
	if m.Chainid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Chainid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMultiAssetProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMultiAssetUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *NewEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chainid != 0 {
		n += 1 + sovTx(uint64(m.Chainid))
	}
	if m.Evtype != 0 {
		n += 1 + sovTx(uint64(m.Evtype))
	}
	l = len(m.Elog)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProposeUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMultiAssetProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMultiAssetProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMultiAssetProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMultiAssetUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMultiAssetUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMultiAssetUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chainid", wireType)
			}
			m.Chainid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chainid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evtype", wireType)
			}
			m.Evtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Evtype |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elog", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elog = append(m.Elog[:0], dAtA[iNdEx:postIndex]...)
			if m.Elog == nil {
				m.Elog = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &NewEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
