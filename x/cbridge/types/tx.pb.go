// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/cbridge/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SignDataType int32

const (
	SignDataType_INVALID  SignDataType = 0
	SignDataType_RELAY    SignDataType = 1
	SignDataType_WITHDRAW SignDataType = 2
	SignDataType_SIGNERS  SignDataType = 3
)

var SignDataType_name = map[int32]string{
	0: "INVALID",
	1: "RELAY",
	2: "WITHDRAW",
	3: "SIGNERS",
}

var SignDataType_value = map[string]int32{
	"INVALID":  0,
	"RELAY":    1,
	"WITHDRAW": 2,
	"SIGNERS":  3,
}

func (x SignDataType) String() string {
	return proto.EnumName(SignDataType_name, int32(x))
}

func (SignDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{0}
}

// WithdrawType enumerates the withdraw types.
type WithdrawType int32

const (
	RemoveLiquidity WithdrawType = 0
	RefundTransfer  WithdrawType = 1
	ClaimFeeShare   WithdrawType = 2
)

var WithdrawType_name = map[int32]string{
	0: "WITHDRAW_TYPE_REMOVE_LIQUIDITY",
	1: "WITHDRAW_TYPE_REFUND_TRANSFER",
	2: "WITHDRAW_TYPE_CLAIM_FEE_SHARE",
}

var WithdrawType_value = map[string]int32{
	"WITHDRAW_TYPE_REMOVE_LIQUIDITY": 0,
	"WITHDRAW_TYPE_REFUND_TRANSFER":  1,
	"WITHDRAW_TYPE_CLAIM_FEE_SHARE":  2,
}

func (x WithdrawType) String() string {
	return proto.EnumName(WithdrawType_name, int32(x))
}

func (WithdrawType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{1}
}

type ErrCode int32

const (
	ErrCode_UNDEFINED                ErrCode = 0
	ErrCode_INVALID_REQ              ErrCode = 1
	ErrCode_INVALID_SIG              ErrCode = 2
	ErrCode_INVALID_STATUS           ErrCode = 3
	ErrCode_NOT_FOUND                ErrCode = 4
	ErrCode_DUP_REQID                ErrCode = 5
	ErrCode_REQ_TOO_SOON             ErrCode = 6
	ErrCode_BAL_NOT_ENOUGH           ErrCode = 7
	ErrCode_XFER_NOT_REFUNDABLE      ErrCode = 10
	ErrCode_XFER_REFUND_STARTED      ErrCode = 11
	ErrCode_WD_INTERNAL_XFER_FAILURE ErrCode = 12
	ErrCode_WD_EXCEED_MAX_OUT_AMOUNT ErrCode = 13
)

var ErrCode_name = map[int32]string{
	0:  "UNDEFINED",
	1:  "INVALID_REQ",
	2:  "INVALID_SIG",
	3:  "INVALID_STATUS",
	4:  "NOT_FOUND",
	5:  "DUP_REQID",
	6:  "REQ_TOO_SOON",
	7:  "BAL_NOT_ENOUGH",
	10: "XFER_NOT_REFUNDABLE",
	11: "XFER_REFUND_STARTED",
	12: "WD_INTERNAL_XFER_FAILURE",
	13: "WD_EXCEED_MAX_OUT_AMOUNT",
}

var ErrCode_value = map[string]int32{
	"UNDEFINED":                0,
	"INVALID_REQ":              1,
	"INVALID_SIG":              2,
	"INVALID_STATUS":           3,
	"NOT_FOUND":                4,
	"DUP_REQID":                5,
	"REQ_TOO_SOON":             6,
	"BAL_NOT_ENOUGH":           7,
	"XFER_NOT_REFUNDABLE":      10,
	"XFER_REFUND_STARTED":      11,
	"WD_INTERNAL_XFER_FAILURE": 12,
	"WD_EXCEED_MAX_OUT_AMOUNT": 13,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{2}
}

type MsgSendMySig struct {
	Datatype SignDataType `protobuf:"varint,1,opt,name=datatype,proto3,enum=sgn.cbridge.v1.SignDataType" json:"datatype,omitempty"`
	Data     []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	MySigs   []*MySig     `protobuf:"bytes,3,rep,name=my_sigs,json=mySigs,proto3" json:"my_sigs,omitempty"`
	Creator  string       `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgSendMySig) Reset()         { *m = MsgSendMySig{} }
func (m *MsgSendMySig) String() string { return proto.CompactTextString(m) }
func (*MsgSendMySig) ProtoMessage()    {}
func (*MsgSendMySig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{0}
}
func (m *MsgSendMySig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendMySig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendMySig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendMySig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendMySig.Merge(m, src)
}
func (m *MsgSendMySig) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendMySig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendMySig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendMySig proto.InternalMessageInfo

func (m *MsgSendMySig) GetDatatype() SignDataType {
	if m != nil {
		return m.Datatype
	}
	return SignDataType_INVALID
}

func (m *MsgSendMySig) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MsgSendMySig) GetMySigs() []*MySig {
	if m != nil {
		return m.MySigs
	}
	return nil
}

func (m *MsgSendMySig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MySig struct {
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Sig     []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *MySig) Reset()         { *m = MySig{} }
func (m *MySig) String() string { return proto.CompactTextString(m) }
func (*MySig) ProtoMessage()    {}
func (*MySig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{1}
}
func (m *MySig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MySig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MySig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySig.Merge(m, src)
}
func (m *MySig) XXX_Size() int {
	return m.Size()
}
func (m *MySig) XXX_DiscardUnknown() {
	xxx_messageInfo_MySig.DiscardUnknown(m)
}

var xxx_messageInfo_MySig proto.InternalMessageInfo

func (m *MySig) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MySig) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type MsgSendMySigResp struct {
}

func (m *MsgSendMySigResp) Reset()         { *m = MsgSendMySigResp{} }
func (m *MsgSendMySigResp) String() string { return proto.CompactTextString(m) }
func (*MsgSendMySigResp) ProtoMessage()    {}
func (*MsgSendMySigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{2}
}
func (m *MsgSendMySigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendMySigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendMySigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendMySigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendMySigResp.Merge(m, src)
}
func (m *MsgSendMySigResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendMySigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendMySigResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendMySigResp proto.InternalMessageInfo

type WithdrawLq struct {
	FromChainId uint64 `protobuf:"varint,1,opt,name=from_chain_id,json=fromChainId,proto3" json:"from_chain_id,omitempty"`
	TokenAddr   string `protobuf:"bytes,2,opt,name=token_addr,json=tokenAddr,proto3" json:"token_addr,omitempty"`
	Ratio       uint32 `protobuf:"varint,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
	MaxSlippage uint32 `protobuf:"varint,4,opt,name=max_slippage,json=maxSlippage,proto3" json:"max_slippage,omitempty"`
}

func (m *WithdrawLq) Reset()         { *m = WithdrawLq{} }
func (m *WithdrawLq) String() string { return proto.CompactTextString(m) }
func (*WithdrawLq) ProtoMessage()    {}
func (*WithdrawLq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{3}
}
func (m *WithdrawLq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawLq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawLq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawLq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawLq.Merge(m, src)
}
func (m *WithdrawLq) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawLq) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawLq.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawLq proto.InternalMessageInfo

func (m *WithdrawLq) GetFromChainId() uint64 {
	if m != nil {
		return m.FromChainId
	}
	return 0
}

func (m *WithdrawLq) GetTokenAddr() string {
	if m != nil {
		return m.TokenAddr
	}
	return ""
}

func (m *WithdrawLq) GetRatio() uint32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *WithdrawLq) GetMaxSlippage() uint32 {
	if m != nil {
		return m.MaxSlippage
	}
	return 0
}

type WithdrawReq struct {
	// if set, user refund src transfer id
	XferId string `protobuf:"bytes,1,opt,name=xfer_id,json=xferId,proto3" json:"xfer_id,omitempty"`
	// lp withdraw, only set if xfer_id is empty
	Withdraws   []*WithdrawLq `protobuf:"bytes,2,rep,name=withdraws,proto3" json:"withdraws,omitempty"`
	ExitChainId uint64        `protobuf:"varint,3,opt,name=exit_chain_id,json=exitChainId,proto3" json:"exit_chain_id,omitempty"`
	// per user unique request id. generated by client, duplicated req_id will be ignored
	ReqId        uint64       `protobuf:"varint,4,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	WithdrawType WithdrawType `protobuf:"varint,5,opt,name=withdraw_type,json=withdrawType,proto3,enum=sgn.cbridge.v1.WithdrawType" json:"withdraw_type,omitempty"`
}

func (m *WithdrawReq) Reset()         { *m = WithdrawReq{} }
func (m *WithdrawReq) String() string { return proto.CompactTextString(m) }
func (*WithdrawReq) ProtoMessage()    {}
func (*WithdrawReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{4}
}
func (m *WithdrawReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawReq.Merge(m, src)
}
func (m *WithdrawReq) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawReq.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawReq proto.InternalMessageInfo

func (m *WithdrawReq) GetXferId() string {
	if m != nil {
		return m.XferId
	}
	return ""
}

func (m *WithdrawReq) GetWithdraws() []*WithdrawLq {
	if m != nil {
		return m.Withdraws
	}
	return nil
}

func (m *WithdrawReq) GetExitChainId() uint64 {
	if m != nil {
		return m.ExitChainId
	}
	return 0
}

func (m *WithdrawReq) GetReqId() uint64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *WithdrawReq) GetWithdrawType() WithdrawType {
	if m != nil {
		return m.WithdrawType
	}
	return RemoveLiquidity
}

type MsgInitWithdraw struct {
	WithdrawReq []byte `protobuf:"bytes,1,opt,name=withdraw_req,json=withdrawReq,proto3" json:"withdraw_req,omitempty"`
	UserSig     []byte `protobuf:"bytes,2,opt,name=user_sig,json=userSig,proto3" json:"user_sig,omitempty"`
	Creator     string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgInitWithdraw) Reset()         { *m = MsgInitWithdraw{} }
func (m *MsgInitWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgInitWithdraw) ProtoMessage()    {}
func (*MsgInitWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{5}
}
func (m *MsgInitWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitWithdraw.Merge(m, src)
}
func (m *MsgInitWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitWithdraw proto.InternalMessageInfo

func (m *MsgInitWithdraw) GetWithdrawReq() []byte {
	if m != nil {
		return m.WithdrawReq
	}
	return nil
}

func (m *MsgInitWithdraw) GetUserSig() []byte {
	if m != nil {
		return m.UserSig
	}
	return nil
}

func (m *MsgInitWithdraw) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgInitWithdrawResp struct {
}

func (m *MsgInitWithdrawResp) Reset()         { *m = MsgInitWithdrawResp{} }
func (m *MsgInitWithdrawResp) String() string { return proto.CompactTextString(m) }
func (*MsgInitWithdrawResp) ProtoMessage()    {}
func (*MsgInitWithdrawResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{6}
}
func (m *MsgInitWithdrawResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitWithdrawResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitWithdrawResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitWithdrawResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitWithdrawResp.Merge(m, src)
}
func (m *MsgInitWithdrawResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitWithdrawResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitWithdrawResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitWithdrawResp proto.InternalMessageInfo

// Next tag: 6
type MsgSignAgain struct {
	DataType SignDataType `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=sgn.cbridge.v1.SignDataType" json:"data_type,omitempty"`
	// for withdraw
	UserAddr []byte `protobuf:"bytes,1,opt,name=user_addr,json=userAddr,proto3" json:"user_addr,omitempty"`
	ReqId    uint64 `protobuf:"varint,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	// for relay
	XferId  []byte `protobuf:"bytes,5,opt,name=xfer_id,json=xferId,proto3" json:"xfer_id,omitempty"`
	Creator string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgSignAgain) Reset()         { *m = MsgSignAgain{} }
func (m *MsgSignAgain) String() string { return proto.CompactTextString(m) }
func (*MsgSignAgain) ProtoMessage()    {}
func (*MsgSignAgain) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{7}
}
func (m *MsgSignAgain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignAgain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignAgain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignAgain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignAgain.Merge(m, src)
}
func (m *MsgSignAgain) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignAgain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignAgain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignAgain proto.InternalMessageInfo

func (m *MsgSignAgain) GetDataType() SignDataType {
	if m != nil {
		return m.DataType
	}
	return SignDataType_INVALID
}

func (m *MsgSignAgain) GetUserAddr() []byte {
	if m != nil {
		return m.UserAddr
	}
	return nil
}

func (m *MsgSignAgain) GetReqId() uint64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *MsgSignAgain) GetXferId() []byte {
	if m != nil {
		return m.XferId
	}
	return nil
}

func (m *MsgSignAgain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgSignAgainResp struct {
}

func (m *MsgSignAgainResp) Reset()         { *m = MsgSignAgainResp{} }
func (m *MsgSignAgainResp) String() string { return proto.CompactTextString(m) }
func (*MsgSignAgainResp) ProtoMessage()    {}
func (*MsgSignAgainResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{8}
}
func (m *MsgSignAgainResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignAgainResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignAgainResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignAgainResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignAgainResp.Merge(m, src)
}
func (m *MsgSignAgainResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignAgainResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignAgainResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignAgainResp proto.InternalMessageInfo

type MsgUpdateLatestSigners struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgUpdateLatestSigners) Reset()         { *m = MsgUpdateLatestSigners{} }
func (m *MsgUpdateLatestSigners) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLatestSigners) ProtoMessage()    {}
func (*MsgUpdateLatestSigners) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{9}
}
func (m *MsgUpdateLatestSigners) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLatestSigners) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLatestSigners.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLatestSigners) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLatestSigners.Merge(m, src)
}
func (m *MsgUpdateLatestSigners) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLatestSigners) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLatestSigners.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLatestSigners proto.InternalMessageInfo

func (m *MsgUpdateLatestSigners) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgUpdateLatestSignersResp struct {
}

func (m *MsgUpdateLatestSignersResp) Reset()         { *m = MsgUpdateLatestSignersResp{} }
func (m *MsgUpdateLatestSignersResp) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLatestSignersResp) ProtoMessage()    {}
func (*MsgUpdateLatestSignersResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{10}
}
func (m *MsgUpdateLatestSignersResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLatestSignersResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLatestSignersResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLatestSignersResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLatestSignersResp.Merge(m, src)
}
func (m *MsgUpdateLatestSignersResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLatestSignersResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLatestSignersResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLatestSignersResp proto.InternalMessageInfo

type ErrMsg struct {
	Code ErrCode `protobuf:"varint,1,opt,name=code,proto3,enum=sgn.cbridge.v1.ErrCode" json:"code,omitempty"`
	Desc string  `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *ErrMsg) Reset()         { *m = ErrMsg{} }
func (m *ErrMsg) String() string { return proto.CompactTextString(m) }
func (*ErrMsg) ProtoMessage()    {}
func (*ErrMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8bb6ecae18aabd7, []int{11}
}
func (m *ErrMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrMsg.Merge(m, src)
}
func (m *ErrMsg) XXX_Size() int {
	return m.Size()
}
func (m *ErrMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ErrMsg proto.InternalMessageInfo

func (m *ErrMsg) GetCode() ErrCode {
	if m != nil {
		return m.Code
	}
	return ErrCode_UNDEFINED
}

func (m *ErrMsg) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func init() {
	proto.RegisterEnum("sgn.cbridge.v1.SignDataType", SignDataType_name, SignDataType_value)
	proto.RegisterEnum("sgn.cbridge.v1.WithdrawType", WithdrawType_name, WithdrawType_value)
	proto.RegisterEnum("sgn.cbridge.v1.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterType((*MsgSendMySig)(nil), "sgn.cbridge.v1.MsgSendMySig")
	proto.RegisterType((*MySig)(nil), "sgn.cbridge.v1.MySig")
	proto.RegisterType((*MsgSendMySigResp)(nil), "sgn.cbridge.v1.MsgSendMySigResp")
	proto.RegisterType((*WithdrawLq)(nil), "sgn.cbridge.v1.WithdrawLq")
	proto.RegisterType((*WithdrawReq)(nil), "sgn.cbridge.v1.WithdrawReq")
	proto.RegisterType((*MsgInitWithdraw)(nil), "sgn.cbridge.v1.MsgInitWithdraw")
	proto.RegisterType((*MsgInitWithdrawResp)(nil), "sgn.cbridge.v1.MsgInitWithdrawResp")
	proto.RegisterType((*MsgSignAgain)(nil), "sgn.cbridge.v1.MsgSignAgain")
	proto.RegisterType((*MsgSignAgainResp)(nil), "sgn.cbridge.v1.MsgSignAgainResp")
	proto.RegisterType((*MsgUpdateLatestSigners)(nil), "sgn.cbridge.v1.MsgUpdateLatestSigners")
	proto.RegisterType((*MsgUpdateLatestSignersResp)(nil), "sgn.cbridge.v1.MsgUpdateLatestSignersResp")
	proto.RegisterType((*ErrMsg)(nil), "sgn.cbridge.v1.ErrMsg")
}

func init() { proto.RegisterFile("sgn/cbridge/v1/tx.proto", fileDescriptor_f8bb6ecae18aabd7) }

var fileDescriptor_f8bb6ecae18aabd7 = []byte{
	// 1085 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0xf5, 0x6b, 0x8d, 0x24, 0x87, 0x5d, 0x27, 0xb5, 0xa2, 0x3a, 0xaa, 0xaa, 0x02, 0x85,
	0xe1, 0x22, 0x12, 0xe2, 0xa6, 0x68, 0x7a, 0x64, 0xcc, 0x55, 0x42, 0x54, 0xa2, 0x92, 0x25, 0x15,
	0x27, 0xbd, 0x10, 0x8c, 0xb8, 0xa6, 0x89, 0x44, 0xa4, 0xb4, 0xa4, 0x6d, 0xf9, 0xd6, 0x63, 0x90,
	0x53, 0x5f, 0x20, 0xa7, 0x02, 0x3d, 0xf7, 0xdc, 0x27, 0xe8, 0x31, 0xc7, 0x9e, 0x8a, 0xc0, 0x7e,
	0x91, 0x62, 0x57, 0xa4, 0xfe, 0xaa, 0xb6, 0x39, 0x69, 0x7e, 0xbf, 0x9d, 0x99, 0xfd, 0x86, 0x2b,
	0xd8, 0x0d, 0x5d, 0xbf, 0x3d, 0x7c, 0xc9, 0x3c, 0xc7, 0xa5, 0xed, 0xf3, 0x7b, 0xed, 0x68, 0xda,
	0x1a, 0xb3, 0x20, 0x0a, 0xd0, 0x76, 0xe8, 0xfa, 0xad, 0xd8, 0xd1, 0x3a, 0xbf, 0x57, 0xbb, 0xe9,
	0x06, 0x6e, 0x20, 0x5c, 0x6d, 0x2e, 0xcd, 0xa2, 0x6a, 0x7b, 0x6b, 0xe9, 0x49, 0x82, 0xf0, 0x36,
	0x7f, 0x95, 0xa0, 0xdc, 0x0b, 0x5d, 0x83, 0xfa, 0x4e, 0xef, 0xd2, 0xf0, 0x5c, 0xf4, 0x00, 0xb6,
	0x1c, 0x3b, 0xb2, 0xa3, 0xcb, 0x31, 0xad, 0x4a, 0x0d, 0x69, 0x7f, 0xfb, 0x70, 0xaf, 0xb5, 0x7a,
	0x4e, 0xcb, 0xf0, 0x5c, 0x5f, 0xb5, 0x23, 0xdb, 0xbc, 0x1c, 0x53, 0x32, 0x8f, 0x46, 0x08, 0xb2,
	0x5c, 0xae, 0xa6, 0x1b, 0xd2, 0x7e, 0x99, 0x08, 0x19, 0xb5, 0xa0, 0x30, 0xba, 0xb4, 0x42, 0xcf,
	0x0d, 0xab, 0x99, 0x46, 0x66, 0xbf, 0x74, 0x78, 0x6b, 0x1d, 0x4c, 0x9c, 0x4a, 0xf2, 0x23, 0xfe,
	0x13, 0xa2, 0x2a, 0x14, 0x86, 0x8c, 0xda, 0x51, 0xc0, 0xaa, 0xd9, 0x86, 0xb4, 0x5f, 0x24, 0x89,
	0xda, 0xbc, 0x0f, 0xb9, 0x59, 0x81, 0xb7, 0x61, 0x6b, 0x78, 0x6a, 0x7b, 0xbe, 0xe5, 0x39, 0xa2,
	0xc0, 0x2c, 0x29, 0x08, 0x5d, 0x73, 0x90, 0x0c, 0x99, 0xd0, 0x73, 0xe3, 0x02, 0xb8, 0xd8, 0x44,
	0x20, 0x2f, 0x77, 0x47, 0x68, 0x38, 0x6e, 0xbe, 0x91, 0x00, 0x8e, 0xbd, 0xe8, 0xd4, 0x61, 0xf6,
	0x45, 0x77, 0x82, 0x9a, 0x50, 0x39, 0x61, 0xc1, 0xc8, 0x5a, 0x03, 0x2d, 0x71, 0xe3, 0x51, 0x0c,
	0x7c, 0x07, 0x20, 0x0a, 0x5e, 0x51, 0xdf, 0xb2, 0x1d, 0x87, 0x09, 0xfc, 0x22, 0x29, 0x0a, 0x8b,
	0xe2, 0x38, 0x0c, 0xdd, 0x84, 0x1c, 0xb3, 0x23, 0x2f, 0xa8, 0x66, 0x1a, 0xd2, 0x7e, 0x85, 0xcc,
	0x14, 0xf4, 0x05, 0x94, 0x47, 0xf6, 0xd4, 0x0a, 0x5f, 0x7b, 0xe3, 0xb1, 0xed, 0x52, 0xd1, 0x50,
	0x85, 0x94, 0x46, 0xf6, 0xd4, 0x88, 0x4d, 0xcd, 0xbf, 0x24, 0x28, 0x25, 0xa5, 0x10, 0x3a, 0x41,
	0xbb, 0x50, 0x98, 0x9e, 0x50, 0x96, 0x54, 0x51, 0x24, 0x79, 0xae, 0x6a, 0x0e, 0x7a, 0x00, 0xc5,
	0x8b, 0x38, 0x2e, 0xac, 0xa6, 0xc5, 0x24, 0x6b, 0xeb, 0x93, 0x5c, 0xf4, 0x44, 0x16, 0xc1, 0xbc,
	0x3d, 0x3a, 0xf5, 0xa2, 0x45, 0x7b, 0x99, 0x59, 0x7b, 0xdc, 0x98, 0xb4, 0x77, 0x0b, 0xf2, 0x8c,
	0x4e, 0xb8, 0x33, 0x2b, 0x9c, 0x39, 0x46, 0x27, 0x9a, 0x83, 0x14, 0xa8, 0x24, 0x38, 0x96, 0xe0,
	0x43, 0x6e, 0x33, 0x1f, 0x92, 0x83, 0x05, 0x1f, 0xca, 0x17, 0x4b, 0x5a, 0xd3, 0x83, 0x1b, 0xbd,
	0xd0, 0xd5, 0x7c, 0x2f, 0x4a, 0x82, 0xf8, 0x58, 0xe6, 0xa8, 0x8c, 0x4e, 0x44, 0xa3, 0x65, 0x52,
	0xba, 0x58, 0x1a, 0xc3, 0x6d, 0xd8, 0x3a, 0x0b, 0x29, 0xb3, 0x16, 0x97, 0x59, 0xe0, 0x3a, 0xbf,
	0xfd, 0x25, 0x82, 0x64, 0x56, 0x09, 0x72, 0x0b, 0x76, 0xd6, 0x8e, 0x12, 0xb7, 0xfd, 0x5b, 0x4c,
	0x70, 0xcf, 0xf5, 0x15, 0xd7, 0xf6, 0x7c, 0xf4, 0x3d, 0x14, 0x39, 0x35, 0x67, 0x1d, 0x65, 0x3f,
	0x96, 0xe1, 0x5c, 0x42, 0x9f, 0x41, 0x51, 0xd4, 0x25, 0x58, 0x30, 0xab, 0x5b, 0x14, 0x2a, 0x48,
	0xb0, 0x18, 0x62, 0x7a, 0x79, 0x88, 0x4b, 0x57, 0x9a, 0x13, 0x19, 0xc9, 0x95, 0xfe, 0x7b, 0x27,
	0x31, 0x69, 0x93, 0x8a, 0x45, 0x1b, 0x87, 0xf0, 0x69, 0x2f, 0x74, 0x07, 0x63, 0xc7, 0x8e, 0x68,
	0xd7, 0x8e, 0x68, 0x18, 0x71, 0x3f, 0x65, 0x2b, 0x2b, 0x23, 0xad, 0xe2, 0xec, 0x41, 0x6d, 0x73,
	0x8e, 0x40, 0xd4, 0x20, 0x8f, 0x19, 0xeb, 0x85, 0x2e, 0xfa, 0x1a, 0xb2, 0xc3, 0xc0, 0x49, 0xd6,
	0x7d, 0x77, 0x7d, 0x18, 0x98, 0xb1, 0xa3, 0xc0, 0xa1, 0x44, 0x04, 0x89, 0x2d, 0xa7, 0xe1, 0x30,
	0x5e, 0x02, 0x21, 0x1f, 0x28, 0x50, 0x5e, 0x9e, 0x18, 0x2a, 0x41, 0x41, 0xd3, 0x9f, 0x29, 0x5d,
	0x4d, 0x95, 0x53, 0xa8, 0x08, 0x39, 0x82, 0xbb, 0xca, 0x0b, 0x59, 0x42, 0x65, 0xd8, 0x3a, 0xd6,
	0xcc, 0xc7, 0x2a, 0x51, 0x8e, 0xe5, 0x34, 0x8f, 0x32, 0xb4, 0x47, 0x3a, 0x26, 0x86, 0x9c, 0x39,
	0xf8, 0x5d, 0x82, 0xf2, 0x32, 0x8f, 0xd0, 0x77, 0x50, 0x4f, 0x62, 0x2d, 0xf3, 0xc5, 0x13, 0x6c,
	0x11, 0xdc, 0xeb, 0x3f, 0xc3, 0x56, 0x57, 0x7b, 0x3a, 0xd0, 0x54, 0xcd, 0x7c, 0x21, 0xa7, 0x6a,
	0x3b, 0x6f, 0xdf, 0x35, 0x6e, 0x10, 0x3a, 0x0a, 0xce, 0x69, 0xd7, 0x9b, 0x9c, 0x79, 0x8e, 0x17,
	0x5d, 0xa2, 0x6f, 0xe1, 0xce, 0x7a, 0x62, 0x67, 0xa0, 0xab, 0x96, 0x49, 0x14, 0xdd, 0xe8, 0x60,
	0x22, 0x4b, 0x35, 0xf4, 0xf6, 0x5d, 0x63, 0x9b, 0xd0, 0x93, 0x33, 0xdf, 0x31, 0x99, 0xed, 0x87,
	0x27, 0x94, 0xa1, 0xfb, 0xeb, 0x69, 0x47, 0x5d, 0x45, 0xeb, 0x59, 0x1d, 0x8c, 0x2d, 0xe3, 0xb1,
	0x42, 0xb0, 0x9c, 0xae, 0x7d, 0xf2, 0xf6, 0x5d, 0xa3, 0x72, 0xf4, 0xda, 0xf6, 0x46, 0x1d, 0x4a,
	0x8d, 0x53, 0x9b, 0xd1, 0x5a, 0xf6, 0xcd, 0x2f, 0xf5, 0xd4, 0xc1, 0x4f, 0x69, 0x28, 0xc4, 0x53,
	0x42, 0x15, 0x28, 0x0e, 0x74, 0x15, 0x77, 0x34, 0x1d, 0xf3, 0xee, 0x6f, 0x40, 0x29, 0x1e, 0x85,
	0x45, 0xf0, 0x53, 0x59, 0x5a, 0x36, 0x18, 0xda, 0x23, 0x39, 0x8d, 0x10, 0x6c, 0xcf, 0x0d, 0xa6,
	0x62, 0x0e, 0x0c, 0x39, 0xc3, 0x41, 0xf4, 0xbe, 0x69, 0x75, 0xfa, 0x03, 0x5d, 0x95, 0xb3, 0x5c,
	0x55, 0x07, 0x4f, 0x38, 0x80, 0xa6, 0xca, 0x39, 0x24, 0x43, 0x99, 0xe0, 0xa7, 0x96, 0xd9, 0xef,
	0x5b, 0x46, 0xbf, 0xaf, 0xcb, 0x79, 0x8e, 0xf1, 0x50, 0xe9, 0x5a, 0x3c, 0x07, 0xeb, 0xfd, 0xc1,
	0xa3, 0xc7, 0x72, 0x01, 0xed, 0xc2, 0xce, 0xf3, 0x0e, 0x26, 0xc2, 0x38, 0x1b, 0x81, 0xf2, 0xb0,
	0x8b, 0x65, 0x98, 0x3b, 0xe2, 0xb9, 0x18, 0xa6, 0x42, 0x4c, 0xac, 0xca, 0x25, 0xb4, 0x07, 0xd5,
	0x63, 0xd5, 0xd2, 0x74, 0x13, 0x13, 0x5d, 0xe9, 0x5a, 0x22, 0xa8, 0xa3, 0x68, 0xdd, 0x01, 0xc1,
	0x72, 0x39, 0xf6, 0xe2, 0xe7, 0x47, 0x18, 0xab, 0x56, 0x4f, 0x79, 0x6e, 0xf5, 0x07, 0xa6, 0xa5,
	0xf4, 0xfa, 0x03, 0xdd, 0x94, 0x2b, 0x87, 0x1f, 0xd2, 0x90, 0xe1, 0x5c, 0x32, 0xa1, 0xbc, 0xb2,
	0xed, 0x9f, 0xff, 0xe3, 0x7b, 0xbf, 0xba, 0xa3, 0xb5, 0x2f, 0xff, 0x27, 0x80, 0x73, 0x15, 0xfd,
	0x00, 0xc5, 0xc5, 0x02, 0xef, 0x6d, 0xc8, 0x98, 0x7b, 0x6b, 0x8d, 0xff, 0xf2, 0xce, 0xc1, 0xe6,
	0xcf, 0xdd, 0x46, 0xb0, 0xc4, 0xbb, 0x19, 0x6c, 0xf9, 0x31, 0x41, 0x1e, 0xec, 0x6c, 0x5a, 0xca,
	0xaf, 0x36, 0x24, 0x6e, 0x88, 0xab, 0x1d, 0x7c, 0x5c, 0x1c, 0x3f, 0xea, 0xa1, 0xf6, 0xc7, 0x55,
	0x5d, 0x7a, 0x7f, 0x55, 0x97, 0x3e, 0x5c, 0xd5, 0xa5, 0x9f, 0xaf, 0xeb, 0xa9, 0xf7, 0xd7, 0xf5,
	0xd4, 0x9f, 0xd7, 0xf5, 0xd4, 0x8f, 0x6d, 0xd7, 0x8b, 0x4e, 0xcf, 0x5e, 0xb6, 0x86, 0xc1, 0xa8,
	0x3d, 0xa4, 0xaf, 0x29, 0xbb, 0xeb, 0xd3, 0xe8, 0x22, 0x60, 0xaf, 0xda, 0xa1, 0xeb, 0xdf, 0x3d,
	0x3f, 0x6c, 0x4f, 0xe7, 0x7f, 0x00, 0xf8, 0x57, 0x2f, 0x7c, 0x99, 0x17, 0x8f, 0xff, 0x37, 0x7f,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x50, 0x4f, 0x42, 0x61, 0x5b, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// called by gateway to start a withdraw flow
	// async call, client will query by addr and reqid for status
	// if req is invalid, an error w/ errcode will be returned
	InitWithdraw(ctx context.Context, in *MsgInitWithdraw, opts ...grpc.CallOption) (*MsgInitWithdrawResp, error)
	// user can request to sign a previous withdraw again
	SignAgain(ctx context.Context, in *MsgSignAgain, opts ...grpc.CallOption) (*MsgSignAgainResp, error)
	// sgn validator send its sig, so the msg can be later submitted onchain
	SendMySig(ctx context.Context, in *MsgSendMySig, opts ...grpc.CallOption) (*MsgSendMySigResp, error)
	UpdateLatestSigners(ctx context.Context, in *MsgUpdateLatestSigners, opts ...grpc.CallOption) (*MsgUpdateLatestSignersResp, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) InitWithdraw(ctx context.Context, in *MsgInitWithdraw, opts ...grpc.CallOption) (*MsgInitWithdrawResp, error) {
	out := new(MsgInitWithdrawResp)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Msg/InitWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignAgain(ctx context.Context, in *MsgSignAgain, opts ...grpc.CallOption) (*MsgSignAgainResp, error) {
	out := new(MsgSignAgainResp)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Msg/SignAgain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendMySig(ctx context.Context, in *MsgSendMySig, opts ...grpc.CallOption) (*MsgSendMySigResp, error) {
	out := new(MsgSendMySigResp)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Msg/SendMySig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateLatestSigners(ctx context.Context, in *MsgUpdateLatestSigners, opts ...grpc.CallOption) (*MsgUpdateLatestSignersResp, error) {
	out := new(MsgUpdateLatestSignersResp)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Msg/UpdateLatestSigners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// called by gateway to start a withdraw flow
	// async call, client will query by addr and reqid for status
	// if req is invalid, an error w/ errcode will be returned
	InitWithdraw(context.Context, *MsgInitWithdraw) (*MsgInitWithdrawResp, error)
	// user can request to sign a previous withdraw again
	SignAgain(context.Context, *MsgSignAgain) (*MsgSignAgainResp, error)
	// sgn validator send its sig, so the msg can be later submitted onchain
	SendMySig(context.Context, *MsgSendMySig) (*MsgSendMySigResp, error)
	UpdateLatestSigners(context.Context, *MsgUpdateLatestSigners) (*MsgUpdateLatestSignersResp, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) InitWithdraw(ctx context.Context, req *MsgInitWithdraw) (*MsgInitWithdrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitWithdraw not implemented")
}
func (*UnimplementedMsgServer) SignAgain(ctx context.Context, req *MsgSignAgain) (*MsgSignAgainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignAgain not implemented")
}
func (*UnimplementedMsgServer) SendMySig(ctx context.Context, req *MsgSendMySig) (*MsgSendMySigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMySig not implemented")
}
func (*UnimplementedMsgServer) UpdateLatestSigners(ctx context.Context, req *MsgUpdateLatestSigners) (*MsgUpdateLatestSignersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLatestSigners not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_InitWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Msg/InitWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitWithdraw(ctx, req.(*MsgInitWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignAgain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignAgain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignAgain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Msg/SignAgain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignAgain(ctx, req.(*MsgSignAgain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendMySig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendMySig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendMySig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Msg/SendMySig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendMySig(ctx, req.(*MsgSendMySig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateLatestSigners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateLatestSigners)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateLatestSigners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Msg/UpdateLatestSigners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateLatestSigners(ctx, req.(*MsgUpdateLatestSigners))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgn.cbridge.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitWithdraw",
			Handler:    _Msg_InitWithdraw_Handler,
		},
		{
			MethodName: "SignAgain",
			Handler:    _Msg_SignAgain_Handler,
		},
		{
			MethodName: "SendMySig",
			Handler:    _Msg_SendMySig_Handler,
		},
		{
			MethodName: "UpdateLatestSigners",
			Handler:    _Msg_UpdateLatestSigners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgn/cbridge/v1/tx.proto",
}

func (m *MsgSendMySig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendMySig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendMySig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MySigs) > 0 {
		for iNdEx := len(m.MySigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MySigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Datatype != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Datatype))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MySig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendMySigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendMySigResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendMySigResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *WithdrawLq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawLq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawLq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSlippage != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxSlippage))
		i--
		dAtA[i] = 0x20
	}
	if m.Ratio != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenAddr) > 0 {
		i -= len(m.TokenAddr)
		copy(dAtA[i:], m.TokenAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.FromChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FromChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WithdrawType))
		i--
		dAtA[i] = 0x28
	}
	if m.ReqId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReqId))
		i--
		dAtA[i] = 0x20
	}
	if m.ExitChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExitChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Withdraws) > 0 {
		for iNdEx := len(m.Withdraws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdraws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.XferId) > 0 {
		i -= len(m.XferId)
		copy(dAtA[i:], m.XferId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.XferId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserSig) > 0 {
		i -= len(m.UserSig)
		copy(dAtA[i:], m.UserSig)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserSig)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithdrawReq) > 0 {
		i -= len(m.WithdrawReq)
		copy(dAtA[i:], m.WithdrawReq)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawReq)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitWithdrawResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitWithdrawResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitWithdrawResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSignAgain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignAgain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignAgain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XferId) > 0 {
		i -= len(m.XferId)
		copy(dAtA[i:], m.XferId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.XferId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DataType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReqId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReqId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddr) > 0 {
		i -= len(m.UserAddr)
		copy(dAtA[i:], m.UserAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignAgainResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignAgainResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignAgainResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLatestSigners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLatestSigners) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLatestSigners) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLatestSignersResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLatestSignersResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLatestSignersResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ErrMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendMySig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Datatype != 0 {
		n += 1 + sovTx(uint64(m.Datatype))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MySigs) > 0 {
		for _, e := range m.MySigs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MySig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendMySigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *WithdrawLq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromChainId != 0 {
		n += 1 + sovTx(uint64(m.FromChainId))
	}
	l = len(m.TokenAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Ratio != 0 {
		n += 1 + sovTx(uint64(m.Ratio))
	}
	if m.MaxSlippage != 0 {
		n += 1 + sovTx(uint64(m.MaxSlippage))
	}
	return n
}

func (m *WithdrawReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XferId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Withdraws) > 0 {
		for _, e := range m.Withdraws {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ExitChainId != 0 {
		n += 1 + sovTx(uint64(m.ExitChainId))
	}
	if m.ReqId != 0 {
		n += 1 + sovTx(uint64(m.ReqId))
	}
	if m.WithdrawType != 0 {
		n += 1 + sovTx(uint64(m.WithdrawType))
	}
	return n
}

func (m *MsgInitWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawReq)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserSig)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInitWithdrawResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSignAgain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ReqId != 0 {
		n += 1 + sovTx(uint64(m.ReqId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovTx(uint64(m.DataType))
	}
	l = len(m.XferId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignAgainResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateLatestSigners) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateLatestSignersResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ErrMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTx(uint64(m.Code))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendMySig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendMySig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendMySig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datatype", wireType)
			}
			m.Datatype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Datatype |= SignDataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MySigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MySigs = append(m.MySigs, &MySig{})
			if err := m.MySigs[len(m.MySigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendMySigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendMySigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendMySigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawLq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawLq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawLq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChainId", wireType)
			}
			m.FromChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSlippage", wireType)
			}
			m.MaxSlippage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSlippage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdraws = append(m.Withdraws, &WithdrawLq{})
			if err := m.Withdraws[len(m.Withdraws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitChainId", wireType)
			}
			m.ExitChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawType", wireType)
			}
			m.WithdrawType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawType |= WithdrawType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawReq", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawReq = append(m.WithdrawReq[:0], dAtA[iNdEx:postIndex]...)
			if m.WithdrawReq == nil {
				m.WithdrawReq = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserSig = append(m.UserSig[:0], dAtA[iNdEx:postIndex]...)
			if m.UserSig == nil {
				m.UserSig = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitWithdrawResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitWithdrawResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitWithdrawResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignAgain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignAgain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignAgain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddr = append(m.UserAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.UserAddr == nil {
				m.UserAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= SignDataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XferId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XferId = append(m.XferId[:0], dAtA[iNdEx:postIndex]...)
			if m.XferId == nil {
				m.XferId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignAgainResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignAgainResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignAgainResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLatestSigners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLatestSigners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLatestSigners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLatestSignersResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLatestSignersResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLatestSignersResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
