# include Makefile.ledger

VERSION := $(shell echo $(shell git describe --tags --always) | sed 's/^v//')
COMMIT := $(shell git log -1 --format='%H')
TMVERSION := $(shell go list -m github.com/tendermint/tendermint | sed 's:.* ::')

ifeq ($(WITH_CLEVELDB),yes)
  build_tags += gcc cleveldb
endif
build_tags += $(BUILD_TAGS)
build_tags := $(strip $(build_tags))

whitespace :=
whitespace += $(whitespace)
comma := ,
build_tags_comma_sep := $(subst $(whitespace),$(comma),$(build_tags))

ldflags = -X github.com/cosmos/cosmos-sdk/version.Name=sgn \
		  -X github.com/cosmos/cosmos-sdk/version.AppName=sgnd \
		  -X github.com/cosmos/cosmos-sdk/version.Version=$(VERSION) \
		  -X github.com/cosmos/cosmos-sdk/version.Commit=$(COMMIT) \
		  -X "github.com/cosmos/cosmos-sdk/version.BuildTags=$(build_tags_comma_sep)" \
		  -X github.com/tendermint/tendermint/version.TMCoreSemVer=$(TMVERSION)

ifeq ($(WITH_CLEVELDB),yes)
  ldflags += -X github.com/cosmos/cosmos-sdk/types.DBBackend=cleveldb
endif
ldflags += $(LDFLAGS)
ldflags := $(strip $(ldflags))

BUILD_FLAGS := -tags "$(build_tags)" -ldflags '$(ldflags)'

ENVS :=
BUILDX :=
BUILDX_FLAGS :=
ifeq ($(shell arch)$(shell uname),arm64Darwin)
# on Apple Silicon Macs, Homebrew's install location is changed to /opt/homebrew which causes leveldb that installed via Homebrew
# unable to find header files. manually specifying the include and lib location to work around this issue
	ENVS += CGO_CFLAGS="-I/opt/homebrew/Cellar/leveldb/1.23/include" CGO_LDFLAGS="-L/opt/homebrew/Cellar/leveldb/1.23/lib"
# forces docker to use the buildx builder and build on amd64 to work around the fact geth doesn't have a released arm64 binary on apk
	BUILDX += buildx
	BUILDX_FLAGS += --platform linux/amd64
endif

.PHONY: all
all: lint install

.PHONY: install
install: go.sum
	$(ENVS) go install $(BUILD_FLAGS) ./cmd/sgnd

.PHONY: install-executor
install-executor: go.sum
	go build -o $(HOME)/go/bin/executor ./executor/main

.PHONY: install-gateway
install-gateway: go.sum
	go build -o $(HOME)/go/bin/gateway ./gateway/main/main.go

generate-docs: go.sum
	go run ./cmd/gendocs ./docs
	find ./docs/sgnd -type f | xargs sed -i '' 's|'"$$HOME"'|\$$HOME|g'
	find ./docs/sgnd -type f | xargs sed -i '' 's|'"$$HOSTNAME"'|\$$HOSTNAME|g'
	find ./docs/sgnd -type f | xargs sed -i '' 's|'"The node\'s public IP.*"'|'"The node\'s public IP"'|g'
	find ./docs/sgnd -type f | xargs sed -i '' 's|'"Auto generated by spf13/cobra.*"'|Auto generated by spf13/cobra|g'

go.sum: go.mod
	@echo "--> Ensure dependencies have not been modified"
	GO111MODULE=on go mod verify

lint:
	golangci-lint run
	find . -name '*.go' -type f -not -path "./vendor*" -not -path "*.git*" | xargs gofmt -d -s
	go mod verify

copy-test-data:
	cp -r test/data/.sgnd ~/.sgnd
	cp -r test/keys ~/.sgnd/keys

remove-test-data:
	rm -rf ~/.sgnd

.PHONY: update-test-data
update-test-data: remove-test-data copy-test-data

copy-test-config:
	cp test/data/.sgnd/config/genesis.json ~/.sgnd/config/genesis.json

################################ Docker related ################################
.PHONY: build
build: go.sum
	mkdir -p ./build
	go build -o ./build/sgnd ./cmd/sgnd

.PHONY: build-linux
build-linux: go.sum
	LEDGER_ENABLED=false GOOS=linux GOARCH=amd64 $(MAKE) build

.PHONY: build-dockers
build-dockers: build-node build-geth

.PHONY: build-geth
build-geth:
	DOCKER_BUILDKIT=1 docker $(BUILDX) build $(BUILDX_FLAGS) --tag celer-network/geth networks/local/geth
	# $(MAKE) -C networks/local

.PHONY: build-node
build-node:
	DOCKER_BUILDKIT=1 docker $(BUILDX) build $(BUILDX_FLAGS) --build-arg GH_TOKEN=$(GH_TOKEN) --tag celer-network/sgnnode . \

.PHONY: build-executor
build-executor:
	docker build -f executor/Dockerfile --tag celer-network/executor .

# Prepare docker environment for multinode testing
.PHONY: prepare-docker-env
prepare-docker-env: build-dockers build-linux

.PHONY: localnet-start-crdb
localnet-start-crdb:
	DOCKER_BUILDKIT=1 docker build --tag celer-network/crdb networks/local/db
	docker-compose stop crdb
	docker-compose rm -f crdb
	docker-compose up -d crdb

# Run geth
.PHONY: localnet-start-geth
localnet-start-geth:
	docker-compose up -d geth1 geth2 geth3

.PHONY: localnet-stop-geth
localnet-stop-geth:
	docker-compose stop geth1 geth2 geth3
	docker-compose rm -f geth1 geth2 geth3

# Run a 3-node sgn testnet locally
.PHONY: localnet-up-nodes
localnet-up-nodes: localnet-down-nodes
	docker-compose up -d sgnnode0 sgnnode1 sgnnode2 sgnnode3

# Stop sgn testnet
.PHONY: localnet-down-nodes
localnet-down-nodes:
	docker-compose stop sgnnode0 sgnnode1 sgnnode2 sgnnode3
	docker-compose rm -f sgnnode0 sgnnode1 sgnnode2 sgnnode3

# Stop geth, gateway, and sgn testnet
.PHONY: localnet-down
localnet-down:
	docker-compose down

# Prepare geth data
.PHONY: prepare-geth-data
prepare-geth-data:
	rm -rf ./docker-volumes/geth*
	mkdir -p ./docker-volumes
	cp -r ./test/multi-node-data/geth* ./docker-volumes/

# Prepare sgn nodes' data
.PHONY: prepare-sgn-data
prepare-sgn-data:
	rm -rf ./docker-volumes/node*
	mkdir -p ./docker-volumes
	cp -r ./test/multi-node-data/node* ./docker-volumes/

.PHONY: prepare-executor-data
prepare-executor-data:
	rm -rf ./docker-volumes/executor
	mkdir -p ./docker-volumes
	cp -r ./test/multi-node-data/executor ./docker-volumes/executor

# Prepare sgn nodes' data with sudo
.PHONY: prepare-sgn-data-sudo
prepare-sgn-data-sudo:
	sudo rm -rf ./docker-volumes/node*
	mkdir -p ./docker-volumes
	cp -r ./test/multi-node-data/node* ./docker-volumes/

# Make a copy of config files for local manual test
.PHONY: copy-manual-test-data
copy-manual-test-data:
	rm -rf ./test/e2e/manual/data/node*
	cp -r ./docker-volumes/node* ./test/e2e/manual/data/
	rm -f ./test/e2e/manual/data/node*/sgnd/*.log
	rm -rf ./test/e2e/manual/data/node*/sgnd/data

# Prepare gateway data
.PHONY: prepare-gateway-data
prepare-gateway-data:
	rm -rf ./docker-volumes/gateway
	mkdir -p ./docker-volumes
	cp -r ./test/multi-node-data/gateway ./docker-volumes/gateway

# start gateway server
.PHONY: start-gateway
start-gateway:
	docker-compose up -d gateway

# Clean test data
.PHONY: clean-test
clean-test:
	rm -rf ./docker-volumes ./build

# Run flow
.PHONY: localnet-start-flow
localnet-start-flow:
	docker-compose up -d flow

.PHONY: localnet-stop-flow
localnet-stop-flow:
	docker-compose stop flow
	docker-compose rm -f flow

.PHONY: localnet-restart-flow
localnet-restart-flow: localnet-stop-flow localnet-start-flow