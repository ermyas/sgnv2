// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/explorer/v1/explorer.proto

package explorer

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErrCode int32

const (
	ErrCode_ERROR_CODE_UNDEFINED          ErrCode = 0
	ErrCode_ERROR_CODE_INVALID_TIME_PARAM ErrCode = 1
)

var ErrCode_name = map[int32]string{
	0: "ERROR_CODE_UNDEFINED",
	1: "ERROR_CODE_INVALID_TIME_PARAM",
}

var ErrCode_value = map[string]int32{
	"ERROR_CODE_UNDEFINED":          0,
	"ERROR_CODE_INVALID_TIME_PARAM": 1,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{0}
}

type GetTotalStatsRequest struct {
}

func (m *GetTotalStatsRequest) Reset()         { *m = GetTotalStatsRequest{} }
func (m *GetTotalStatsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTotalStatsRequest) ProtoMessage()    {}
func (*GetTotalStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{0}
}
func (m *GetTotalStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalStatsRequest.Merge(m, src)
}
func (m *GetTotalStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalStatsRequest proto.InternalMessageInfo

type GetTotalStatsResponse struct {
	Err                           *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	TotalTransactionVolume        float64 `protobuf:"fixed64,2,opt,name=total_transaction_volume,json=totalTransactionVolume,proto3" json:"total_transaction_volume,omitempty"`
	TotalTransactionCount         uint64  `protobuf:"varint,3,opt,name=total_transaction_count,json=totalTransactionCount,proto3" json:"total_transaction_count,omitempty"`
	Last_24TotalTransactionVolume float64 `protobuf:"fixed64,4,opt,name=last_24_total_transaction_volume,json=last24TotalTransactionVolume,proto3" json:"last_24_total_transaction_volume,omitempty"`
	Last_24TotalTransactionCount  uint64  `protobuf:"varint,5,opt,name=last_24_total_transaction_count,json=last24TotalTransactionCount,proto3" json:"last_24_total_transaction_count,omitempty"`
	TotalLiquidity                float64 `protobuf:"fixed64,6,opt,name=total_liquidity,json=totalLiquidity,proto3" json:"total_liquidity,omitempty"`
	UniqueAddress                 uint64  `protobuf:"varint,7,opt,name=unique_address,json=uniqueAddress,proto3" json:"unique_address,omitempty"`
}

func (m *GetTotalStatsResponse) Reset()         { *m = GetTotalStatsResponse{} }
func (m *GetTotalStatsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTotalStatsResponse) ProtoMessage()    {}
func (*GetTotalStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{1}
}
func (m *GetTotalStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalStatsResponse.Merge(m, src)
}
func (m *GetTotalStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalStatsResponse proto.InternalMessageInfo

func (m *GetTotalStatsResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetTotalStatsResponse) GetTotalTransactionVolume() float64 {
	if m != nil {
		return m.TotalTransactionVolume
	}
	return 0
}

func (m *GetTotalStatsResponse) GetTotalTransactionCount() uint64 {
	if m != nil {
		return m.TotalTransactionCount
	}
	return 0
}

func (m *GetTotalStatsResponse) GetLast_24TotalTransactionVolume() float64 {
	if m != nil {
		return m.Last_24TotalTransactionVolume
	}
	return 0
}

func (m *GetTotalStatsResponse) GetLast_24TotalTransactionCount() uint64 {
	if m != nil {
		return m.Last_24TotalTransactionCount
	}
	return 0
}

func (m *GetTotalStatsResponse) GetTotalLiquidity() float64 {
	if m != nil {
		return m.TotalLiquidity
	}
	return 0
}

func (m *GetTotalStatsResponse) GetUniqueAddress() uint64 {
	if m != nil {
		return m.UniqueAddress
	}
	return 0
}

type GetDailyTotalLiquidityRequest struct {
	Begin uint64 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *GetDailyTotalLiquidityRequest) Reset()         { *m = GetDailyTotalLiquidityRequest{} }
func (m *GetDailyTotalLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*GetDailyTotalLiquidityRequest) ProtoMessage()    {}
func (*GetDailyTotalLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{2}
}
func (m *GetDailyTotalLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDailyTotalLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDailyTotalLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDailyTotalLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDailyTotalLiquidityRequest.Merge(m, src)
}
func (m *GetDailyTotalLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDailyTotalLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDailyTotalLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDailyTotalLiquidityRequest proto.InternalMessageInfo

func (m *GetDailyTotalLiquidityRequest) GetBegin() uint64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *GetDailyTotalLiquidityRequest) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

type GetDailyTotalLiquidityResponse struct {
	Err            *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	DailyLiquidity []*DailyTotalLiquidity `protobuf:"bytes,2,rep,name=daily_liquidity,json=dailyLiquidity,proto3" json:"daily_liquidity,omitempty"`
}

func (m *GetDailyTotalLiquidityResponse) Reset()         { *m = GetDailyTotalLiquidityResponse{} }
func (m *GetDailyTotalLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*GetDailyTotalLiquidityResponse) ProtoMessage()    {}
func (*GetDailyTotalLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{3}
}
func (m *GetDailyTotalLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDailyTotalLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDailyTotalLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDailyTotalLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDailyTotalLiquidityResponse.Merge(m, src)
}
func (m *GetDailyTotalLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDailyTotalLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDailyTotalLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDailyTotalLiquidityResponse proto.InternalMessageInfo

func (m *GetDailyTotalLiquidityResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetDailyTotalLiquidityResponse) GetDailyLiquidity() []*DailyTotalLiquidity {
	if m != nil {
		return m.DailyLiquidity
	}
	return nil
}

type DailyTotalLiquidity struct {
	Time           uint64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	TotalLiquidity float64 `protobuf:"fixed64,2,opt,name=total_liquidity,json=totalLiquidity,proto3" json:"total_liquidity,omitempty"`
}

func (m *DailyTotalLiquidity) Reset()         { *m = DailyTotalLiquidity{} }
func (m *DailyTotalLiquidity) String() string { return proto.CompactTextString(m) }
func (*DailyTotalLiquidity) ProtoMessage()    {}
func (*DailyTotalLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{4}
}
func (m *DailyTotalLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DailyTotalLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DailyTotalLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DailyTotalLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DailyTotalLiquidity.Merge(m, src)
}
func (m *DailyTotalLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *DailyTotalLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_DailyTotalLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_DailyTotalLiquidity proto.InternalMessageInfo

func (m *DailyTotalLiquidity) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DailyTotalLiquidity) GetTotalLiquidity() float64 {
	if m != nil {
		return m.TotalLiquidity
	}
	return 0
}

type GetDailyTransactionCountRequest struct {
	Begin uint64 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *GetDailyTransactionCountRequest) Reset()         { *m = GetDailyTransactionCountRequest{} }
func (m *GetDailyTransactionCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetDailyTransactionCountRequest) ProtoMessage()    {}
func (*GetDailyTransactionCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{5}
}
func (m *GetDailyTransactionCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDailyTransactionCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDailyTransactionCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDailyTransactionCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDailyTransactionCountRequest.Merge(m, src)
}
func (m *GetDailyTransactionCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDailyTransactionCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDailyTransactionCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDailyTransactionCountRequest proto.InternalMessageInfo

func (m *GetDailyTransactionCountRequest) GetBegin() uint64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *GetDailyTransactionCountRequest) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

type GetDailyTransactionCountResponse struct {
	Err                   *ErrMsg                  `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	DailyTransactionCount []*DailyTransactionCount `protobuf:"bytes,2,rep,name=daily_transaction_count,json=dailyTransactionCount,proto3" json:"daily_transaction_count,omitempty"`
}

func (m *GetDailyTransactionCountResponse) Reset()         { *m = GetDailyTransactionCountResponse{} }
func (m *GetDailyTransactionCountResponse) String() string { return proto.CompactTextString(m) }
func (*GetDailyTransactionCountResponse) ProtoMessage()    {}
func (*GetDailyTransactionCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{6}
}
func (m *GetDailyTransactionCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDailyTransactionCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDailyTransactionCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDailyTransactionCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDailyTransactionCountResponse.Merge(m, src)
}
func (m *GetDailyTransactionCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDailyTransactionCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDailyTransactionCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDailyTransactionCountResponse proto.InternalMessageInfo

func (m *GetDailyTransactionCountResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetDailyTransactionCountResponse) GetDailyTransactionCount() []*DailyTransactionCount {
	if m != nil {
		return m.DailyTransactionCount
	}
	return nil
}

type DailyTransactionCount struct {
	Time             uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	TransactionCount uint64 `protobuf:"varint,2,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
}

func (m *DailyTransactionCount) Reset()         { *m = DailyTransactionCount{} }
func (m *DailyTransactionCount) String() string { return proto.CompactTextString(m) }
func (*DailyTransactionCount) ProtoMessage()    {}
func (*DailyTransactionCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{7}
}
func (m *DailyTransactionCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DailyTransactionCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DailyTransactionCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DailyTransactionCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DailyTransactionCount.Merge(m, src)
}
func (m *DailyTransactionCount) XXX_Size() int {
	return m.Size()
}
func (m *DailyTransactionCount) XXX_DiscardUnknown() {
	xxx_messageInfo_DailyTransactionCount.DiscardUnknown(m)
}

var xxx_messageInfo_DailyTransactionCount proto.InternalMessageInfo

func (m *DailyTransactionCount) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DailyTransactionCount) GetTransactionCount() uint64 {
	if m != nil {
		return m.TransactionCount
	}
	return 0
}

type GetDailyTransactionVolumeRequest struct {
	Begin uint64 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *GetDailyTransactionVolumeRequest) Reset()         { *m = GetDailyTransactionVolumeRequest{} }
func (m *GetDailyTransactionVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*GetDailyTransactionVolumeRequest) ProtoMessage()    {}
func (*GetDailyTransactionVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{8}
}
func (m *GetDailyTransactionVolumeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDailyTransactionVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDailyTransactionVolumeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDailyTransactionVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDailyTransactionVolumeRequest.Merge(m, src)
}
func (m *GetDailyTransactionVolumeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDailyTransactionVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDailyTransactionVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDailyTransactionVolumeRequest proto.InternalMessageInfo

func (m *GetDailyTransactionVolumeRequest) GetBegin() uint64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *GetDailyTransactionVolumeRequest) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

type GetDailyTransactionVolumeResponse struct {
	Err                    *ErrMsg                   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	DailyTransactionVolume []*DailyTransactionVolume `protobuf:"bytes,2,rep,name=daily_transaction_volume,json=dailyTransactionVolume,proto3" json:"daily_transaction_volume,omitempty"`
}

func (m *GetDailyTransactionVolumeResponse) Reset()         { *m = GetDailyTransactionVolumeResponse{} }
func (m *GetDailyTransactionVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*GetDailyTransactionVolumeResponse) ProtoMessage()    {}
func (*GetDailyTransactionVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{9}
}
func (m *GetDailyTransactionVolumeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDailyTransactionVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDailyTransactionVolumeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDailyTransactionVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDailyTransactionVolumeResponse.Merge(m, src)
}
func (m *GetDailyTransactionVolumeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDailyTransactionVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDailyTransactionVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDailyTransactionVolumeResponse proto.InternalMessageInfo

func (m *GetDailyTransactionVolumeResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetDailyTransactionVolumeResponse) GetDailyTransactionVolume() []*DailyTransactionVolume {
	if m != nil {
		return m.DailyTransactionVolume
	}
	return nil
}

type DailyTransactionVolume struct {
	Time                   uint64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	DailyTransactionVolume float64 `protobuf:"fixed64,2,opt,name=daily_transaction_volume,json=dailyTransactionVolume,proto3" json:"daily_transaction_volume,omitempty"`
}

func (m *DailyTransactionVolume) Reset()         { *m = DailyTransactionVolume{} }
func (m *DailyTransactionVolume) String() string { return proto.CompactTextString(m) }
func (*DailyTransactionVolume) ProtoMessage()    {}
func (*DailyTransactionVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{10}
}
func (m *DailyTransactionVolume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DailyTransactionVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DailyTransactionVolume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DailyTransactionVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DailyTransactionVolume.Merge(m, src)
}
func (m *DailyTransactionVolume) XXX_Size() int {
	return m.Size()
}
func (m *DailyTransactionVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_DailyTransactionVolume.DiscardUnknown(m)
}

var xxx_messageInfo_DailyTransactionVolume proto.InternalMessageInfo

func (m *DailyTransactionVolume) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DailyTransactionVolume) GetDailyTransactionVolume() float64 {
	if m != nil {
		return m.DailyTransactionVolume
	}
	return 0
}

type ErrMsg struct {
	Code ErrCode `protobuf:"varint,1,opt,name=code,proto3,enum=sgn.explorer.v1.ErrCode" json:"code,omitempty"`
	Msg  string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ErrMsg) Reset()         { *m = ErrMsg{} }
func (m *ErrMsg) String() string { return proto.CompactTextString(m) }
func (*ErrMsg) ProtoMessage()    {}
func (*ErrMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb97c8f2ee70abf, []int{11}
}
func (m *ErrMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrMsg.Merge(m, src)
}
func (m *ErrMsg) XXX_Size() int {
	return m.Size()
}
func (m *ErrMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ErrMsg proto.InternalMessageInfo

func (m *ErrMsg) GetCode() ErrCode {
	if m != nil {
		return m.Code
	}
	return ErrCode_ERROR_CODE_UNDEFINED
}

func (m *ErrMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterEnum("sgn.explorer.v1.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterType((*GetTotalStatsRequest)(nil), "sgn.explorer.v1.GetTotalStatsRequest")
	proto.RegisterType((*GetTotalStatsResponse)(nil), "sgn.explorer.v1.GetTotalStatsResponse")
	proto.RegisterType((*GetDailyTotalLiquidityRequest)(nil), "sgn.explorer.v1.GetDailyTotalLiquidityRequest")
	proto.RegisterType((*GetDailyTotalLiquidityResponse)(nil), "sgn.explorer.v1.GetDailyTotalLiquidityResponse")
	proto.RegisterType((*DailyTotalLiquidity)(nil), "sgn.explorer.v1.DailyTotalLiquidity")
	proto.RegisterType((*GetDailyTransactionCountRequest)(nil), "sgn.explorer.v1.GetDailyTransactionCountRequest")
	proto.RegisterType((*GetDailyTransactionCountResponse)(nil), "sgn.explorer.v1.GetDailyTransactionCountResponse")
	proto.RegisterType((*DailyTransactionCount)(nil), "sgn.explorer.v1.DailyTransactionCount")
	proto.RegisterType((*GetDailyTransactionVolumeRequest)(nil), "sgn.explorer.v1.GetDailyTransactionVolumeRequest")
	proto.RegisterType((*GetDailyTransactionVolumeResponse)(nil), "sgn.explorer.v1.GetDailyTransactionVolumeResponse")
	proto.RegisterType((*DailyTransactionVolume)(nil), "sgn.explorer.v1.DailyTransactionVolume")
	proto.RegisterType((*ErrMsg)(nil), "sgn.explorer.v1.ErrMsg")
}

func init() { proto.RegisterFile("sgn/explorer/v1/explorer.proto", fileDescriptor_dcb97c8f2ee70abf) }

var fileDescriptor_dcb97c8f2ee70abf = []byte{
	// 724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x53, 0xd3, 0x4e,
	0x18, 0x6e, 0x68, 0x81, 0xdf, 0xef, 0x65, 0x28, 0x75, 0xa5, 0x25, 0x56, 0x09, 0x25, 0x23, 0x50,
	0xff, 0xd0, 0x4a, 0x64, 0x1c, 0xae, 0x85, 0x16, 0xac, 0x43, 0xc1, 0x89, 0x95, 0x71, 0x3c, 0x90,
	0x09, 0xcd, 0x1a, 0x33, 0xa6, 0x09, 0x64, 0x37, 0x55, 0x4e, 0xce, 0xf8, 0x09, 0x1c, 0x8f, 0x7e,
	0x07, 0x0f, 0x7e, 0x0b, 0x8f, 0x1c, 0x3d, 0x3a, 0x70, 0xf4, 0x4b, 0x38, 0xd9, 0xc4, 0x0a, 0xed,
	0x06, 0xc8, 0x6d, 0xf3, 0xbe, 0xcf, 0xfb, 0x3c, 0xef, 0x3e, 0x9b, 0x7d, 0x13, 0x90, 0x88, 0xe9,
	0x54, 0xf1, 0x87, 0x43, 0xdb, 0xf5, 0xb0, 0x57, 0xed, 0xad, 0xf4, 0xd7, 0x95, 0x43, 0xcf, 0xa5,
	0x2e, 0x9a, 0x22, 0xa6, 0x53, 0xe9, 0xc7, 0x7a, 0x2b, 0x72, 0x01, 0xa6, 0xb7, 0x30, 0x6d, 0xbb,
	0x54, 0xb7, 0x5f, 0x50, 0x9d, 0x12, 0x15, 0x1f, 0xf9, 0x98, 0x50, 0xf9, 0x4b, 0x1a, 0xf2, 0x03,
	0x09, 0x72, 0xe8, 0x3a, 0x04, 0xa3, 0x7b, 0x90, 0xc6, 0x9e, 0x27, 0x0a, 0x25, 0xa1, 0x3c, 0xa1,
	0xcc, 0x54, 0x06, 0x08, 0x2b, 0x0d, 0xcf, 0x6b, 0x11, 0x53, 0x0d, 0x30, 0x68, 0x0d, 0x44, 0x1a,
	0x10, 0x68, 0xd4, 0xd3, 0x1d, 0xa2, 0x77, 0xa8, 0xe5, 0x3a, 0x5a, 0xcf, 0xb5, 0xfd, 0x2e, 0x16,
	0x47, 0x4a, 0x42, 0x59, 0x50, 0x0b, 0x2c, 0xdf, 0xfe, 0x97, 0xde, 0x63, 0x59, 0xf4, 0x04, 0x66,
	0x86, 0x2b, 0x3b, 0xae, 0xef, 0x50, 0x31, 0x5d, 0x12, 0xca, 0x19, 0x35, 0x3f, 0x58, 0xb8, 0x11,
	0x24, 0xd1, 0x26, 0x94, 0x6c, 0x9d, 0x50, 0x4d, 0x59, 0xd5, 0x62, 0x95, 0x33, 0x4c, 0xf9, 0x4e,
	0x80, 0x53, 0x56, 0xdb, 0x7c, 0xfd, 0x3a, 0xcc, 0xc5, 0xf3, 0x84, 0x7d, 0x8c, 0xb2, 0x3e, 0x6e,
	0xf3, 0x69, 0xc2, 0x6e, 0x96, 0x60, 0x2a, 0xac, 0xb6, 0xad, 0x23, 0xdf, 0x32, 0x2c, 0x7a, 0x2c,
	0x8e, 0x31, 0xf1, 0x2c, 0x0b, 0x6f, 0xff, 0x8d, 0xa2, 0x05, 0xc8, 0xfa, 0x8e, 0x75, 0xe4, 0x63,
	0x4d, 0x37, 0x0c, 0x0f, 0x13, 0x22, 0x8e, 0x33, 0xf6, 0xc9, 0x30, 0x5a, 0x0b, 0x83, 0xf2, 0x16,
	0xcc, 0x6e, 0x61, 0x5a, 0xd7, 0x2d, 0xfb, 0xb8, 0x7d, 0x81, 0x20, 0x3a, 0x35, 0x34, 0x0d, 0xa3,
	0x07, 0xd8, 0xb4, 0x1c, 0x76, 0x3a, 0x19, 0x35, 0x7c, 0x40, 0x39, 0x48, 0x63, 0xc7, 0x60, 0x8e,
	0x67, 0xd4, 0x60, 0x29, 0x7f, 0x15, 0x40, 0x8a, 0x63, 0x4a, 0x7e, 0xcc, 0x2d, 0x98, 0x32, 0x02,
	0xa6, 0x73, 0xdb, 0x1c, 0x29, 0xa5, 0xcb, 0x13, 0xca, 0xdd, 0xa1, 0x32, 0x9e, 0x62, 0x96, 0x15,
	0xf7, 0x9f, 0x65, 0x15, 0x6e, 0x72, 0x60, 0x08, 0x41, 0x86, 0x5a, 0x5d, 0x1c, 0x6d, 0x8d, 0xad,
	0x79, 0x06, 0x8f, 0xf0, 0x0c, 0x96, 0x9b, 0x30, 0xd7, 0xdf, 0xef, 0xc0, 0x29, 0x25, 0xf5, 0xee,
	0x9b, 0x00, 0xa5, 0x78, 0xae, 0xe4, 0xee, 0xed, 0xc3, 0x4c, 0xe8, 0xde, 0xf0, 0x2b, 0x16, 0xba,
	0xb8, 0x18, 0xe3, 0xe2, 0xa0, 0x76, 0xde, 0xe0, 0x85, 0xe5, 0x57, 0x90, 0xe7, 0xe2, 0xb9, 0x86,
	0x3e, 0x80, 0x1b, 0xbc, 0x36, 0x02, 0x40, 0x8e, 0x0e, 0x32, 0x3f, 0xe3, 0x1a, 0x11, 0xde, 0xa0,
	0xa4, 0xae, 0x7e, 0x17, 0x60, 0xfe, 0x12, 0xb2, 0xe4, 0xb6, 0xea, 0x20, 0x0e, 0xdb, 0xda, 0x9f,
	0x3d, 0x81, 0xaf, 0x4b, 0x57, 0xfa, 0x1a, 0xa9, 0x17, 0x0c, 0x6e, 0x5c, 0x7e, 0x03, 0x05, 0x7e,
	0x05, 0xd7, 0xda, 0xb5, 0x4b, 0x1b, 0x62, 0xc3, 0x30, 0x46, 0xe7, 0x29, 0x8c, 0x85, 0x3b, 0x43,
	0x0f, 0x21, 0xd3, 0x71, 0x8d, 0x90, 0x37, 0xab, 0x88, 0x3c, 0x03, 0x36, 0x5c, 0x03, 0xab, 0x0c,
	0x15, 0xb8, 0xdc, 0x25, 0x26, 0x23, 0xff, 0x5f, 0x0d, 0x96, 0xf7, 0x37, 0x61, 0x3c, 0x82, 0x20,
	0x11, 0xa6, 0x1b, 0xaa, 0xba, 0xab, 0x6a, 0x1b, 0xbb, 0xf5, 0x86, 0xf6, 0x72, 0xa7, 0xde, 0xd8,
	0x6c, 0xee, 0x34, 0xea, 0xb9, 0x14, 0x9a, 0x87, 0xd9, 0x73, 0x99, 0xe6, 0xce, 0x5e, 0x6d, 0xbb,
	0x59, 0xd7, 0xda, 0xcd, 0x56, 0x43, 0x7b, 0x5e, 0x53, 0x6b, 0xad, 0x9c, 0xa0, 0xfc, 0x4e, 0xc3,
	0x7f, 0x8d, 0x48, 0x17, 0xed, 0xc3, 0xe4, 0x85, 0x2f, 0x05, 0x5a, 0x18, 0xea, 0x8b, 0xf7, 0x89,
	0x29, 0x2e, 0x5e, 0x05, 0x8b, 0x0e, 0xfd, 0x18, 0x0a, 0xfc, 0x59, 0x85, 0x2a, 0x3c, 0x86, 0xf8,
	0xf1, 0x58, 0xac, 0x5e, 0x1b, 0x1f, 0x49, 0x7f, 0x04, 0x31, 0xee, 0xaa, 0xa3, 0x47, 0xf1, 0x64,
	0xfc, 0x09, 0x53, 0x5c, 0x49, 0x50, 0x11, 0x35, 0xf0, 0x49, 0x80, 0x5b, 0xb1, 0xd7, 0x02, 0x5d,
	0x8b, 0xf0, 0xc2, 0x7d, 0x2c, 0x2a, 0x49, 0x4a, 0xc2, 0x26, 0xd6, 0xd7, 0x7f, 0x9c, 0x4a, 0xc2,
	0xc9, 0xa9, 0x24, 0xfc, 0x3a, 0x95, 0x84, 0xcf, 0x67, 0x52, 0xea, 0xe4, 0x4c, 0x4a, 0xfd, 0x3c,
	0x93, 0x52, 0xaf, 0xcb, 0xa6, 0x45, 0xdf, 0xfa, 0x07, 0x95, 0x8e, 0xdb, 0xad, 0x76, 0xb0, 0x8d,
	0xbd, 0x65, 0x07, 0xd3, 0xf7, 0xae, 0xf7, 0xae, 0x4a, 0x4c, 0x67, 0xb9, 0xa7, 0xf4, 0x7f, 0x3f,
	0x0e, 0xc6, 0xd8, 0xff, 0xc7, 0xe3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x23, 0xd2, 0xd8, 0x7d,
	0xa1, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExplorerClient is the client API for Explorer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExplorerClient interface {
	GetTotalStats(ctx context.Context, in *GetTotalStatsRequest, opts ...grpc.CallOption) (*GetTotalStatsResponse, error)
	GetDailyTotalLiquidity(ctx context.Context, in *GetDailyTotalLiquidityRequest, opts ...grpc.CallOption) (*GetDailyTotalLiquidityResponse, error)
	GetDailyTransactionCount(ctx context.Context, in *GetDailyTransactionCountRequest, opts ...grpc.CallOption) (*GetDailyTransactionCountResponse, error)
	GetDailyTransactionVolume(ctx context.Context, in *GetDailyTransactionVolumeRequest, opts ...grpc.CallOption) (*GetDailyTransactionVolumeResponse, error)
}

type explorerClient struct {
	cc grpc1.ClientConn
}

func NewExplorerClient(cc grpc1.ClientConn) ExplorerClient {
	return &explorerClient{cc}
}

func (c *explorerClient) GetTotalStats(ctx context.Context, in *GetTotalStatsRequest, opts ...grpc.CallOption) (*GetTotalStatsResponse, error) {
	out := new(GetTotalStatsResponse)
	err := c.cc.Invoke(ctx, "/sgn.explorer.v1.Explorer/GetTotalStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *explorerClient) GetDailyTotalLiquidity(ctx context.Context, in *GetDailyTotalLiquidityRequest, opts ...grpc.CallOption) (*GetDailyTotalLiquidityResponse, error) {
	out := new(GetDailyTotalLiquidityResponse)
	err := c.cc.Invoke(ctx, "/sgn.explorer.v1.Explorer/GetDailyTotalLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *explorerClient) GetDailyTransactionCount(ctx context.Context, in *GetDailyTransactionCountRequest, opts ...grpc.CallOption) (*GetDailyTransactionCountResponse, error) {
	out := new(GetDailyTransactionCountResponse)
	err := c.cc.Invoke(ctx, "/sgn.explorer.v1.Explorer/GetDailyTransactionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *explorerClient) GetDailyTransactionVolume(ctx context.Context, in *GetDailyTransactionVolumeRequest, opts ...grpc.CallOption) (*GetDailyTransactionVolumeResponse, error) {
	out := new(GetDailyTransactionVolumeResponse)
	err := c.cc.Invoke(ctx, "/sgn.explorer.v1.Explorer/GetDailyTransactionVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExplorerServer is the server API for Explorer service.
type ExplorerServer interface {
	GetTotalStats(context.Context, *GetTotalStatsRequest) (*GetTotalStatsResponse, error)
	GetDailyTotalLiquidity(context.Context, *GetDailyTotalLiquidityRequest) (*GetDailyTotalLiquidityResponse, error)
	GetDailyTransactionCount(context.Context, *GetDailyTransactionCountRequest) (*GetDailyTransactionCountResponse, error)
	GetDailyTransactionVolume(context.Context, *GetDailyTransactionVolumeRequest) (*GetDailyTransactionVolumeResponse, error)
}

// UnimplementedExplorerServer can be embedded to have forward compatible implementations.
type UnimplementedExplorerServer struct {
}

func (*UnimplementedExplorerServer) GetTotalStats(ctx context.Context, req *GetTotalStatsRequest) (*GetTotalStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalStats not implemented")
}
func (*UnimplementedExplorerServer) GetDailyTotalLiquidity(ctx context.Context, req *GetDailyTotalLiquidityRequest) (*GetDailyTotalLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyTotalLiquidity not implemented")
}
func (*UnimplementedExplorerServer) GetDailyTransactionCount(ctx context.Context, req *GetDailyTransactionCountRequest) (*GetDailyTransactionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyTransactionCount not implemented")
}
func (*UnimplementedExplorerServer) GetDailyTransactionVolume(ctx context.Context, req *GetDailyTransactionVolumeRequest) (*GetDailyTransactionVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyTransactionVolume not implemented")
}

func RegisterExplorerServer(s grpc1.Server, srv ExplorerServer) {
	s.RegisterService(&_Explorer_serviceDesc, srv)
}

func _Explorer_GetTotalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExplorerServer).GetTotalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.explorer.v1.Explorer/GetTotalStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExplorerServer).GetTotalStats(ctx, req.(*GetTotalStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Explorer_GetDailyTotalLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyTotalLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExplorerServer).GetDailyTotalLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.explorer.v1.Explorer/GetDailyTotalLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExplorerServer).GetDailyTotalLiquidity(ctx, req.(*GetDailyTotalLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Explorer_GetDailyTransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyTransactionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExplorerServer).GetDailyTransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.explorer.v1.Explorer/GetDailyTransactionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExplorerServer).GetDailyTransactionCount(ctx, req.(*GetDailyTransactionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Explorer_GetDailyTransactionVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyTransactionVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExplorerServer).GetDailyTransactionVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.explorer.v1.Explorer/GetDailyTransactionVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExplorerServer).GetDailyTransactionVolume(ctx, req.(*GetDailyTransactionVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Explorer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgn.explorer.v1.Explorer",
	HandlerType: (*ExplorerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalStats",
			Handler:    _Explorer_GetTotalStats_Handler,
		},
		{
			MethodName: "GetDailyTotalLiquidity",
			Handler:    _Explorer_GetDailyTotalLiquidity_Handler,
		},
		{
			MethodName: "GetDailyTransactionCount",
			Handler:    _Explorer_GetDailyTransactionCount_Handler,
		},
		{
			MethodName: "GetDailyTransactionVolume",
			Handler:    _Explorer_GetDailyTransactionVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgn/explorer/v1/explorer.proto",
}

func (m *GetTotalStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTotalStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueAddress != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.UniqueAddress))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalLiquidity != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TotalLiquidity))))
		i--
		dAtA[i] = 0x31
	}
	if m.Last_24TotalTransactionCount != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.Last_24TotalTransactionCount))
		i--
		dAtA[i] = 0x28
	}
	if m.Last_24TotalTransactionVolume != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Last_24TotalTransactionVolume))))
		i--
		dAtA[i] = 0x21
	}
	if m.TotalTransactionCount != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.TotalTransactionCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalTransactionVolume != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TotalTransactionVolume))))
		i--
		dAtA[i] = 0x11
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExplorer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDailyTotalLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDailyTotalLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDailyTotalLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x10
	}
	if m.Begin != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.Begin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDailyTotalLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDailyTotalLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDailyTotalLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DailyLiquidity) > 0 {
		for iNdEx := len(m.DailyLiquidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DailyLiquidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExplorer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExplorer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DailyTotalLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyTotalLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DailyTotalLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalLiquidity != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TotalLiquidity))))
		i--
		dAtA[i] = 0x11
	}
	if m.Time != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDailyTransactionCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDailyTransactionCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDailyTransactionCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x10
	}
	if m.Begin != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.Begin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDailyTransactionCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDailyTransactionCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDailyTransactionCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DailyTransactionCount) > 0 {
		for iNdEx := len(m.DailyTransactionCount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DailyTransactionCount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExplorer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExplorer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DailyTransactionCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyTransactionCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DailyTransactionCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransactionCount != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.TransactionCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDailyTransactionVolumeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDailyTransactionVolumeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDailyTransactionVolumeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x10
	}
	if m.Begin != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.Begin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDailyTransactionVolumeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDailyTransactionVolumeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDailyTransactionVolumeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DailyTransactionVolume) > 0 {
		for iNdEx := len(m.DailyTransactionVolume) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DailyTransactionVolume[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExplorer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExplorer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DailyTransactionVolume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyTransactionVolume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DailyTransactionVolume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DailyTransactionVolume != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DailyTransactionVolume))))
		i--
		dAtA[i] = 0x11
	}
	if m.Time != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ErrMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintExplorer(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintExplorer(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExplorer(dAtA []byte, offset int, v uint64) int {
	offset -= sovExplorer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetTotalStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTotalStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovExplorer(uint64(l))
	}
	if m.TotalTransactionVolume != 0 {
		n += 9
	}
	if m.TotalTransactionCount != 0 {
		n += 1 + sovExplorer(uint64(m.TotalTransactionCount))
	}
	if m.Last_24TotalTransactionVolume != 0 {
		n += 9
	}
	if m.Last_24TotalTransactionCount != 0 {
		n += 1 + sovExplorer(uint64(m.Last_24TotalTransactionCount))
	}
	if m.TotalLiquidity != 0 {
		n += 9
	}
	if m.UniqueAddress != 0 {
		n += 1 + sovExplorer(uint64(m.UniqueAddress))
	}
	return n
}

func (m *GetDailyTotalLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Begin != 0 {
		n += 1 + sovExplorer(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovExplorer(uint64(m.End))
	}
	return n
}

func (m *GetDailyTotalLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovExplorer(uint64(l))
	}
	if len(m.DailyLiquidity) > 0 {
		for _, e := range m.DailyLiquidity {
			l = e.Size()
			n += 1 + l + sovExplorer(uint64(l))
		}
	}
	return n
}

func (m *DailyTotalLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovExplorer(uint64(m.Time))
	}
	if m.TotalLiquidity != 0 {
		n += 9
	}
	return n
}

func (m *GetDailyTransactionCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Begin != 0 {
		n += 1 + sovExplorer(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovExplorer(uint64(m.End))
	}
	return n
}

func (m *GetDailyTransactionCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovExplorer(uint64(l))
	}
	if len(m.DailyTransactionCount) > 0 {
		for _, e := range m.DailyTransactionCount {
			l = e.Size()
			n += 1 + l + sovExplorer(uint64(l))
		}
	}
	return n
}

func (m *DailyTransactionCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovExplorer(uint64(m.Time))
	}
	if m.TransactionCount != 0 {
		n += 1 + sovExplorer(uint64(m.TransactionCount))
	}
	return n
}

func (m *GetDailyTransactionVolumeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Begin != 0 {
		n += 1 + sovExplorer(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovExplorer(uint64(m.End))
	}
	return n
}

func (m *GetDailyTransactionVolumeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovExplorer(uint64(l))
	}
	if len(m.DailyTransactionVolume) > 0 {
		for _, e := range m.DailyTransactionVolume {
			l = e.Size()
			n += 1 + l + sovExplorer(uint64(l))
		}
	}
	return n
}

func (m *DailyTransactionVolume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovExplorer(uint64(m.Time))
	}
	if m.DailyTransactionVolume != 0 {
		n += 9
	}
	return n
}

func (m *ErrMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovExplorer(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovExplorer(uint64(l))
	}
	return n
}

func sovExplorer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExplorer(x uint64) (n int) {
	return sovExplorer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetTotalStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplorer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTransactionVolume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TotalTransactionVolume = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTransactionCount", wireType)
			}
			m.TotalTransactionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTransactionCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last_24TotalTransactionVolume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Last_24TotalTransactionVolume = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last_24TotalTransactionCount", wireType)
			}
			m.Last_24TotalTransactionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Last_24TotalTransactionCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TotalLiquidity = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueAddress", wireType)
			}
			m.UniqueAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueAddress |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDailyTotalLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDailyTotalLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDailyTotalLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDailyTotalLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDailyTotalLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDailyTotalLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplorer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyLiquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplorer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DailyLiquidity = append(m.DailyLiquidity, &DailyTotalLiquidity{})
			if err := m.DailyLiquidity[len(m.DailyLiquidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyTotalLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyTotalLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyTotalLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TotalLiquidity = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDailyTransactionCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDailyTransactionCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDailyTransactionCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDailyTransactionCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDailyTransactionCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDailyTransactionCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplorer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyTransactionCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplorer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DailyTransactionCount = append(m.DailyTransactionCount, &DailyTransactionCount{})
			if err := m.DailyTransactionCount[len(m.DailyTransactionCount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyTransactionCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyTransactionCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyTransactionCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionCount", wireType)
			}
			m.TransactionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDailyTransactionVolumeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDailyTransactionVolumeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDailyTransactionVolumeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDailyTransactionVolumeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDailyTransactionVolumeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDailyTransactionVolumeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplorer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyTransactionVolume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplorer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DailyTransactionVolume = append(m.DailyTransactionVolume, &DailyTransactionVolume{})
			if err := m.DailyTransactionVolume[len(m.DailyTransactionVolume)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyTransactionVolume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyTransactionVolume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyTransactionVolume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyTransactionVolume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DailyTransactionVolume = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplorer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplorer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExplorer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExplorer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExplorer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExplorer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExplorer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExplorer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExplorer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExplorer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExplorer = fmt.Errorf("proto: unexpected end of group")
)
