// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgn/health/v1/health.proto

package relayer

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BridgeType int32

const (
	BridgeType_BRIDGE_TYPE_UNDEFINED BridgeType = 0
	BridgeType_BRIDGE_TYPE_LIQUIDITY BridgeType = 1
	BridgeType_BRIDGE_TYPE_PEGGED    BridgeType = 2
)

var BridgeType_name = map[int32]string{
	0: "BRIDGE_TYPE_UNDEFINED",
	1: "BRIDGE_TYPE_LIQUIDITY",
	2: "BRIDGE_TYPE_PEGGED",
}

var BridgeType_value = map[string]int32{
	"BRIDGE_TYPE_UNDEFINED": 0,
	"BRIDGE_TYPE_LIQUIDITY": 1,
	"BRIDGE_TYPE_PEGGED":    2,
}

func (x BridgeType) String() string {
	return proto.EnumName(BridgeType_name, int32(x))
}

func (BridgeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d6fdaa49c355133b, []int{0}
}

type ErrCode int32

const (
	ErrCode_ERROR_CODE_UNDEFINED                    ErrCode = 0
	ErrCode_ERROR_CODE_COMMON                       ErrCode = 500
	ErrCode_ERROR_NO_TOKEN_ON_DST_CHAIN             ErrCode = 1001
	ErrCode_ERROR_NO_TOKEN_ON_SRC_CHAIN             ErrCode = 1002
	ErrCode_ERROR_INIT_WITHDRAW_FAILED              ErrCode = 1003
	ErrCode_ERROR_CODE_NO_ENOUGH_TOKEN_ON_DST_CHAIN ErrCode = 1004
)

var ErrCode_name = map[int32]string{
	0:    "ERROR_CODE_UNDEFINED",
	500:  "ERROR_CODE_COMMON",
	1001: "ERROR_NO_TOKEN_ON_DST_CHAIN",
	1002: "ERROR_NO_TOKEN_ON_SRC_CHAIN",
	1003: "ERROR_INIT_WITHDRAW_FAILED",
	1004: "ERROR_CODE_NO_ENOUGH_TOKEN_ON_DST_CHAIN",
}

var ErrCode_value = map[string]int32{
	"ERROR_CODE_UNDEFINED":                    0,
	"ERROR_CODE_COMMON":                       500,
	"ERROR_NO_TOKEN_ON_DST_CHAIN":             1001,
	"ERROR_NO_TOKEN_ON_SRC_CHAIN":             1002,
	"ERROR_INIT_WITHDRAW_FAILED":              1003,
	"ERROR_CODE_NO_ENOUGH_TOKEN_ON_DST_CHAIN": 1004,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d6fdaa49c355133b, []int{1}
}

type ReportSgnAnalyticsRequest struct {
	// serialized SgnAnalyticsReport
	Report []byte `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	Sig    []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *ReportSgnAnalyticsRequest) Reset()         { *m = ReportSgnAnalyticsRequest{} }
func (m *ReportSgnAnalyticsRequest) String() string { return proto.CompactTextString(m) }
func (*ReportSgnAnalyticsRequest) ProtoMessage()    {}
func (*ReportSgnAnalyticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6fdaa49c355133b, []int{0}
}
func (m *ReportSgnAnalyticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportSgnAnalyticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportSgnAnalyticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportSgnAnalyticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportSgnAnalyticsRequest.Merge(m, src)
}
func (m *ReportSgnAnalyticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReportSgnAnalyticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportSgnAnalyticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportSgnAnalyticsRequest proto.InternalMessageInfo

func (m *ReportSgnAnalyticsRequest) GetReport() []byte {
	if m != nil {
		return m.Report
	}
	return nil
}

func (m *ReportSgnAnalyticsRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type SgnAnalyticsReport struct {
	// in millis
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// key is chainId, value is current block number
	BlockNums   map[string]uint64 `protobuf:"bytes,2,rep,name=block_nums,json=blockNums,proto3" json:"block_nums,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SgndVersion string            `protobuf:"bytes,3,opt,name=sgnd_version,json=sgndVersion,proto3" json:"sgnd_version,omitempty"`
	// deprecated
	LpFeeEarningHistories map[uint64]*LPFeeEarningHistory `protobuf:"bytes,4,rep,name=lp_fee_earning_histories,json=lpFeeEarningHistories,proto3" json:"lp_fee_earning_histories,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// deprecated
	BaseFeeDistributionHistories map[uint64]*BaseFeeDistributionHistory `protobuf:"bytes,5,rep,name=base_fee_distribution_histories,json=baseFeeDistributionHistories,proto3" json:"base_fee_distribution_histories,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key is chainId. only report once when after node start
	ChainConfigs map[string]*ChainConfig `protobuf:"bytes,6,rep,name=chain_configs,json=chainConfigs,proto3" json:"chain_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key is chainId, value is current block time
	BlockTimes map[string]uint64 `protobuf:"bytes,7,rep,name=block_times,json=blockTimes,proto3" json:"block_times,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *SgnAnalyticsReport) Reset()         { *m = SgnAnalyticsReport{} }
func (m *SgnAnalyticsReport) String() string { return proto.CompactTextString(m) }
func (*SgnAnalyticsReport) ProtoMessage()    {}
func (*SgnAnalyticsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6fdaa49c355133b, []int{1}
}
func (m *SgnAnalyticsReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SgnAnalyticsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SgnAnalyticsReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SgnAnalyticsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SgnAnalyticsReport.Merge(m, src)
}
func (m *SgnAnalyticsReport) XXX_Size() int {
	return m.Size()
}
func (m *SgnAnalyticsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_SgnAnalyticsReport.DiscardUnknown(m)
}

var xxx_messageInfo_SgnAnalyticsReport proto.InternalMessageInfo

func (m *SgnAnalyticsReport) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SgnAnalyticsReport) GetBlockNums() map[string]uint64 {
	if m != nil {
		return m.BlockNums
	}
	return nil
}

func (m *SgnAnalyticsReport) GetSgndVersion() string {
	if m != nil {
		return m.SgndVersion
	}
	return ""
}

func (m *SgnAnalyticsReport) GetLpFeeEarningHistories() map[uint64]*LPFeeEarningHistory {
	if m != nil {
		return m.LpFeeEarningHistories
	}
	return nil
}

func (m *SgnAnalyticsReport) GetBaseFeeDistributionHistories() map[uint64]*BaseFeeDistributionHistory {
	if m != nil {
		return m.BaseFeeDistributionHistories
	}
	return nil
}

func (m *SgnAnalyticsReport) GetChainConfigs() map[string]*ChainConfig {
	if m != nil {
		return m.ChainConfigs
	}
	return nil
}

func (m *SgnAnalyticsReport) GetBlockTimes() map[string]uint64 {
	if m != nil {
		return m.BlockTimes
	}
	return nil
}

// move lp_fee_earning_histories and base_fee_distribution_histories to here
type SgnConsensusLogReport struct {
	// key is nanoseconds timestamp, so histories are group by transfer (lp picks belong to one transfer are the same time)
	LpFeeEarningHistories map[uint64]*LPFeeEarningHistory `protobuf:"bytes,1,rep,name=lp_fee_earning_histories,json=lpFeeEarningHistories,proto3" json:"lp_fee_earning_histories,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key is nanoseconds timestamp, so histories are group by transfer
	BaseFeeDistributionHistories map[uint64]*BaseFeeDistributionHistory `protobuf:"bytes,2,rep,name=base_fee_distribution_histories,json=baseFeeDistributionHistories,proto3" json:"base_fee_distribution_histories,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SgnConsensusLogReport) Reset()         { *m = SgnConsensusLogReport{} }
func (m *SgnConsensusLogReport) String() string { return proto.CompactTextString(m) }
func (*SgnConsensusLogReport) ProtoMessage()    {}
func (*SgnConsensusLogReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6fdaa49c355133b, []int{2}
}
func (m *SgnConsensusLogReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SgnConsensusLogReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SgnConsensusLogReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SgnConsensusLogReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SgnConsensusLogReport.Merge(m, src)
}
func (m *SgnConsensusLogReport) XXX_Size() int {
	return m.Size()
}
func (m *SgnConsensusLogReport) XXX_DiscardUnknown() {
	xxx_messageInfo_SgnConsensusLogReport.DiscardUnknown(m)
}

var xxx_messageInfo_SgnConsensusLogReport proto.InternalMessageInfo

func (m *SgnConsensusLogReport) GetLpFeeEarningHistories() map[uint64]*LPFeeEarningHistory {
	if m != nil {
		return m.LpFeeEarningHistories
	}
	return nil
}

func (m *SgnConsensusLogReport) GetBaseFeeDistributionHistories() map[uint64]*BaseFeeDistributionHistory {
	if m != nil {
		return m.BaseFeeDistributionHistories
	}
	return nil
}

type ChainConfig struct {
	CbridgeContractAddr            string `protobuf:"bytes,1,opt,name=cbridge_contract_addr,json=cbridgeContractAddr,proto3" json:"cbridge_contract_addr,omitempty"`
	OriginalTokenVaultContractAddr string `protobuf:"bytes,2,opt,name=original_token_vault_contract_addr,json=originalTokenVaultContractAddr,proto3" json:"original_token_vault_contract_addr,omitempty"`
	PeggedTokenBridgeContractAddr  string `protobuf:"bytes,3,opt,name=pegged_token_bridge_contract_addr,json=peggedTokenBridgeContractAddr,proto3" json:"pegged_token_bridge_contract_addr,omitempty"`
	MsgBusContractAddr             string `protobuf:"bytes,4,opt,name=msg_bus_contract_addr,json=msgBusContractAddr,proto3" json:"msg_bus_contract_addr,omitempty"`
}

func (m *ChainConfig) Reset()         { *m = ChainConfig{} }
func (m *ChainConfig) String() string { return proto.CompactTextString(m) }
func (*ChainConfig) ProtoMessage()    {}
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6fdaa49c355133b, []int{3}
}
func (m *ChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainConfig.Merge(m, src)
}
func (m *ChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChainConfig proto.InternalMessageInfo

func (m *ChainConfig) GetCbridgeContractAddr() string {
	if m != nil {
		return m.CbridgeContractAddr
	}
	return ""
}

func (m *ChainConfig) GetOriginalTokenVaultContractAddr() string {
	if m != nil {
		return m.OriginalTokenVaultContractAddr
	}
	return ""
}

func (m *ChainConfig) GetPeggedTokenBridgeContractAddr() string {
	if m != nil {
		return m.PeggedTokenBridgeContractAddr
	}
	return ""
}

func (m *ChainConfig) GetMsgBusContractAddr() string {
	if m != nil {
		return m.MsgBusContractAddr
	}
	return ""
}

type BaseFeeDistributionHistory struct {
	BridgeType          BridgeType `protobuf:"varint,1,opt,name=bridge_type,json=bridgeType,proto3,enum=sgn.health.v1.BridgeType" json:"bridge_type,omitempty"`
	BaseFeeReceiverAddr string     `protobuf:"bytes,2,opt,name=base_fee_receiver_addr,json=baseFeeReceiverAddr,proto3" json:"base_fee_receiver_addr,omitempty"`
	BaseFeeAmt          string     `protobuf:"bytes,3,opt,name=base_fee_amt,json=baseFeeAmt,proto3" json:"base_fee_amt,omitempty"`
	TokenSymbol         string     `protobuf:"bytes,4,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TokenDecimal        uint32     `protobuf:"varint,5,opt,name=token_decimal,json=tokenDecimal,proto3" json:"token_decimal,omitempty"`
	SrcChainId          uint64     `protobuf:"varint,6,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DstChainId          uint64     `protobuf:"varint,7,opt,name=dst_chain_id,json=dstChainId,proto3" json:"dst_chain_id,omitempty"`
}

func (m *BaseFeeDistributionHistory) Reset()         { *m = BaseFeeDistributionHistory{} }
func (m *BaseFeeDistributionHistory) String() string { return proto.CompactTextString(m) }
func (*BaseFeeDistributionHistory) ProtoMessage()    {}
func (*BaseFeeDistributionHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6fdaa49c355133b, []int{4}
}
func (m *BaseFeeDistributionHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseFeeDistributionHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseFeeDistributionHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseFeeDistributionHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseFeeDistributionHistory.Merge(m, src)
}
func (m *BaseFeeDistributionHistory) XXX_Size() int {
	return m.Size()
}
func (m *BaseFeeDistributionHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseFeeDistributionHistory.DiscardUnknown(m)
}

var xxx_messageInfo_BaseFeeDistributionHistory proto.InternalMessageInfo

func (m *BaseFeeDistributionHistory) GetBridgeType() BridgeType {
	if m != nil {
		return m.BridgeType
	}
	return BridgeType_BRIDGE_TYPE_UNDEFINED
}

func (m *BaseFeeDistributionHistory) GetBaseFeeReceiverAddr() string {
	if m != nil {
		return m.BaseFeeReceiverAddr
	}
	return ""
}

func (m *BaseFeeDistributionHistory) GetBaseFeeAmt() string {
	if m != nil {
		return m.BaseFeeAmt
	}
	return ""
}

func (m *BaseFeeDistributionHistory) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *BaseFeeDistributionHistory) GetTokenDecimal() uint32 {
	if m != nil {
		return m.TokenDecimal
	}
	return 0
}

func (m *BaseFeeDistributionHistory) GetSrcChainId() uint64 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func (m *BaseFeeDistributionHistory) GetDstChainId() uint64 {
	if m != nil {
		return m.DstChainId
	}
	return 0
}

// each LPFeeEarningHistory represents one transfer history
type LPFeeEarningHistory struct {
	// 0x
	DstTokenAddr string `protobuf:"bytes,1,opt,name=dst_token_addr,json=dstTokenAddr,proto3" json:"dst_token_addr,omitempty"`
	DstChainId   uint64 `protobuf:"varint,2,opt,name=dst_chain_id,json=dstChainId,proto3" json:"dst_chain_id,omitempty"`
	// key is lp_addr (0x)
	Logs map[string]*LPFeeEarningLog `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *LPFeeEarningHistory) Reset()         { *m = LPFeeEarningHistory{} }
func (m *LPFeeEarningHistory) String() string { return proto.CompactTextString(m) }
func (*LPFeeEarningHistory) ProtoMessage()    {}
func (*LPFeeEarningHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6fdaa49c355133b, []int{5}
}
func (m *LPFeeEarningHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPFeeEarningHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPFeeEarningHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPFeeEarningHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPFeeEarningHistory.Merge(m, src)
}
func (m *LPFeeEarningHistory) XXX_Size() int {
	return m.Size()
}
func (m *LPFeeEarningHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_LPFeeEarningHistory.DiscardUnknown(m)
}

var xxx_messageInfo_LPFeeEarningHistory proto.InternalMessageInfo

func (m *LPFeeEarningHistory) GetDstTokenAddr() string {
	if m != nil {
		return m.DstTokenAddr
	}
	return ""
}

func (m *LPFeeEarningHistory) GetDstChainId() uint64 {
	if m != nil {
		return m.DstChainId
	}
	return 0
}

func (m *LPFeeEarningHistory) GetLogs() map[string]*LPFeeEarningLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type LPFeeEarningLog struct {
	DstChainLiquidityUsed     string `protobuf:"bytes,1,opt,name=dst_chain_liquidity_used,json=dstChainLiquidityUsed,proto3" json:"dst_chain_liquidity_used,omitempty"`
	EarnedFee                 string `protobuf:"bytes,2,opt,name=earned_fee,json=earnedFee,proto3" json:"earned_fee,omitempty"`
	DstChainLiquidityRemained string `protobuf:"bytes,3,opt,name=dst_chain_liquidity_remained,json=dstChainLiquidityRemained,proto3" json:"dst_chain_liquidity_remained,omitempty"`
}

func (m *LPFeeEarningLog) Reset()         { *m = LPFeeEarningLog{} }
func (m *LPFeeEarningLog) String() string { return proto.CompactTextString(m) }
func (*LPFeeEarningLog) ProtoMessage()    {}
func (*LPFeeEarningLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6fdaa49c355133b, []int{6}
}
func (m *LPFeeEarningLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPFeeEarningLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPFeeEarningLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPFeeEarningLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPFeeEarningLog.Merge(m, src)
}
func (m *LPFeeEarningLog) XXX_Size() int {
	return m.Size()
}
func (m *LPFeeEarningLog) XXX_DiscardUnknown() {
	xxx_messageInfo_LPFeeEarningLog.DiscardUnknown(m)
}

var xxx_messageInfo_LPFeeEarningLog proto.InternalMessageInfo

func (m *LPFeeEarningLog) GetDstChainLiquidityUsed() string {
	if m != nil {
		return m.DstChainLiquidityUsed
	}
	return ""
}

func (m *LPFeeEarningLog) GetEarnedFee() string {
	if m != nil {
		return m.EarnedFee
	}
	return ""
}

func (m *LPFeeEarningLog) GetDstChainLiquidityRemained() string {
	if m != nil {
		return m.DstChainLiquidityRemained
	}
	return ""
}

type ReportSgnAnalyticsResponse struct {
	Err *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *ReportSgnAnalyticsResponse) Reset()         { *m = ReportSgnAnalyticsResponse{} }
func (m *ReportSgnAnalyticsResponse) String() string { return proto.CompactTextString(m) }
func (*ReportSgnAnalyticsResponse) ProtoMessage()    {}
func (*ReportSgnAnalyticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6fdaa49c355133b, []int{7}
}
func (m *ReportSgnAnalyticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportSgnAnalyticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportSgnAnalyticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportSgnAnalyticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportSgnAnalyticsResponse.Merge(m, src)
}
func (m *ReportSgnAnalyticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReportSgnAnalyticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportSgnAnalyticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportSgnAnalyticsResponse proto.InternalMessageInfo

func (m *ReportSgnAnalyticsResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

type ErrMsg struct {
	Code ErrCode `protobuf:"varint,1,opt,name=code,proto3,enum=sgn.health.v1.ErrCode" json:"code,omitempty"`
	Msg  string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ErrMsg) Reset()         { *m = ErrMsg{} }
func (m *ErrMsg) String() string { return proto.CompactTextString(m) }
func (*ErrMsg) ProtoMessage()    {}
func (*ErrMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6fdaa49c355133b, []int{8}
}
func (m *ErrMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrMsg.Merge(m, src)
}
func (m *ErrMsg) XXX_Size() int {
	return m.Size()
}
func (m *ErrMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ErrMsg proto.InternalMessageInfo

func (m *ErrMsg) GetCode() ErrCode {
	if m != nil {
		return m.Code
	}
	return ErrCode_ERROR_CODE_UNDEFINED
}

func (m *ErrMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterEnum("sgn.health.v1.BridgeType", BridgeType_name, BridgeType_value)
	proto.RegisterEnum("sgn.health.v1.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterType((*ReportSgnAnalyticsRequest)(nil), "sgn.health.v1.ReportSgnAnalyticsRequest")
	proto.RegisterType((*SgnAnalyticsReport)(nil), "sgn.health.v1.SgnAnalyticsReport")
	proto.RegisterMapType((map[uint64]*BaseFeeDistributionHistory)(nil), "sgn.health.v1.SgnAnalyticsReport.BaseFeeDistributionHistoriesEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "sgn.health.v1.SgnAnalyticsReport.BlockNumsEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "sgn.health.v1.SgnAnalyticsReport.BlockTimesEntry")
	proto.RegisterMapType((map[string]*ChainConfig)(nil), "sgn.health.v1.SgnAnalyticsReport.ChainConfigsEntry")
	proto.RegisterMapType((map[uint64]*LPFeeEarningHistory)(nil), "sgn.health.v1.SgnAnalyticsReport.LpFeeEarningHistoriesEntry")
	proto.RegisterType((*SgnConsensusLogReport)(nil), "sgn.health.v1.SgnConsensusLogReport")
	proto.RegisterMapType((map[uint64]*BaseFeeDistributionHistory)(nil), "sgn.health.v1.SgnConsensusLogReport.BaseFeeDistributionHistoriesEntry")
	proto.RegisterMapType((map[uint64]*LPFeeEarningHistory)(nil), "sgn.health.v1.SgnConsensusLogReport.LpFeeEarningHistoriesEntry")
	proto.RegisterType((*ChainConfig)(nil), "sgn.health.v1.ChainConfig")
	proto.RegisterType((*BaseFeeDistributionHistory)(nil), "sgn.health.v1.BaseFeeDistributionHistory")
	proto.RegisterType((*LPFeeEarningHistory)(nil), "sgn.health.v1.LPFeeEarningHistory")
	proto.RegisterMapType((map[string]*LPFeeEarningLog)(nil), "sgn.health.v1.LPFeeEarningHistory.LogsEntry")
	proto.RegisterType((*LPFeeEarningLog)(nil), "sgn.health.v1.LPFeeEarningLog")
	proto.RegisterType((*ReportSgnAnalyticsResponse)(nil), "sgn.health.v1.ReportSgnAnalyticsResponse")
	proto.RegisterType((*ErrMsg)(nil), "sgn.health.v1.ErrMsg")
}

func init() { proto.RegisterFile("sgn/health/v1/health.proto", fileDescriptor_d6fdaa49c355133b) }

var fileDescriptor_d6fdaa49c355133b = []byte{
	// 1214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0xcd, 0x72, 0xdb, 0x54,
	0x14, 0x8e, 0x6c, 0x37, 0xc6, 0xc7, 0x49, 0xeb, 0xde, 0xd6, 0x19, 0xc5, 0xb4, 0xae, 0x6b, 0x98,
	0x69, 0xe8, 0xb4, 0x4e, 0xe3, 0x32, 0x43, 0xa7, 0x53, 0xa6, 0x38, 0xb6, 0x9c, 0x18, 0x1c, 0x3b,
	0x28, 0x4e, 0x43, 0xcb, 0x42, 0x23, 0x4b, 0xb7, 0x8a, 0x26, 0xfa, 0x71, 0xef, 0x95, 0x0c, 0xe6,
	0x11, 0xca, 0x30, 0xc3, 0x03, 0xf0, 0x04, 0xbc, 0x02, 0x2f, 0xc0, 0x8a, 0xe9, 0x92, 0x25, 0x93,
	0xac, 0xf8, 0x59, 0xb2, 0x60, 0xc9, 0xe8, 0x5e, 0x39, 0x91, 0x65, 0xe7, 0x07, 0x58, 0xb2, 0x93,
	0xce, 0xf9, 0xce, 0xf7, 0x9d, 0x7b, 0x7e, 0xae, 0x6c, 0x28, 0x50, 0xc3, 0x59, 0xdd, 0xc7, 0xaa,
	0xe5, 0xed, 0xaf, 0x0e, 0xd7, 0xc2, 0xa7, 0xca, 0x80, 0xb8, 0x9e, 0x8b, 0x16, 0xa9, 0xe1, 0x54,
	0x42, 0xcb, 0x70, 0xad, 0x2c, 0xc1, 0xb2, 0x8c, 0x07, 0x2e, 0xf1, 0x76, 0x0c, 0xa7, 0xe6, 0xa8,
	0xd6, 0xc8, 0x33, 0x35, 0x2a, 0xe3, 0x57, 0x3e, 0xa6, 0x1e, 0x5a, 0x82, 0x79, 0xc2, 0x9c, 0xa2,
	0x50, 0x12, 0x56, 0x16, 0xe4, 0xf0, 0x0d, 0xe5, 0x20, 0x49, 0x4d, 0x43, 0x4c, 0x30, 0x63, 0xf0,
	0x58, 0xfe, 0xee, 0x2d, 0x40, 0x93, 0x0c, 0x0c, 0x78, 0x03, 0x32, 0x9e, 0x69, 0x63, 0xea, 0xa9,
	0xf6, 0x80, 0x71, 0xa4, 0xe4, 0x13, 0x03, 0xea, 0x02, 0xf4, 0x2d, 0x57, 0x3b, 0x50, 0x1c, 0xdf,
	0xa6, 0x62, 0xa2, 0x94, 0x5c, 0xc9, 0x56, 0x1f, 0x54, 0x26, 0xf2, 0xab, 0x4c, 0x93, 0x56, 0xd6,
	0x83, 0x98, 0x8e, 0x6f, 0x53, 0xc9, 0xf1, 0xc8, 0x48, 0xce, 0xf4, 0xc7, 0xef, 0xe8, 0x36, 0x2c,
	0x50, 0xc3, 0xd1, 0x95, 0x21, 0x26, 0xd4, 0x74, 0x1d, 0x31, 0x59, 0x12, 0x56, 0x32, 0x72, 0x36,
	0xb0, 0x3d, 0xe3, 0x26, 0xe4, 0x83, 0x68, 0x0d, 0x94, 0x97, 0x18, 0x2b, 0x58, 0x25, 0x8e, 0xe9,
	0x18, 0xca, 0xbe, 0x49, 0x3d, 0x97, 0x98, 0x98, 0x8a, 0x29, 0x96, 0xc1, 0x93, 0xf3, 0x33, 0x68,
	0x0f, 0x9a, 0x18, 0x4b, 0x3c, 0x7e, 0x73, 0x1c, 0xce, 0xb3, 0xc9, 0x5b, 0xb3, 0x7c, 0xe8, 0xb5,
	0x00, 0xb7, 0xfa, 0x2a, 0xc5, 0x4c, 0x59, 0x37, 0xa9, 0x47, 0xcc, 0xbe, 0xef, 0x99, 0xae, 0x13,
	0x91, 0xbf, 0xc4, 0xe4, 0xeb, 0x17, 0x28, 0x80, 0x4a, 0x71, 0x13, 0xe3, 0x46, 0x84, 0x26, 0x96,
	0xc5, 0x8d, 0xfe, 0x19, 0x10, 0xf4, 0x19, 0x2c, 0x6a, 0xfb, 0xaa, 0xe9, 0x28, 0x9a, 0xeb, 0xbc,
	0x34, 0x0d, 0x2a, 0xce, 0x33, 0xe5, 0x87, 0xe7, 0x2b, 0xd7, 0x83, 0xb0, 0x3a, 0x8f, 0xe2, 0x4a,
	0x0b, 0x5a, 0xc4, 0x84, 0x64, 0xc8, 0xf2, 0x8e, 0xb2, 0x26, 0x8b, 0x69, 0xc6, 0xbb, 0x76, 0xc1,
	0x96, 0xf6, 0x82, 0x18, 0xce, 0xca, 0xe7, 0x82, 0x19, 0x0a, 0x4f, 0xe0, 0xf2, 0x64, 0xc7, 0x83,
	0xf1, 0x3b, 0xc0, 0x23, 0x36, 0x4f, 0x19, 0x39, 0x78, 0x44, 0xd7, 0xe1, 0xd2, 0x50, 0xb5, 0x7c,
	0xcc, 0x46, 0x32, 0x25, 0xf3, 0x97, 0xc7, 0x89, 0x47, 0x42, 0xc1, 0x82, 0xc2, 0xe9, 0xdd, 0x8a,
	0x32, 0xa5, 0x38, 0xd3, 0xa3, 0x28, 0x53, 0xb6, 0x5a, 0x8e, 0xe5, 0xde, 0xde, 0x8e, 0x73, 0x8d,
	0xa2, 0x6a, 0x5f, 0xc1, 0xed, 0x73, 0x9b, 0x33, 0x43, 0xf4, 0xe9, 0xa4, 0xe8, 0x7b, 0x31, 0xd1,
	0x53, 0x29, 0x27, 0xb4, 0x3f, 0x87, 0xab, 0x53, 0xed, 0x99, 0x51, 0xaa, 0x07, 0x93, 0x5a, 0x85,
	0x98, 0x56, 0x84, 0x22, 0x4a, 0xfe, 0x21, 0x5c, 0x89, 0xf5, 0xe8, 0x9f, 0x74, 0xa1, 0xfc, 0x75,
	0x0a, 0xf2, 0x3b, 0x46, 0xc0, 0x4b, 0xb1, 0x43, 0x7d, 0xda, 0x76, 0x8d, 0xf0, 0x86, 0xf8, 0xf2,
	0x8c, 0x7d, 0x14, 0xd8, 0xf8, 0x3c, 0x9d, 0x1e, 0x9f, 0x69, 0x9e, 0x7f, 0xb1, 0x92, 0xdf, 0x5c,
	0x60, 0x25, 0xf9, 0x9d, 0xd4, 0xbc, 0x50, 0x06, 0xff, 0x71, 0x2b, 0xff, 0x3f, 0x93, 0x5a, 0x7e,
	0x9d, 0x80, 0x6c, 0x64, 0xce, 0x50, 0x15, 0xf2, 0x5a, 0x9f, 0x98, 0xba, 0x81, 0x83, 0x1b, 0xc9,
	0x23, 0xaa, 0xe6, 0x29, 0xaa, 0xae, 0x93, 0x70, 0xb6, 0xae, 0x85, 0xce, 0x7a, 0xe8, 0xab, 0xe9,
	0x3a, 0x41, 0x1f, 0x43, 0xd9, 0x25, 0xa6, 0x61, 0x3a, 0xaa, 0xa5, 0x78, 0xee, 0x01, 0x76, 0x94,
	0xa1, 0xea, 0x5b, 0x5e, 0x8c, 0x20, 0xc1, 0x08, 0x8a, 0x63, 0x64, 0x2f, 0x00, 0x3e, 0x0b, 0x70,
	0x13, 0x5c, 0x9b, 0x70, 0x7b, 0x80, 0x0d, 0x03, 0xeb, 0x21, 0xd3, 0xcc, 0x5c, 0xf8, 0xb7, 0xe4,
	0x26, 0x07, 0x32, 0xa2, 0xf5, 0xe9, 0xac, 0xd6, 0x20, 0x6f, 0x53, 0x43, 0xe9, 0xfb, 0x34, 0x16,
	0x9d, 0x62, 0xd1, 0xc8, 0xa6, 0xc6, 0xba, 0x4f, 0xa3, 0x21, 0xe5, 0x1f, 0x12, 0x50, 0x38, 0xbd,
	0x6c, 0xe8, 0x31, 0x64, 0xc3, 0x74, 0xbc, 0xd1, 0x00, 0xb3, 0x8a, 0x5c, 0xae, 0x2e, 0xc7, 0xcb,
	0xce, 0x10, 0xbd, 0xd1, 0x00, 0xcb, 0xd0, 0x3f, 0x7e, 0x46, 0x0f, 0x61, 0xe9, 0x78, 0xc0, 0x09,
	0xd6, 0xb0, 0x39, 0xc4, 0x24, 0x5a, 0x97, 0x6b, 0xe1, 0x3c, 0xca, 0xa1, 0x8f, 0x1d, 0xa1, 0x04,
	0x0b, 0xc7, 0x41, 0xaa, 0xed, 0x85, 0xe7, 0x86, 0x10, 0x5a, 0xb3, 0xbd, 0xe0, 0x2b, 0xcb, 0xeb,
	0x44, 0x47, 0x76, 0xdf, 0xb5, 0xc2, 0xb3, 0x65, 0x99, 0x6d, 0x87, 0x99, 0xd0, 0x3b, 0xb0, 0xc8,
	0x21, 0x3a, 0xd6, 0x4c, 0x5b, 0xb5, 0xc4, 0x4b, 0x25, 0x61, 0x65, 0x51, 0xe6, 0x71, 0x0d, 0x6e,
	0x0b, 0x94, 0x28, 0xd1, 0x14, 0xfe, 0x29, 0x32, 0x75, 0x71, 0x9e, 0x8d, 0x19, 0x50, 0xa2, 0xb1,
	0xe1, 0x68, 0xe9, 0x01, 0x42, 0xa7, 0xde, 0x09, 0x22, 0xcd, 0x11, 0x3a, 0xf5, 0x42, 0x44, 0xf9,
	0x2f, 0x01, 0xae, 0xcd, 0x98, 0x74, 0xf4, 0x2e, 0x5c, 0x0e, 0x22, 0x79, 0x12, 0x91, 0x59, 0x0a,
	0xf8, 0x58, 0xf3, 0xc6, 0x67, 0x9d, 0xe0, 0x4f, 0xc4, 0xf9, 0xd1, 0x47, 0x90, 0xb2, 0x5c, 0x83,
	0x8a, 0x49, 0x76, 0x11, 0xdc, 0x3b, 0x7f, 0xc7, 0x2a, 0x6d, 0x77, 0xfc, 0x69, 0x64, 0x91, 0x85,
	0x3d, 0xc8, 0x1c, 0x9b, 0x66, 0xdc, 0x99, 0xef, 0x4f, 0x2e, 0x54, 0xf1, 0x0c, 0x85, 0xe0, 0xaa,
	0x89, 0x6c, 0xd1, 0xf7, 0x02, 0x5c, 0x89, 0xb9, 0xd1, 0x07, 0x20, 0x9e, 0x1c, 0xc8, 0x32, 0x5f,
	0xf9, 0xa6, 0x6e, 0x7a, 0x23, 0xc5, 0xa7, 0x58, 0x0f, 0x45, 0xf3, 0xe3, 0xc3, 0xb5, 0xc7, 0xde,
	0x5d, 0x8a, 0x75, 0x74, 0x13, 0x20, 0xb8, 0x7f, 0xb1, 0x1e, 0xf4, 0x3d, 0x1c, 0x8f, 0x0c, 0xb7,
	0x34, 0x31, 0x46, 0x4f, 0xe1, 0xc6, 0x2c, 0x5e, 0x82, 0x6d, 0xd5, 0x74, 0xb0, 0x1e, 0x0e, 0xc9,
	0xf2, 0x14, 0xb7, 0x1c, 0x02, 0xca, 0x12, 0x14, 0x66, 0xfd, 0xcc, 0xa4, 0x83, 0xe0, 0x1e, 0x45,
	0x77, 0x20, 0x89, 0x09, 0x6f, 0x51, 0xb6, 0x9a, 0x8f, 0x95, 0x40, 0x22, 0x64, 0x8b, 0x1a, 0x72,
	0x80, 0x28, 0x37, 0x61, 0x9e, 0xbf, 0xa2, 0xbb, 0x90, 0xd2, 0x5c, 0x7d, 0xbc, 0x10, 0x4b, 0xd3,
	0x31, 0x75, 0x57, 0xc7, 0x32, 0xc3, 0x04, 0x55, 0xb7, 0xa9, 0x11, 0x9e, 0x2a, 0x78, 0xbc, 0xfb,
	0x02, 0xe0, 0x64, 0x67, 0xd0, 0x32, 0xe4, 0xd7, 0xe5, 0x56, 0x63, 0x43, 0x52, 0x7a, 0xcf, 0xb7,
	0x25, 0x65, 0xb7, 0xd3, 0x90, 0x9a, 0xad, 0x8e, 0xd4, 0xc8, 0xcd, 0xc5, 0x5d, 0xed, 0xd6, 0xa7,
	0xbb, 0xad, 0x46, 0xab, 0xf7, 0x3c, 0x27, 0xa0, 0x25, 0x40, 0x51, 0xd7, 0xb6, 0xb4, 0xb1, 0x21,
	0x35, 0x72, 0x89, 0xbb, 0x3f, 0x09, 0x90, 0x0e, 0xf5, 0x91, 0x08, 0xd7, 0x25, 0x59, 0xee, 0xca,
	0x4a, 0xbd, 0xdb, 0x98, 0x24, 0x5e, 0x82, 0xab, 0x11, 0x4f, 0xbd, 0xbb, 0xb5, 0xd5, 0xed, 0xe4,
	0xfe, 0x4c, 0xa2, 0x12, 0xbc, 0xcd, 0xed, 0x9d, 0xae, 0xd2, 0xeb, 0x7e, 0x22, 0x75, 0x94, 0x6e,
	0x47, 0x69, 0xec, 0xf4, 0x94, 0xfa, 0x66, 0xad, 0xd5, 0xc9, 0xfd, 0x9a, 0x9e, 0x8d, 0xd8, 0x91,
	0xeb, 0x21, 0xe2, 0xb7, 0x34, 0xba, 0x05, 0x05, 0x8e, 0x68, 0x75, 0x5a, 0x3d, 0x65, 0xaf, 0xd5,
	0xdb, 0x6c, 0xc8, 0xb5, 0x3d, 0xa5, 0x59, 0x6b, 0xb5, 0xa5, 0x46, 0xee, 0xf7, 0x34, 0xba, 0x07,
	0x77, 0x22, 0xe2, 0x9d, 0xae, 0x22, 0x75, 0xba, 0xbb, 0x1b, 0x9b, 0xb3, 0x04, 0xff, 0x48, 0xaf,
	0xd7, 0x7e, 0x3c, 0x2c, 0x0a, 0x6f, 0x0e, 0x8b, 0xc2, 0x2f, 0x87, 0x45, 0xe1, 0xdb, 0xa3, 0xe2,
	0xdc, 0x9b, 0xa3, 0xe2, 0xdc, 0xcf, 0x47, 0xc5, 0xb9, 0x17, 0x77, 0x0c, 0xd3, 0xdb, 0xf7, 0xfb,
	0x15, 0xcd, 0xb5, 0x57, 0x35, 0x6c, 0x61, 0x72, 0xdf, 0xc1, 0xde, 0x17, 0x2e, 0x39, 0x58, 0xa5,
	0x86, 0x73, 0x7f, 0x58, 0x5d, 0x25, 0xd8, 0x52, 0x47, 0x98, 0xf4, 0xe7, 0xd9, 0x7f, 0x8f, 0x87,
	0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x32, 0x65, 0x00, 0x99, 0x0c, 0x00, 0x00,
}

func (m *ReportSgnAnalyticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportSgnAnalyticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSgnAnalyticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Report) > 0 {
		i -= len(m.Report)
		copy(dAtA[i:], m.Report)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.Report)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SgnAnalyticsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SgnAnalyticsReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SgnAnalyticsReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockTimes) > 0 {
		for k := range m.BlockTimes {
			v := m.BlockTimes[k]
			baseI := i
			i = encodeVarintHealth(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHealth(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHealth(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ChainConfigs) > 0 {
		for k := range m.ChainConfigs {
			v := m.ChainConfigs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHealth(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHealth(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHealth(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BaseFeeDistributionHistories) > 0 {
		for k := range m.BaseFeeDistributionHistories {
			v := m.BaseFeeDistributionHistories[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHealth(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintHealth(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHealth(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LpFeeEarningHistories) > 0 {
		for k := range m.LpFeeEarningHistories {
			v := m.LpFeeEarningHistories[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHealth(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintHealth(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHealth(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SgndVersion) > 0 {
		i -= len(m.SgndVersion)
		copy(dAtA[i:], m.SgndVersion)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.SgndVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BlockNums) > 0 {
		for k := range m.BlockNums {
			v := m.BlockNums[k]
			baseI := i
			i = encodeVarintHealth(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHealth(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHealth(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Timestamp != 0 {
		i = encodeVarintHealth(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SgnConsensusLogReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SgnConsensusLogReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SgnConsensusLogReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseFeeDistributionHistories) > 0 {
		for k := range m.BaseFeeDistributionHistories {
			v := m.BaseFeeDistributionHistories[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHealth(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintHealth(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHealth(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LpFeeEarningHistories) > 0 {
		for k := range m.LpFeeEarningHistories {
			v := m.LpFeeEarningHistories[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHealth(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintHealth(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHealth(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgBusContractAddr) > 0 {
		i -= len(m.MsgBusContractAddr)
		copy(dAtA[i:], m.MsgBusContractAddr)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.MsgBusContractAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PeggedTokenBridgeContractAddr) > 0 {
		i -= len(m.PeggedTokenBridgeContractAddr)
		copy(dAtA[i:], m.PeggedTokenBridgeContractAddr)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.PeggedTokenBridgeContractAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginalTokenVaultContractAddr) > 0 {
		i -= len(m.OriginalTokenVaultContractAddr)
		copy(dAtA[i:], m.OriginalTokenVaultContractAddr)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.OriginalTokenVaultContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CbridgeContractAddr) > 0 {
		i -= len(m.CbridgeContractAddr)
		copy(dAtA[i:], m.CbridgeContractAddr)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.CbridgeContractAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseFeeDistributionHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseFeeDistributionHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseFeeDistributionHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DstChainId != 0 {
		i = encodeVarintHealth(dAtA, i, uint64(m.DstChainId))
		i--
		dAtA[i] = 0x38
	}
	if m.SrcChainId != 0 {
		i = encodeVarintHealth(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x30
	}
	if m.TokenDecimal != 0 {
		i = encodeVarintHealth(dAtA, i, uint64(m.TokenDecimal))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BaseFeeAmt) > 0 {
		i -= len(m.BaseFeeAmt)
		copy(dAtA[i:], m.BaseFeeAmt)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.BaseFeeAmt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseFeeReceiverAddr) > 0 {
		i -= len(m.BaseFeeReceiverAddr)
		copy(dAtA[i:], m.BaseFeeReceiverAddr)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.BaseFeeReceiverAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.BridgeType != 0 {
		i = encodeVarintHealth(dAtA, i, uint64(m.BridgeType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LPFeeEarningHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPFeeEarningHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPFeeEarningHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for k := range m.Logs {
			v := m.Logs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHealth(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHealth(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHealth(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DstChainId != 0 {
		i = encodeVarintHealth(dAtA, i, uint64(m.DstChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DstTokenAddr) > 0 {
		i -= len(m.DstTokenAddr)
		copy(dAtA[i:], m.DstTokenAddr)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.DstTokenAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LPFeeEarningLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPFeeEarningLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPFeeEarningLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DstChainLiquidityRemained) > 0 {
		i -= len(m.DstChainLiquidityRemained)
		copy(dAtA[i:], m.DstChainLiquidityRemained)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.DstChainLiquidityRemained)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EarnedFee) > 0 {
		i -= len(m.EarnedFee)
		copy(dAtA[i:], m.EarnedFee)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.EarnedFee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DstChainLiquidityUsed) > 0 {
		i -= len(m.DstChainLiquidityUsed)
		copy(dAtA[i:], m.DstChainLiquidityUsed)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.DstChainLiquidityUsed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportSgnAnalyticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportSgnAnalyticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportSgnAnalyticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHealth(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErrMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintHealth(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHealth(dAtA []byte, offset int, v uint64) int {
	offset -= sovHealth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReportSgnAnalyticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Report)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	return n
}

func (m *SgnAnalyticsReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovHealth(uint64(m.Timestamp))
	}
	if len(m.BlockNums) > 0 {
		for k, v := range m.BlockNums {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHealth(uint64(len(k))) + 1 + sovHealth(uint64(v))
			n += mapEntrySize + 1 + sovHealth(uint64(mapEntrySize))
		}
	}
	l = len(m.SgndVersion)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	if len(m.LpFeeEarningHistories) > 0 {
		for k, v := range m.LpFeeEarningHistories {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHealth(uint64(l))
			}
			mapEntrySize := 1 + sovHealth(uint64(k)) + l
			n += mapEntrySize + 1 + sovHealth(uint64(mapEntrySize))
		}
	}
	if len(m.BaseFeeDistributionHistories) > 0 {
		for k, v := range m.BaseFeeDistributionHistories {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHealth(uint64(l))
			}
			mapEntrySize := 1 + sovHealth(uint64(k)) + l
			n += mapEntrySize + 1 + sovHealth(uint64(mapEntrySize))
		}
	}
	if len(m.ChainConfigs) > 0 {
		for k, v := range m.ChainConfigs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHealth(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovHealth(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovHealth(uint64(mapEntrySize))
		}
	}
	if len(m.BlockTimes) > 0 {
		for k, v := range m.BlockTimes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHealth(uint64(len(k))) + 1 + sovHealth(uint64(v))
			n += mapEntrySize + 1 + sovHealth(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SgnConsensusLogReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LpFeeEarningHistories) > 0 {
		for k, v := range m.LpFeeEarningHistories {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHealth(uint64(l))
			}
			mapEntrySize := 1 + sovHealth(uint64(k)) + l
			n += mapEntrySize + 1 + sovHealth(uint64(mapEntrySize))
		}
	}
	if len(m.BaseFeeDistributionHistories) > 0 {
		for k, v := range m.BaseFeeDistributionHistories {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHealth(uint64(l))
			}
			mapEntrySize := 1 + sovHealth(uint64(k)) + l
			n += mapEntrySize + 1 + sovHealth(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CbridgeContractAddr)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	l = len(m.OriginalTokenVaultContractAddr)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	l = len(m.PeggedTokenBridgeContractAddr)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	l = len(m.MsgBusContractAddr)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	return n
}

func (m *BaseFeeDistributionHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeType != 0 {
		n += 1 + sovHealth(uint64(m.BridgeType))
	}
	l = len(m.BaseFeeReceiverAddr)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	l = len(m.BaseFeeAmt)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	if m.TokenDecimal != 0 {
		n += 1 + sovHealth(uint64(m.TokenDecimal))
	}
	if m.SrcChainId != 0 {
		n += 1 + sovHealth(uint64(m.SrcChainId))
	}
	if m.DstChainId != 0 {
		n += 1 + sovHealth(uint64(m.DstChainId))
	}
	return n
}

func (m *LPFeeEarningHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DstTokenAddr)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	if m.DstChainId != 0 {
		n += 1 + sovHealth(uint64(m.DstChainId))
	}
	if len(m.Logs) > 0 {
		for k, v := range m.Logs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHealth(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovHealth(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovHealth(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LPFeeEarningLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DstChainLiquidityUsed)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	l = len(m.EarnedFee)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	l = len(m.DstChainLiquidityRemained)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	return n
}

func (m *ReportSgnAnalyticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovHealth(uint64(l))
	}
	return n
}

func (m *ErrMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHealth(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	return n
}

func sovHealth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHealth(x uint64) (n int) {
	return sovHealth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReportSgnAnalyticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportSgnAnalyticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportSgnAnalyticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Report = append(m.Report[:0], dAtA[iNdEx:postIndex]...)
			if m.Report == nil {
				m.Report = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SgnAnalyticsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SgnAnalyticsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SgnAnalyticsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockNums == nil {
				m.BlockNums = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHealth
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHealth
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHealth
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHealth(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHealth
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BlockNums[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgndVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SgndVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpFeeEarningHistories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LpFeeEarningHistories == nil {
				m.LpFeeEarningHistories = make(map[uint64]*LPFeeEarningHistory)
			}
			var mapkey uint64
			var mapvalue *LPFeeEarningHistory
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHealth
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHealth
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHealth
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LPFeeEarningHistory{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHealth(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHealth
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LpFeeEarningHistories[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFeeDistributionHistories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseFeeDistributionHistories == nil {
				m.BaseFeeDistributionHistories = make(map[uint64]*BaseFeeDistributionHistory)
			}
			var mapkey uint64
			var mapvalue *BaseFeeDistributionHistory
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHealth
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHealth
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHealth
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BaseFeeDistributionHistory{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHealth(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHealth
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BaseFeeDistributionHistories[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainConfigs == nil {
				m.ChainConfigs = make(map[string]*ChainConfig)
			}
			var mapkey string
			var mapvalue *ChainConfig
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHealth
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHealth
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHealth
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHealth
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHealth
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ChainConfig{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHealth(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHealth
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ChainConfigs[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockTimes == nil {
				m.BlockTimes = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHealth
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHealth
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHealth
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHealth(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHealth
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BlockTimes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SgnConsensusLogReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SgnConsensusLogReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SgnConsensusLogReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpFeeEarningHistories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LpFeeEarningHistories == nil {
				m.LpFeeEarningHistories = make(map[uint64]*LPFeeEarningHistory)
			}
			var mapkey uint64
			var mapvalue *LPFeeEarningHistory
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHealth
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHealth
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHealth
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LPFeeEarningHistory{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHealth(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHealth
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LpFeeEarningHistories[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFeeDistributionHistories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseFeeDistributionHistories == nil {
				m.BaseFeeDistributionHistories = make(map[uint64]*BaseFeeDistributionHistory)
			}
			var mapkey uint64
			var mapvalue *BaseFeeDistributionHistory
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHealth
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHealth
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHealth
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BaseFeeDistributionHistory{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHealth(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHealth
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BaseFeeDistributionHistories[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbridgeContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CbridgeContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalTokenVaultContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalTokenVaultContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedTokenBridgeContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggedTokenBridgeContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBusContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgBusContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseFeeDistributionHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseFeeDistributionHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseFeeDistributionHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeType", wireType)
			}
			m.BridgeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeType |= BridgeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFeeReceiverAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFeeReceiverAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFeeAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFeeAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDecimal", wireType)
			}
			m.TokenDecimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenDecimal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainId", wireType)
			}
			m.DstChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPFeeEarningHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPFeeEarningHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPFeeEarningHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstTokenAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstTokenAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainId", wireType)
			}
			m.DstChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logs == nil {
				m.Logs = make(map[string]*LPFeeEarningLog)
			}
			var mapkey string
			var mapvalue *LPFeeEarningLog
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHealth
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHealth
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHealth
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealth
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHealth
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHealth
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LPFeeEarningLog{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHealth(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHealth
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Logs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPFeeEarningLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPFeeEarningLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPFeeEarningLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainLiquidityUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChainLiquidityUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarnedFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarnedFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainLiquidityRemained", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChainLiquidityRemained = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportSgnAnalyticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportSgnAnalyticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportSgnAnalyticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHealth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHealth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHealth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHealth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHealth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHealth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHealth = fmt.Errorf("proto: unexpected end of group")
)
