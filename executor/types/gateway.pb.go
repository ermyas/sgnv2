// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gateway/gateway.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	types4 "github.com/celer-network/sgn-v2/common/types"
	relayer "github.com/celer-network/sgn-v2/relayer"
	types1 "github.com/celer-network/sgn-v2/x/cbridge/types"
	types3 "github.com/celer-network/sgn-v2/x/distribution/types"
	types2 "github.com/celer-network/sgn-v2/x/farming/types"
	types5 "github.com/celer-network/sgn-v2/x/message/types"
	types "github.com/celer-network/sgn-v2/x/pegbridge/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LPType int32

const (
	LPType_LP_TYPE_UNKNOWN LPType = 0
	LPType_LP_TYPE_ADD     LPType = 1
	LPType_LP_TYPE_REMOVE  LPType = 2
)

var LPType_name = map[int32]string{
	0: "LP_TYPE_UNKNOWN",
	1: "LP_TYPE_ADD",
	2: "LP_TYPE_REMOVE",
}

var LPType_value = map[string]int32{
	"LP_TYPE_UNKNOWN": 0,
	"LP_TYPE_ADD":     1,
	"LP_TYPE_REMOVE":  2,
}

func (x LPType) String() string {
	return proto.EnumName(LPType_name, int32(x))
}

func (LPType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{0}
}

type CSType int32

const (
	CSType_CT_UNKNOWN  CSType = 0
	CSType_CT_TX       CSType = 1
	CSType_CT_LP_ADD   CSType = 2
	CSType_CT_LP_RM    CSType = 3
	CSType_CT_DROP_GAS CSType = 4
)

var CSType_name = map[int32]string{
	0: "CT_UNKNOWN",
	1: "CT_TX",
	2: "CT_LP_ADD",
	3: "CT_LP_RM",
	4: "CT_DROP_GAS",
}

var CSType_value = map[string]int32{
	"CT_UNKNOWN":  0,
	"CT_TX":       1,
	"CT_LP_ADD":   2,
	"CT_LP_RM":    3,
	"CT_DROP_GAS": 4,
}

func (x CSType) String() string {
	return proto.EnumName(CSType_name, int32(x))
}

func (CSType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{1}
}

type CSOperation int32

const (
	CSOperation_CA_UNKNOWN           CSOperation = 0
	CSOperation_CA_NORMAL            CSOperation = 1
	CSOperation_CA_WAITING           CSOperation = 2
	CSOperation_CA_REPORT            CSOperation = 3
	CSOperation_CA_USE_RESYNC_TOOL   CSOperation = 4
	CSOperation_CA_USE_RESIGN_TOOL   CSOperation = 5
	CSOperation_CA_USE_RESUMBIT_TOOL CSOperation = 6
	CSOperation_CA_MORE_INFO_NEEDED  CSOperation = 7
	CSOperation_CA_CS_TOOL           CSOperation = 8
)

var CSOperation_name = map[int32]string{
	0: "CA_UNKNOWN",
	1: "CA_NORMAL",
	2: "CA_WAITING",
	3: "CA_REPORT",
	4: "CA_USE_RESYNC_TOOL",
	5: "CA_USE_RESIGN_TOOL",
	6: "CA_USE_RESUMBIT_TOOL",
	7: "CA_MORE_INFO_NEEDED",
	8: "CA_CS_TOOL",
}

var CSOperation_value = map[string]int32{
	"CA_UNKNOWN":           0,
	"CA_NORMAL":            1,
	"CA_WAITING":           2,
	"CA_REPORT":            3,
	"CA_USE_RESYNC_TOOL":   4,
	"CA_USE_RESIGN_TOOL":   5,
	"CA_USE_RESUMBIT_TOOL": 6,
	"CA_MORE_INFO_NEEDED":  7,
	"CA_CS_TOOL":           8,
}

func (x CSOperation) String() string {
	return proto.EnumName(CSOperation_name, int32(x))
}

func (CSOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{2}
}

type UserCaseStatus int32

const (
	UserCaseStatus_CC_UNKNOWN UserCaseStatus = 0
	// transfer related cases
	UserCaseStatus_CC_TRANSFER_NO_HISTORY                   UserCaseStatus = 1
	UserCaseStatus_CC_TRANSFER_SUBMITTING                   UserCaseStatus = 2
	UserCaseStatus_CC_TRANSFER_WAITING_FOR_SGN_CONFIRMATION UserCaseStatus = 3
	UserCaseStatus_CC_TRANSFER_WAITING_FOR_FUND_RELEASE     UserCaseStatus = 4
	UserCaseStatus_CC_TRANSFER_REQUESTING_REFUND            UserCaseStatus = 5
	UserCaseStatus_CC_TRANSFER_CONFIRMING_YOUR_REFUND       UserCaseStatus = 6
	// add related cases
	UserCaseStatus_CC_ADD_NO_HISTORY      UserCaseStatus = 7
	UserCaseStatus_CC_ADD_SUBMITTING      UserCaseStatus = 8
	UserCaseStatus_CC_ADD_WAITING_FOR_SGN UserCaseStatus = 9
	// withdraw related cases
	UserCaseStatus_CC_WAITING_FOR_LP           UserCaseStatus = 10
	UserCaseStatus_CC_WITHDRAW_SUBMITTING      UserCaseStatus = 11
	UserCaseStatus_CC_WITHDRAW_WAITING_FOR_SGN UserCaseStatus = 12
	// drop gas related cases
	UserCaseStatus_CC_DROP_GAS_FAIL      UserCaseStatus = 13
	UserCaseStatus_CC_DROP_GAS_SUCCESS   UserCaseStatus = 14
	UserCaseStatus_CC_DROP_GAS_NO_RECORD UserCaseStatus = 15
)

var UserCaseStatus_name = map[int32]string{
	0:  "CC_UNKNOWN",
	1:  "CC_TRANSFER_NO_HISTORY",
	2:  "CC_TRANSFER_SUBMITTING",
	3:  "CC_TRANSFER_WAITING_FOR_SGN_CONFIRMATION",
	4:  "CC_TRANSFER_WAITING_FOR_FUND_RELEASE",
	5:  "CC_TRANSFER_REQUESTING_REFUND",
	6:  "CC_TRANSFER_CONFIRMING_YOUR_REFUND",
	7:  "CC_ADD_NO_HISTORY",
	8:  "CC_ADD_SUBMITTING",
	9:  "CC_ADD_WAITING_FOR_SGN",
	10: "CC_WAITING_FOR_LP",
	11: "CC_WITHDRAW_SUBMITTING",
	12: "CC_WITHDRAW_WAITING_FOR_SGN",
	13: "CC_DROP_GAS_FAIL",
	14: "CC_DROP_GAS_SUCCESS",
	15: "CC_DROP_GAS_NO_RECORD",
}

var UserCaseStatus_value = map[string]int32{
	"CC_UNKNOWN":                               0,
	"CC_TRANSFER_NO_HISTORY":                   1,
	"CC_TRANSFER_SUBMITTING":                   2,
	"CC_TRANSFER_WAITING_FOR_SGN_CONFIRMATION": 3,
	"CC_TRANSFER_WAITING_FOR_FUND_RELEASE":     4,
	"CC_TRANSFER_REQUESTING_REFUND":            5,
	"CC_TRANSFER_CONFIRMING_YOUR_REFUND":       6,
	"CC_ADD_NO_HISTORY":                        7,
	"CC_ADD_SUBMITTING":                        8,
	"CC_ADD_WAITING_FOR_SGN":                   9,
	"CC_WAITING_FOR_LP":                        10,
	"CC_WITHDRAW_SUBMITTING":                   11,
	"CC_WITHDRAW_WAITING_FOR_SGN":              12,
	"CC_DROP_GAS_FAIL":                         13,
	"CC_DROP_GAS_SUCCESS":                      14,
	"CC_DROP_GAS_NO_RECORD":                    15,
}

func (x UserCaseStatus) String() string {
	return proto.EnumName(UserCaseStatus_name, int32(x))
}

func (UserCaseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{3}
}

type WithdrawMethodType int32

const (
	WithdrawMethodType_WD_METHOD_TYPE_UNDEFINED     WithdrawMethodType = 0
	WithdrawMethodType_WD_METHOD_TYPE_ONE_RM        WithdrawMethodType = 1
	WithdrawMethodType_WD_METHOD_TYPE_ALL_IN_ONE    WithdrawMethodType = 2
	WithdrawMethodType_WD_METHOD_TYPE_STAKING_CLAIM WithdrawMethodType = 3
)

var WithdrawMethodType_name = map[int32]string{
	0: "WD_METHOD_TYPE_UNDEFINED",
	1: "WD_METHOD_TYPE_ONE_RM",
	2: "WD_METHOD_TYPE_ALL_IN_ONE",
	3: "WD_METHOD_TYPE_STAKING_CLAIM",
}

var WithdrawMethodType_value = map[string]int32{
	"WD_METHOD_TYPE_UNDEFINED":     0,
	"WD_METHOD_TYPE_ONE_RM":        1,
	"WD_METHOD_TYPE_ALL_IN_ONE":    2,
	"WD_METHOD_TYPE_STAKING_CLAIM": 3,
}

func (x WithdrawMethodType) String() string {
	return proto.EnumName(WithdrawMethodType_name, int32(x))
}

func (WithdrawMethodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{4}
}

type ErrCode int32

const (
	ErrCode_ERROR_CODE_UNDEFINED                    ErrCode = 0
	ErrCode_ERROR_CODE_COMMON                       ErrCode = 500
	ErrCode_ERROR_NO_TOKEN_ON_DST_CHAIN             ErrCode = 1001
	ErrCode_ERROR_NO_TOKEN_ON_SRC_CHAIN             ErrCode = 1002
	ErrCode_ERROR_INIT_WITHDRAW_FAILED              ErrCode = 1003
	ErrCode_ERROR_CODE_NO_ENOUGH_TOKEN_ON_DST_CHAIN ErrCode = 1004
)

var ErrCode_name = map[int32]string{
	0:    "ERROR_CODE_UNDEFINED",
	500:  "ERROR_CODE_COMMON",
	1001: "ERROR_NO_TOKEN_ON_DST_CHAIN",
	1002: "ERROR_NO_TOKEN_ON_SRC_CHAIN",
	1003: "ERROR_INIT_WITHDRAW_FAILED",
	1004: "ERROR_CODE_NO_ENOUGH_TOKEN_ON_DST_CHAIN",
}

var ErrCode_value = map[string]int32{
	"ERROR_CODE_UNDEFINED":                    0,
	"ERROR_CODE_COMMON":                       500,
	"ERROR_NO_TOKEN_ON_DST_CHAIN":             1001,
	"ERROR_NO_TOKEN_ON_SRC_CHAIN":             1002,
	"ERROR_INIT_WITHDRAW_FAILED":              1003,
	"ERROR_CODE_NO_ENOUGH_TOKEN_ON_DST_CHAIN": 1004,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{5}
}

type InitPegRefundRequest struct {
	RefId []byte `protobuf:"bytes,1,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
}

func (m *InitPegRefundRequest) Reset()         { *m = InitPegRefundRequest{} }
func (m *InitPegRefundRequest) String() string { return proto.CompactTextString(m) }
func (*InitPegRefundRequest) ProtoMessage()    {}
func (*InitPegRefundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{0}
}
func (m *InitPegRefundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitPegRefundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitPegRefundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitPegRefundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitPegRefundRequest.Merge(m, src)
}
func (m *InitPegRefundRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitPegRefundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitPegRefundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitPegRefundRequest proto.InternalMessageInfo

func (m *InitPegRefundRequest) GetRefId() []byte {
	if m != nil {
		return m.RefId
	}
	return nil
}

type InitPegRefundResponse struct {
	Err *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *InitPegRefundResponse) Reset()         { *m = InitPegRefundResponse{} }
func (m *InitPegRefundResponse) String() string { return proto.CompactTextString(m) }
func (*InitPegRefundResponse) ProtoMessage()    {}
func (*InitPegRefundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{1}
}
func (m *InitPegRefundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitPegRefundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitPegRefundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitPegRefundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitPegRefundResponse.Merge(m, src)
}
func (m *InitPegRefundResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitPegRefundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitPegRefundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitPegRefundResponse proto.InternalMessageInfo

func (m *InitPegRefundResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

type InitWithdrawRequest struct {
	WithdrawReq []byte `protobuf:"bytes,1,opt,name=withdraw_req,json=withdrawReq,proto3" json:"withdraw_req,omitempty"`
	Sig         []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *InitWithdrawRequest) Reset()         { *m = InitWithdrawRequest{} }
func (m *InitWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*InitWithdrawRequest) ProtoMessage()    {}
func (*InitWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{2}
}
func (m *InitWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitWithdrawRequest.Merge(m, src)
}
func (m *InitWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitWithdrawRequest proto.InternalMessageInfo

func (m *InitWithdrawRequest) GetWithdrawReq() []byte {
	if m != nil {
		return m.WithdrawReq
	}
	return nil
}

func (m *InitWithdrawRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type InitWithdrawResponse struct {
	Err *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *InitWithdrawResponse) Reset()         { *m = InitWithdrawResponse{} }
func (m *InitWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*InitWithdrawResponse) ProtoMessage()    {}
func (*InitWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{3}
}
func (m *InitWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitWithdrawResponse.Merge(m, src)
}
func (m *InitWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitWithdrawResponse proto.InternalMessageInfo

func (m *InitWithdrawResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetUsrBalanceRequest struct {
	Sig         []byte `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	SigAddr     string `protobuf:"bytes,2,opt,name=sig_addr,json=sigAddr,proto3" json:"sig_addr,omitempty"`
	UsrAddr     string `protobuf:"bytes,3,opt,name=usr_addr,json=usrAddr,proto3" json:"usr_addr,omitempty"`
	ChainId     uint32 `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TokenSymbol string `protobuf:"bytes,5,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
}

func (m *GetUsrBalanceRequest) Reset()         { *m = GetUsrBalanceRequest{} }
func (m *GetUsrBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*GetUsrBalanceRequest) ProtoMessage()    {}
func (*GetUsrBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{4}
}
func (m *GetUsrBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsrBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsrBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUsrBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsrBalanceRequest.Merge(m, src)
}
func (m *GetUsrBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUsrBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsrBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsrBalanceRequest proto.InternalMessageInfo

func (m *GetUsrBalanceRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *GetUsrBalanceRequest) GetSigAddr() string {
	if m != nil {
		return m.SigAddr
	}
	return ""
}

func (m *GetUsrBalanceRequest) GetUsrAddr() string {
	if m != nil {
		return m.UsrAddr
	}
	return ""
}

func (m *GetUsrBalanceRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GetUsrBalanceRequest) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

type GetUsrBalanceResponse struct {
	Balance string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *GetUsrBalanceResponse) Reset()         { *m = GetUsrBalanceResponse{} }
func (m *GetUsrBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*GetUsrBalanceResponse) ProtoMessage()    {}
func (*GetUsrBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{5}
}
func (m *GetUsrBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsrBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsrBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUsrBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsrBalanceResponse.Merge(m, src)
}
func (m *GetUsrBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUsrBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsrBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsrBalanceResponse proto.InternalMessageInfo

func (m *GetUsrBalanceResponse) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

type ClaimPegBridgeFeeRequest struct {
	Msg *types.MsgClaimFee `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ClaimPegBridgeFeeRequest) Reset()         { *m = ClaimPegBridgeFeeRequest{} }
func (m *ClaimPegBridgeFeeRequest) String() string { return proto.CompactTextString(m) }
func (*ClaimPegBridgeFeeRequest) ProtoMessage()    {}
func (*ClaimPegBridgeFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{6}
}
func (m *ClaimPegBridgeFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimPegBridgeFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimPegBridgeFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimPegBridgeFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimPegBridgeFeeRequest.Merge(m, src)
}
func (m *ClaimPegBridgeFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimPegBridgeFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimPegBridgeFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimPegBridgeFeeRequest proto.InternalMessageInfo

func (m *ClaimPegBridgeFeeRequest) GetMsg() *types.MsgClaimFee {
	if m != nil {
		return m.Msg
	}
	return nil
}

type ClaimPegBridgeFeeResponse struct {
	Err  *ErrMsg                    `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Resp *types.MsgClaimFeeResponse `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *ClaimPegBridgeFeeResponse) Reset()         { *m = ClaimPegBridgeFeeResponse{} }
func (m *ClaimPegBridgeFeeResponse) String() string { return proto.CompactTextString(m) }
func (*ClaimPegBridgeFeeResponse) ProtoMessage()    {}
func (*ClaimPegBridgeFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{7}
}
func (m *ClaimPegBridgeFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimPegBridgeFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimPegBridgeFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimPegBridgeFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimPegBridgeFeeResponse.Merge(m, src)
}
func (m *ClaimPegBridgeFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClaimPegBridgeFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimPegBridgeFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimPegBridgeFeeResponse proto.InternalMessageInfo

func (m *ClaimPegBridgeFeeResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ClaimPegBridgeFeeResponse) GetResp() *types.MsgClaimFeeResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type GetCampaignScoresRequest struct {
	Date       uint32 `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	BeginBlock uint64 `protobuf:"varint,2,opt,name=begin_block,json=beginBlock,proto3" json:"begin_block,omitempty"`
	EndBlock   uint64 `protobuf:"varint,3,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
}

func (m *GetCampaignScoresRequest) Reset()         { *m = GetCampaignScoresRequest{} }
func (m *GetCampaignScoresRequest) String() string { return proto.CompactTextString(m) }
func (*GetCampaignScoresRequest) ProtoMessage()    {}
func (*GetCampaignScoresRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{8}
}
func (m *GetCampaignScoresRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCampaignScoresRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCampaignScoresRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCampaignScoresRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCampaignScoresRequest.Merge(m, src)
}
func (m *GetCampaignScoresRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCampaignScoresRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCampaignScoresRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCampaignScoresRequest proto.InternalMessageInfo

func (m *GetCampaignScoresRequest) GetDate() uint32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *GetCampaignScoresRequest) GetBeginBlock() uint64 {
	if m != nil {
		return m.BeginBlock
	}
	return 0
}

func (m *GetCampaignScoresRequest) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

type GetCampaignScoresResponse struct {
	Scores []*CampaignScore `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty"`
	Err    *ErrMsg          `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Begin  uint64           `protobuf:"varint,3,opt,name=begin,proto3" json:"begin,omitempty"`
}

func (m *GetCampaignScoresResponse) Reset()         { *m = GetCampaignScoresResponse{} }
func (m *GetCampaignScoresResponse) String() string { return proto.CompactTextString(m) }
func (*GetCampaignScoresResponse) ProtoMessage()    {}
func (*GetCampaignScoresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{9}
}
func (m *GetCampaignScoresResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCampaignScoresResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCampaignScoresResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCampaignScoresResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCampaignScoresResponse.Merge(m, src)
}
func (m *GetCampaignScoresResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCampaignScoresResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCampaignScoresResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCampaignScoresResponse proto.InternalMessageInfo

func (m *GetCampaignScoresResponse) GetScores() []*CampaignScore {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *GetCampaignScoresResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetCampaignScoresResponse) GetBegin() uint64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

type CampaignScore struct {
	UsrAddr string `protobuf:"bytes,1,opt,name=usr_addr,json=usrAddr,proto3" json:"usr_addr,omitempty"`
	Score   uint64 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *CampaignScore) Reset()         { *m = CampaignScore{} }
func (m *CampaignScore) String() string { return proto.CompactTextString(m) }
func (*CampaignScore) ProtoMessage()    {}
func (*CampaignScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{10}
}
func (m *CampaignScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CampaignScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CampaignScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CampaignScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CampaignScore.Merge(m, src)
}
func (m *CampaignScore) XXX_Size() int {
	return m.Size()
}
func (m *CampaignScore) XXX_DiscardUnknown() {
	xxx_messageInfo_CampaignScore.DiscardUnknown(m)
}

var xxx_messageInfo_CampaignScore proto.InternalMessageInfo

func (m *CampaignScore) GetUsrAddr() string {
	if m != nil {
		return m.UsrAddr
	}
	return ""
}

func (m *CampaignScore) GetScore() uint64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type QueryLiquidityStatusResponse struct {
	Err         *ErrMsg               `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Status      types1.WithdrawStatus `protobuf:"varint,2,opt,name=status,proto3,enum=sgn.cbridge.v1.WithdrawStatus" json:"status,omitempty"`
	WdOnchain   []byte                `protobuf:"bytes,3,opt,name=wd_onchain,json=wdOnchain,proto3" json:"wd_onchain,omitempty"`
	SortedSigs  [][]byte              `protobuf:"bytes,4,rep,name=sorted_sigs,json=sortedSigs,proto3" json:"sorted_sigs,omitempty"`
	Signers     [][]byte              `protobuf:"bytes,5,rep,name=signers,proto3" json:"signers,omitempty"`
	Powers      [][]byte              `protobuf:"bytes,6,rep,name=powers,proto3" json:"powers,omitempty"`
	BlockTxLink string                `protobuf:"bytes,7,opt,name=block_tx_link,json=blockTxLink,proto3" json:"block_tx_link,omitempty"`
	BlockDelay  uint32                `protobuf:"varint,8,opt,name=block_delay,json=blockDelay,proto3" json:"block_delay,omitempty"`
}

func (m *QueryLiquidityStatusResponse) Reset()         { *m = QueryLiquidityStatusResponse{} }
func (m *QueryLiquidityStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityStatusResponse) ProtoMessage()    {}
func (*QueryLiquidityStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{11}
}
func (m *QueryLiquidityStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityStatusResponse.Merge(m, src)
}
func (m *QueryLiquidityStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityStatusResponse proto.InternalMessageInfo

func (m *QueryLiquidityStatusResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *QueryLiquidityStatusResponse) GetStatus() types1.WithdrawStatus {
	if m != nil {
		return m.Status
	}
	return types1.WithdrawStatus_WD_UNKNOWN
}

func (m *QueryLiquidityStatusResponse) GetWdOnchain() []byte {
	if m != nil {
		return m.WdOnchain
	}
	return nil
}

func (m *QueryLiquidityStatusResponse) GetSortedSigs() [][]byte {
	if m != nil {
		return m.SortedSigs
	}
	return nil
}

func (m *QueryLiquidityStatusResponse) GetSigners() [][]byte {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *QueryLiquidityStatusResponse) GetPowers() [][]byte {
	if m != nil {
		return m.Powers
	}
	return nil
}

func (m *QueryLiquidityStatusResponse) GetBlockTxLink() string {
	if m != nil {
		return m.BlockTxLink
	}
	return ""
}

func (m *QueryLiquidityStatusResponse) GetBlockDelay() uint32 {
	if m != nil {
		return m.BlockDelay
	}
	return 0
}

type Chain struct {
	Id                  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon                string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	BlockDelay          uint32 `protobuf:"varint,4,opt,name=block_delay,json=blockDelay,proto3" json:"block_delay,omitempty"`
	GasTokenSymbol      string `protobuf:"bytes,5,opt,name=gas_token_symbol,json=gasTokenSymbol,proto3" json:"gas_token_symbol,omitempty"`
	ExploreUrl          string `protobuf:"bytes,6,opt,name=explore_url,json=exploreUrl,proto3" json:"explore_url,omitempty"`
	ContractAddr        string `protobuf:"bytes,8,opt,name=contract_addr,json=contractAddr,proto3" json:"contract_addr,omitempty"`
	DropGasAmt          string `protobuf:"bytes,9,opt,name=drop_gas_amt,json=dropGasAmt,proto3" json:"drop_gas_amt,omitempty"`
	DropGasCostAmt      string `protobuf:"bytes,11,opt,name=drop_gas_cost_amt,json=dropGasCostAmt,proto3" json:"drop_gas_cost_amt,omitempty"`
	DropGasBalanceAlert string `protobuf:"bytes,12,opt,name=drop_gas_balance_alert,json=dropGasBalanceAlert,proto3" json:"drop_gas_balance_alert,omitempty"`
	SuggestedGasCost    uint64 `protobuf:"varint,13,opt,name=suggested_gas_cost,json=suggestedGasCost,proto3" json:"suggested_gas_cost,omitempty"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{12}
}
func (m *Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return m.Size()
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

func (m *Chain) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Chain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Chain) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Chain) GetBlockDelay() uint32 {
	if m != nil {
		return m.BlockDelay
	}
	return 0
}

func (m *Chain) GetGasTokenSymbol() string {
	if m != nil {
		return m.GasTokenSymbol
	}
	return ""
}

func (m *Chain) GetExploreUrl() string {
	if m != nil {
		return m.ExploreUrl
	}
	return ""
}

func (m *Chain) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *Chain) GetDropGasAmt() string {
	if m != nil {
		return m.DropGasAmt
	}
	return ""
}

func (m *Chain) GetDropGasCostAmt() string {
	if m != nil {
		return m.DropGasCostAmt
	}
	return ""
}

func (m *Chain) GetDropGasBalanceAlert() string {
	if m != nil {
		return m.DropGasBalanceAlert
	}
	return ""
}

func (m *Chain) GetSuggestedGasCost() uint64 {
	if m != nil {
		return m.SuggestedGasCost
	}
	return 0
}

type ChainTokenInfo struct {
	Token []*TokenInfo `protobuf:"bytes,1,rep,name=token,proto3" json:"token,omitempty"`
}

func (m *ChainTokenInfo) Reset()         { *m = ChainTokenInfo{} }
func (m *ChainTokenInfo) String() string { return proto.CompactTextString(m) }
func (*ChainTokenInfo) ProtoMessage()    {}
func (*ChainTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{13}
}
func (m *ChainTokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainTokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainTokenInfo.Merge(m, src)
}
func (m *ChainTokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChainTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChainTokenInfo proto.InternalMessageInfo

func (m *ChainTokenInfo) GetToken() []*TokenInfo {
	if m != nil {
		return m.Token
	}
	return nil
}

type TokenInfo struct {
	Token *types1.Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Name  string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon  string        `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (m *TokenInfo) Reset()         { *m = TokenInfo{} }
func (m *TokenInfo) String() string { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()    {}
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{14}
}
func (m *TokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfo.Merge(m, src)
}
func (m *TokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfo proto.InternalMessageInfo

func (m *TokenInfo) GetToken() *types1.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *TokenInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenInfo) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type TransferInfo struct {
	Chain  *Chain        `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Token  *types1.Token `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Amount string        `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *TransferInfo) Reset()         { *m = TransferInfo{} }
func (m *TransferInfo) String() string { return proto.CompactTextString(m) }
func (*TransferInfo) ProtoMessage()    {}
func (*TransferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{15}
}
func (m *TransferInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferInfo.Merge(m, src)
}
func (m *TransferInfo) XXX_Size() int {
	return m.Size()
}
func (m *TransferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransferInfo proto.InternalMessageInfo

func (m *TransferInfo) GetChain() *Chain {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *TransferInfo) GetToken() *types1.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *TransferInfo) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type GetTransferStatusRequest struct {
	TransferId string `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
}

func (m *GetTransferStatusRequest) Reset()         { *m = GetTransferStatusRequest{} }
func (m *GetTransferStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransferStatusRequest) ProtoMessage()    {}
func (*GetTransferStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{16}
}
func (m *GetTransferStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransferStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransferStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTransferStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransferStatusRequest.Merge(m, src)
}
func (m *GetTransferStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTransferStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransferStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransferStatusRequest proto.InternalMessageInfo

func (m *GetTransferStatusRequest) GetTransferId() string {
	if m != nil {
		return m.TransferId
	}
	return ""
}

type GetTransferStatusResponse struct {
	Err            *ErrMsg                      `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Status         types1.TransferHistoryStatus `protobuf:"varint,2,opt,name=status,proto3,enum=sgn.cbridge.v1.TransferHistoryStatus" json:"status,omitempty"`
	WdOnchain      []byte                       `protobuf:"bytes,3,opt,name=wd_onchain,json=wdOnchain,proto3" json:"wd_onchain,omitempty"`
	SortedSigs     [][]byte                     `protobuf:"bytes,4,rep,name=sorted_sigs,json=sortedSigs,proto3" json:"sorted_sigs,omitempty"`
	Signers        [][]byte                     `protobuf:"bytes,5,rep,name=signers,proto3" json:"signers,omitempty"`
	Powers         [][]byte                     `protobuf:"bytes,6,rep,name=powers,proto3" json:"powers,omitempty"`
	RefundReason   types1.XferStatus            `protobuf:"varint,7,opt,name=refund_reason,json=refundReason,proto3,enum=sgn.cbridge.v1.XferStatus" json:"refund_reason,omitempty"`
	BlockDelay     uint32                       `protobuf:"varint,8,opt,name=block_delay,json=blockDelay,proto3" json:"block_delay,omitempty"`
	SrcBlockTxLink string                       `protobuf:"bytes,9,opt,name=src_block_tx_link,json=srcBlockTxLink,proto3" json:"src_block_tx_link,omitempty"`
	DstBlockTxLink string                       `protobuf:"bytes,10,opt,name=dst_block_tx_link,json=dstBlockTxLink,proto3" json:"dst_block_tx_link,omitempty"`
}

func (m *GetTransferStatusResponse) Reset()         { *m = GetTransferStatusResponse{} }
func (m *GetTransferStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransferStatusResponse) ProtoMessage()    {}
func (*GetTransferStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{17}
}
func (m *GetTransferStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransferStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransferStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTransferStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransferStatusResponse.Merge(m, src)
}
func (m *GetTransferStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTransferStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransferStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransferStatusResponse proto.InternalMessageInfo

func (m *GetTransferStatusResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetTransferStatusResponse) GetStatus() types1.TransferHistoryStatus {
	if m != nil {
		return m.Status
	}
	return types1.TransferHistoryStatus_TRANSFER_UNKNOWN
}

func (m *GetTransferStatusResponse) GetWdOnchain() []byte {
	if m != nil {
		return m.WdOnchain
	}
	return nil
}

func (m *GetTransferStatusResponse) GetSortedSigs() [][]byte {
	if m != nil {
		return m.SortedSigs
	}
	return nil
}

func (m *GetTransferStatusResponse) GetSigners() [][]byte {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *GetTransferStatusResponse) GetPowers() [][]byte {
	if m != nil {
		return m.Powers
	}
	return nil
}

func (m *GetTransferStatusResponse) GetRefundReason() types1.XferStatus {
	if m != nil {
		return m.RefundReason
	}
	return types1.XferStatus_UNKNOWN
}

func (m *GetTransferStatusResponse) GetBlockDelay() uint32 {
	if m != nil {
		return m.BlockDelay
	}
	return 0
}

func (m *GetTransferStatusResponse) GetSrcBlockTxLink() string {
	if m != nil {
		return m.SrcBlockTxLink
	}
	return ""
}

func (m *GetTransferStatusResponse) GetDstBlockTxLink() string {
	if m != nil {
		return m.DstBlockTxLink
	}
	return ""
}

type GetTransferConfigsRequest struct {
}

func (m *GetTransferConfigsRequest) Reset()         { *m = GetTransferConfigsRequest{} }
func (m *GetTransferConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransferConfigsRequest) ProtoMessage()    {}
func (*GetTransferConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{18}
}
func (m *GetTransferConfigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransferConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransferConfigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTransferConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransferConfigsRequest.Merge(m, src)
}
func (m *GetTransferConfigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTransferConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransferConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransferConfigsRequest proto.InternalMessageInfo

type GetTransferConfigsResponse struct {
	Err                       *ErrMsg                    `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Chains                    []*Chain                   `protobuf:"bytes,2,rep,name=chains,proto3" json:"chains,omitempty"`
	ChainToken                map[uint32]*ChainTokenInfo `protobuf:"bytes,3,rep,name=chain_token,json=chainToken,proto3" json:"chain_token,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FarmingRewardContractAddr string                     `protobuf:"bytes,4,opt,name=farming_reward_contract_addr,json=farmingRewardContractAddr,proto3" json:"farming_reward_contract_addr,omitempty"`
	PeggedPairConfigs         []*PeggedPairConfig        `protobuf:"bytes,5,rep,name=pegged_pair_configs,json=peggedPairConfigs,proto3" json:"pegged_pair_configs,omitempty"`
}

func (m *GetTransferConfigsResponse) Reset()         { *m = GetTransferConfigsResponse{} }
func (m *GetTransferConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransferConfigsResponse) ProtoMessage()    {}
func (*GetTransferConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{19}
}
func (m *GetTransferConfigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransferConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransferConfigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTransferConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransferConfigsResponse.Merge(m, src)
}
func (m *GetTransferConfigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTransferConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransferConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransferConfigsResponse proto.InternalMessageInfo

func (m *GetTransferConfigsResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetTransferConfigsResponse) GetChains() []*Chain {
	if m != nil {
		return m.Chains
	}
	return nil
}

func (m *GetTransferConfigsResponse) GetChainToken() map[uint32]*ChainTokenInfo {
	if m != nil {
		return m.ChainToken
	}
	return nil
}

func (m *GetTransferConfigsResponse) GetFarmingRewardContractAddr() string {
	if m != nil {
		return m.FarmingRewardContractAddr
	}
	return ""
}

func (m *GetTransferConfigsResponse) GetPeggedPairConfigs() []*PeggedPairConfig {
	if m != nil {
		return m.PeggedPairConfigs
	}
	return nil
}

type PeggedPairConfig struct {
	OrgChainId                 uint32     `protobuf:"varint,1,opt,name=org_chain_id,json=orgChainId,proto3" json:"org_chain_id,omitempty"`
	OrgToken                   *TokenInfo `protobuf:"bytes,2,opt,name=org_token,json=orgToken,proto3" json:"org_token,omitempty"`
	PeggedChainId              uint32     `protobuf:"varint,3,opt,name=pegged_chain_id,json=peggedChainId,proto3" json:"pegged_chain_id,omitempty"`
	PeggedToken                *TokenInfo `protobuf:"bytes,4,opt,name=pegged_token,json=peggedToken,proto3" json:"pegged_token,omitempty"`
	PeggedDepositContractAddr  string     `protobuf:"bytes,5,opt,name=pegged_deposit_contract_addr,json=peggedDepositContractAddr,proto3" json:"pegged_deposit_contract_addr,omitempty"`
	PeggedBurnContractAddr     string     `protobuf:"bytes,6,opt,name=pegged_burn_contract_addr,json=peggedBurnContractAddr,proto3" json:"pegged_burn_contract_addr,omitempty"`
	CanonicalTokenContractAddr string     `protobuf:"bytes,7,opt,name=canonical_token_contract_addr,json=canonicalTokenContractAddr,proto3" json:"canonical_token_contract_addr,omitempty"`
}

func (m *PeggedPairConfig) Reset()         { *m = PeggedPairConfig{} }
func (m *PeggedPairConfig) String() string { return proto.CompactTextString(m) }
func (*PeggedPairConfig) ProtoMessage()    {}
func (*PeggedPairConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{20}
}
func (m *PeggedPairConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeggedPairConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeggedPairConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeggedPairConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeggedPairConfig.Merge(m, src)
}
func (m *PeggedPairConfig) XXX_Size() int {
	return m.Size()
}
func (m *PeggedPairConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PeggedPairConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PeggedPairConfig proto.InternalMessageInfo

func (m *PeggedPairConfig) GetOrgChainId() uint32 {
	if m != nil {
		return m.OrgChainId
	}
	return 0
}

func (m *PeggedPairConfig) GetOrgToken() *TokenInfo {
	if m != nil {
		return m.OrgToken
	}
	return nil
}

func (m *PeggedPairConfig) GetPeggedChainId() uint32 {
	if m != nil {
		return m.PeggedChainId
	}
	return 0
}

func (m *PeggedPairConfig) GetPeggedToken() *TokenInfo {
	if m != nil {
		return m.PeggedToken
	}
	return nil
}

func (m *PeggedPairConfig) GetPeggedDepositContractAddr() string {
	if m != nil {
		return m.PeggedDepositContractAddr
	}
	return ""
}

func (m *PeggedPairConfig) GetPeggedBurnContractAddr() string {
	if m != nil {
		return m.PeggedBurnContractAddr
	}
	return ""
}

func (m *PeggedPairConfig) GetCanonicalTokenContractAddr() string {
	if m != nil {
		return m.CanonicalTokenContractAddr
	}
	return ""
}

type GetTokenInfoRequest struct {
	ChainId     uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TokenSymbol string `protobuf:"bytes,2,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
}

func (m *GetTokenInfoRequest) Reset()         { *m = GetTokenInfoRequest{} }
func (m *GetTokenInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenInfoRequest) ProtoMessage()    {}
func (*GetTokenInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{21}
}
func (m *GetTokenInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTokenInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTokenInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTokenInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenInfoRequest.Merge(m, src)
}
func (m *GetTokenInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTokenInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenInfoRequest proto.InternalMessageInfo

func (m *GetTokenInfoRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GetTokenInfoRequest) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

type GetTokenInfoResponse struct {
	Err       *ErrMsg    `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	TokenInfo *TokenInfo `protobuf:"bytes,2,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
}

func (m *GetTokenInfoResponse) Reset()         { *m = GetTokenInfoResponse{} }
func (m *GetTokenInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetTokenInfoResponse) ProtoMessage()    {}
func (*GetTokenInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{22}
}
func (m *GetTokenInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTokenInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTokenInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTokenInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenInfoResponse.Merge(m, src)
}
func (m *GetTokenInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTokenInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenInfoResponse proto.InternalMessageInfo

func (m *GetTokenInfoResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetTokenInfoResponse) GetTokenInfo() *TokenInfo {
	if m != nil {
		return m.TokenInfo
	}
	return nil
}

type EstimateAmtRequest struct {
	SrcChainId        uint32 `protobuf:"varint,1,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DstChainId        uint32 `protobuf:"varint,2,opt,name=dst_chain_id,json=dstChainId,proto3" json:"dst_chain_id,omitempty"`
	TokenSymbol       string `protobuf:"bytes,3,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	Amt               string `protobuf:"bytes,4,opt,name=amt,proto3" json:"amt,omitempty"`
	UsrAddr           string `protobuf:"bytes,5,opt,name=usr_addr,json=usrAddr,proto3" json:"usr_addr,omitempty"`
	SlippageTolerance uint32 `protobuf:"varint,6,opt,name=slippage_tolerance,json=slippageTolerance,proto3" json:"slippage_tolerance,omitempty"`
	IsPegged          bool   `protobuf:"varint,7,opt,name=is_pegged,json=isPegged,proto3" json:"is_pegged,omitempty"`
}

func (m *EstimateAmtRequest) Reset()         { *m = EstimateAmtRequest{} }
func (m *EstimateAmtRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateAmtRequest) ProtoMessage()    {}
func (*EstimateAmtRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{23}
}
func (m *EstimateAmtRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateAmtRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateAmtRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateAmtRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateAmtRequest.Merge(m, src)
}
func (m *EstimateAmtRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateAmtRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateAmtRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateAmtRequest proto.InternalMessageInfo

func (m *EstimateAmtRequest) GetSrcChainId() uint32 {
	if m != nil {
		return m.SrcChainId
	}
	return 0
}

func (m *EstimateAmtRequest) GetDstChainId() uint32 {
	if m != nil {
		return m.DstChainId
	}
	return 0
}

func (m *EstimateAmtRequest) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *EstimateAmtRequest) GetAmt() string {
	if m != nil {
		return m.Amt
	}
	return ""
}

func (m *EstimateAmtRequest) GetUsrAddr() string {
	if m != nil {
		return m.UsrAddr
	}
	return ""
}

func (m *EstimateAmtRequest) GetSlippageTolerance() uint32 {
	if m != nil {
		return m.SlippageTolerance
	}
	return 0
}

func (m *EstimateAmtRequest) GetIsPegged() bool {
	if m != nil {
		return m.IsPegged
	}
	return false
}

type EstimateAmtResponse struct {
	Err                 *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	EqValueTokenAmt     string  `protobuf:"bytes,2,opt,name=eq_value_token_amt,json=eqValueTokenAmt,proto3" json:"eq_value_token_amt,omitempty"`
	BridgeRate          float32 `protobuf:"fixed32,3,opt,name=bridge_rate,json=bridgeRate,proto3" json:"bridge_rate,omitempty"`
	PercFee             string  `protobuf:"bytes,4,opt,name=perc_fee,json=percFee,proto3" json:"perc_fee,omitempty"`
	BaseFee             string  `protobuf:"bytes,7,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	SlippageTolerance   uint32  `protobuf:"varint,5,opt,name=slippage_tolerance,json=slippageTolerance,proto3" json:"slippage_tolerance,omitempty"`
	MaxSlippage         uint32  `protobuf:"varint,6,opt,name=max_slippage,json=maxSlippage,proto3" json:"max_slippage,omitempty"`
	EstimatedReceiveAmt string  `protobuf:"bytes,8,opt,name=estimated_receive_amt,json=estimatedReceiveAmt,proto3" json:"estimated_receive_amt,omitempty"`
}

func (m *EstimateAmtResponse) Reset()         { *m = EstimateAmtResponse{} }
func (m *EstimateAmtResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateAmtResponse) ProtoMessage()    {}
func (*EstimateAmtResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{24}
}
func (m *EstimateAmtResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateAmtResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateAmtResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateAmtResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateAmtResponse.Merge(m, src)
}
func (m *EstimateAmtResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateAmtResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateAmtResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateAmtResponse proto.InternalMessageInfo

func (m *EstimateAmtResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *EstimateAmtResponse) GetEqValueTokenAmt() string {
	if m != nil {
		return m.EqValueTokenAmt
	}
	return ""
}

func (m *EstimateAmtResponse) GetBridgeRate() float32 {
	if m != nil {
		return m.BridgeRate
	}
	return 0
}

func (m *EstimateAmtResponse) GetPercFee() string {
	if m != nil {
		return m.PercFee
	}
	return ""
}

func (m *EstimateAmtResponse) GetBaseFee() string {
	if m != nil {
		return m.BaseFee
	}
	return ""
}

func (m *EstimateAmtResponse) GetSlippageTolerance() uint32 {
	if m != nil {
		return m.SlippageTolerance
	}
	return 0
}

func (m *EstimateAmtResponse) GetMaxSlippage() uint32 {
	if m != nil {
		return m.MaxSlippage
	}
	return 0
}

func (m *EstimateAmtResponse) GetEstimatedReceiveAmt() string {
	if m != nil {
		return m.EstimatedReceiveAmt
	}
	return ""
}

type WithdrawInfo struct {
	ChainId           uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Amount            string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	SlippageTolerance uint32 `protobuf:"varint,3,opt,name=slippage_tolerance,json=slippageTolerance,proto3" json:"slippage_tolerance,omitempty"`
}

func (m *WithdrawInfo) Reset()         { *m = WithdrawInfo{} }
func (m *WithdrawInfo) String() string { return proto.CompactTextString(m) }
func (*WithdrawInfo) ProtoMessage()    {}
func (*WithdrawInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{25}
}
func (m *WithdrawInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawInfo.Merge(m, src)
}
func (m *WithdrawInfo) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawInfo proto.InternalMessageInfo

func (m *WithdrawInfo) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *WithdrawInfo) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *WithdrawInfo) GetSlippageTolerance() uint32 {
	if m != nil {
		return m.SlippageTolerance
	}
	return 0
}

type EstimateWithdrawAmtRequest struct {
	SrcWithdraws []*WithdrawInfo `protobuf:"bytes,1,rep,name=src_withdraws,json=srcWithdraws,proto3" json:"src_withdraws,omitempty"`
	DstChainId   uint32          `protobuf:"varint,2,opt,name=dst_chain_id,json=dstChainId,proto3" json:"dst_chain_id,omitempty"`
	TokenSymbol  string          `protobuf:"bytes,3,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	UsrAddr      string          `protobuf:"bytes,4,opt,name=usr_addr,json=usrAddr,proto3" json:"usr_addr,omitempty"`
}

func (m *EstimateWithdrawAmtRequest) Reset()         { *m = EstimateWithdrawAmtRequest{} }
func (m *EstimateWithdrawAmtRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateWithdrawAmtRequest) ProtoMessage()    {}
func (*EstimateWithdrawAmtRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{26}
}
func (m *EstimateWithdrawAmtRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateWithdrawAmtRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateWithdrawAmtRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateWithdrawAmtRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateWithdrawAmtRequest.Merge(m, src)
}
func (m *EstimateWithdrawAmtRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateWithdrawAmtRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateWithdrawAmtRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateWithdrawAmtRequest proto.InternalMessageInfo

func (m *EstimateWithdrawAmtRequest) GetSrcWithdraws() []*WithdrawInfo {
	if m != nil {
		return m.SrcWithdraws
	}
	return nil
}

func (m *EstimateWithdrawAmtRequest) GetDstChainId() uint32 {
	if m != nil {
		return m.DstChainId
	}
	return 0
}

func (m *EstimateWithdrawAmtRequest) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *EstimateWithdrawAmtRequest) GetUsrAddr() string {
	if m != nil {
		return m.UsrAddr
	}
	return ""
}

type EstimateWithdrawAmtResponse struct {
	Err    *ErrMsg                         `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	ReqAmt map[uint32]*EstimateWithdrawAmt `protobuf:"bytes,2,rep,name=req_amt,json=reqAmt,proto3" json:"req_amt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *EstimateWithdrawAmtResponse) Reset()         { *m = EstimateWithdrawAmtResponse{} }
func (m *EstimateWithdrawAmtResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateWithdrawAmtResponse) ProtoMessage()    {}
func (*EstimateWithdrawAmtResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{27}
}
func (m *EstimateWithdrawAmtResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateWithdrawAmtResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateWithdrawAmtResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateWithdrawAmtResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateWithdrawAmtResponse.Merge(m, src)
}
func (m *EstimateWithdrawAmtResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateWithdrawAmtResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateWithdrawAmtResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateWithdrawAmtResponse proto.InternalMessageInfo

func (m *EstimateWithdrawAmtResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *EstimateWithdrawAmtResponse) GetReqAmt() map[uint32]*EstimateWithdrawAmt {
	if m != nil {
		return m.ReqAmt
	}
	return nil
}

type EstimateWithdrawAmt struct {
	EqValueTokenAmt   string  `protobuf:"bytes,1,opt,name=eq_value_token_amt,json=eqValueTokenAmt,proto3" json:"eq_value_token_amt,omitempty"`
	BridgeRate        float32 `protobuf:"fixed32,2,opt,name=bridge_rate,json=bridgeRate,proto3" json:"bridge_rate,omitempty"`
	PercFee           string  `protobuf:"bytes,3,opt,name=perc_fee,json=percFee,proto3" json:"perc_fee,omitempty"`
	BaseFee           string  `protobuf:"bytes,4,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	SlippageTolerance uint32  `protobuf:"varint,5,opt,name=slippage_tolerance,json=slippageTolerance,proto3" json:"slippage_tolerance,omitempty"`
	MaxSlippage       uint32  `protobuf:"varint,6,opt,name=max_slippage,json=maxSlippage,proto3" json:"max_slippage,omitempty"`
}

func (m *EstimateWithdrawAmt) Reset()         { *m = EstimateWithdrawAmt{} }
func (m *EstimateWithdrawAmt) String() string { return proto.CompactTextString(m) }
func (*EstimateWithdrawAmt) ProtoMessage()    {}
func (*EstimateWithdrawAmt) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{28}
}
func (m *EstimateWithdrawAmt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateWithdrawAmt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateWithdrawAmt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateWithdrawAmt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateWithdrawAmt.Merge(m, src)
}
func (m *EstimateWithdrawAmt) XXX_Size() int {
	return m.Size()
}
func (m *EstimateWithdrawAmt) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateWithdrawAmt.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateWithdrawAmt proto.InternalMessageInfo

func (m *EstimateWithdrawAmt) GetEqValueTokenAmt() string {
	if m != nil {
		return m.EqValueTokenAmt
	}
	return ""
}

func (m *EstimateWithdrawAmt) GetBridgeRate() float32 {
	if m != nil {
		return m.BridgeRate
	}
	return 0
}

func (m *EstimateWithdrawAmt) GetPercFee() string {
	if m != nil {
		return m.PercFee
	}
	return ""
}

func (m *EstimateWithdrawAmt) GetBaseFee() string {
	if m != nil {
		return m.BaseFee
	}
	return ""
}

func (m *EstimateWithdrawAmt) GetSlippageTolerance() uint32 {
	if m != nil {
		return m.SlippageTolerance
	}
	return 0
}

func (m *EstimateWithdrawAmt) GetMaxSlippage() uint32 {
	if m != nil {
		return m.MaxSlippage
	}
	return 0
}

type GetLPInfoListRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *GetLPInfoListRequest) Reset()         { *m = GetLPInfoListRequest{} }
func (m *GetLPInfoListRequest) String() string { return proto.CompactTextString(m) }
func (*GetLPInfoListRequest) ProtoMessage()    {}
func (*GetLPInfoListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{29}
}
func (m *GetLPInfoListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLPInfoListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLPInfoListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLPInfoListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLPInfoListRequest.Merge(m, src)
}
func (m *GetLPInfoListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLPInfoListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLPInfoListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLPInfoListRequest proto.InternalMessageInfo

func (m *GetLPInfoListRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type LPInfo struct {
	Chain                *Chain       `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Token                *TokenInfo   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Liquidity            float64      `protobuf:"fixed64,3,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	LiquidityAmt         string       `protobuf:"bytes,4,opt,name=liquidity_amt,json=liquidityAmt,proto3" json:"liquidity_amt,omitempty"`
	HasFarmingSessions   bool         `protobuf:"varint,5,opt,name=has_farming_sessions,json=hasFarmingSessions,proto3" json:"has_farming_sessions,omitempty"`
	LpFeeEarning         float64      `protobuf:"fixed64,6,opt,name=lp_fee_earning,json=lpFeeEarning,proto3" json:"lp_fee_earning,omitempty"`
	FarmingRewardEarning float64      `protobuf:"fixed64,7,opt,name=farming_reward_earning,json=farmingRewardEarning,proto3" json:"farming_reward_earning,omitempty"`
	Volume_24H           float64      `protobuf:"fixed64,8,opt,name=volume_24h,json=volume24h,proto3" json:"volume_24h,omitempty"`
	TotalLiquidity       float64      `protobuf:"fixed64,9,opt,name=total_liquidity,json=totalLiquidity,proto3" json:"total_liquidity,omitempty"`
	TotalLiquidityAmt    string       `protobuf:"bytes,10,opt,name=total_liquidity_amt,json=totalLiquidityAmt,proto3" json:"total_liquidity_amt,omitempty"`
	LpFeeEarningApy      float64      `protobuf:"fixed64,11,opt,name=lp_fee_earning_apy,json=lpFeeEarningApy,proto3" json:"lp_fee_earning_apy,omitempty"`
	FarmingApy           float64      `protobuf:"fixed64,12,opt,name=farming_apy,json=farmingApy,proto3" json:"farming_apy,omitempty"`
	FarmingSessionTokens []*TokenInfo `protobuf:"bytes,13,rep,name=farming_session_tokens,json=farmingSessionTokens,proto3" json:"farming_session_tokens,omitempty"`
}

func (m *LPInfo) Reset()         { *m = LPInfo{} }
func (m *LPInfo) String() string { return proto.CompactTextString(m) }
func (*LPInfo) ProtoMessage()    {}
func (*LPInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{30}
}
func (m *LPInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPInfo.Merge(m, src)
}
func (m *LPInfo) XXX_Size() int {
	return m.Size()
}
func (m *LPInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LPInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LPInfo proto.InternalMessageInfo

func (m *LPInfo) GetChain() *Chain {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *LPInfo) GetToken() *TokenInfo {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *LPInfo) GetLiquidity() float64 {
	if m != nil {
		return m.Liquidity
	}
	return 0
}

func (m *LPInfo) GetLiquidityAmt() string {
	if m != nil {
		return m.LiquidityAmt
	}
	return ""
}

func (m *LPInfo) GetHasFarmingSessions() bool {
	if m != nil {
		return m.HasFarmingSessions
	}
	return false
}

func (m *LPInfo) GetLpFeeEarning() float64 {
	if m != nil {
		return m.LpFeeEarning
	}
	return 0
}

func (m *LPInfo) GetFarmingRewardEarning() float64 {
	if m != nil {
		return m.FarmingRewardEarning
	}
	return 0
}

func (m *LPInfo) GetVolume_24H() float64 {
	if m != nil {
		return m.Volume_24H
	}
	return 0
}

func (m *LPInfo) GetTotalLiquidity() float64 {
	if m != nil {
		return m.TotalLiquidity
	}
	return 0
}

func (m *LPInfo) GetTotalLiquidityAmt() string {
	if m != nil {
		return m.TotalLiquidityAmt
	}
	return ""
}

func (m *LPInfo) GetLpFeeEarningApy() float64 {
	if m != nil {
		return m.LpFeeEarningApy
	}
	return 0
}

func (m *LPInfo) GetFarmingApy() float64 {
	if m != nil {
		return m.FarmingApy
	}
	return 0
}

func (m *LPInfo) GetFarmingSessionTokens() []*TokenInfo {
	if m != nil {
		return m.FarmingSessionTokens
	}
	return nil
}

type GetLPInfoListResponse struct {
	Err    *ErrMsg   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	LpInfo []*LPInfo `protobuf:"bytes,2,rep,name=lp_info,json=lpInfo,proto3" json:"lp_info,omitempty"`
}

func (m *GetLPInfoListResponse) Reset()         { *m = GetLPInfoListResponse{} }
func (m *GetLPInfoListResponse) String() string { return proto.CompactTextString(m) }
func (*GetLPInfoListResponse) ProtoMessage()    {}
func (*GetLPInfoListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{31}
}
func (m *GetLPInfoListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLPInfoListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLPInfoListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLPInfoListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLPInfoListResponse.Merge(m, src)
}
func (m *GetLPInfoListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLPInfoListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLPInfoListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLPInfoListResponse proto.InternalMessageInfo

func (m *GetLPInfoListResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetLPInfoListResponse) GetLpInfo() []*LPInfo {
	if m != nil {
		return m.LpInfo
	}
	return nil
}

type WithdrawLiquidityRequest struct {
	WithdrawReq          []byte             `protobuf:"bytes,1,opt,name=withdraw_req,json=withdrawReq,proto3" json:"withdraw_req,omitempty"`
	Sig                  []byte             `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	EstimatedReceivedAmt string             `protobuf:"bytes,3,opt,name=estimated_received_amt,json=estimatedReceivedAmt,proto3" json:"estimated_received_amt,omitempty"`
	MethodType           WithdrawMethodType `protobuf:"varint,4,opt,name=method_type,json=methodType,proto3,enum=sgn.gateway.v1.WithdrawMethodType" json:"method_type,omitempty"`
}

func (m *WithdrawLiquidityRequest) Reset()         { *m = WithdrawLiquidityRequest{} }
func (m *WithdrawLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawLiquidityRequest) ProtoMessage()    {}
func (*WithdrawLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{32}
}
func (m *WithdrawLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawLiquidityRequest.Merge(m, src)
}
func (m *WithdrawLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawLiquidityRequest proto.InternalMessageInfo

func (m *WithdrawLiquidityRequest) GetWithdrawReq() []byte {
	if m != nil {
		return m.WithdrawReq
	}
	return nil
}

func (m *WithdrawLiquidityRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *WithdrawLiquidityRequest) GetEstimatedReceivedAmt() string {
	if m != nil {
		return m.EstimatedReceivedAmt
	}
	return ""
}

func (m *WithdrawLiquidityRequest) GetMethodType() WithdrawMethodType {
	if m != nil {
		return m.MethodType
	}
	return WithdrawMethodType_WD_METHOD_TYPE_UNDEFINED
}

type WithdrawLiquidityResponse struct {
	Err    *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	SeqNum uint64  `protobuf:"varint,2,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
}

func (m *WithdrawLiquidityResponse) Reset()         { *m = WithdrawLiquidityResponse{} }
func (m *WithdrawLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*WithdrawLiquidityResponse) ProtoMessage()    {}
func (*WithdrawLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{33}
}
func (m *WithdrawLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawLiquidityResponse.Merge(m, src)
}
func (m *WithdrawLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawLiquidityResponse proto.InternalMessageInfo

func (m *WithdrawLiquidityResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *WithdrawLiquidityResponse) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

type UnlockFarmingRewardRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *UnlockFarmingRewardRequest) Reset()         { *m = UnlockFarmingRewardRequest{} }
func (m *UnlockFarmingRewardRequest) String() string { return proto.CompactTextString(m) }
func (*UnlockFarmingRewardRequest) ProtoMessage()    {}
func (*UnlockFarmingRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{34}
}
func (m *UnlockFarmingRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockFarmingRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockFarmingRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockFarmingRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockFarmingRewardRequest.Merge(m, src)
}
func (m *UnlockFarmingRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnlockFarmingRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockFarmingRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockFarmingRewardRequest proto.InternalMessageInfo

func (m *UnlockFarmingRewardRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type UnlockFarmingRewardResponse struct {
	Err *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *UnlockFarmingRewardResponse) Reset()         { *m = UnlockFarmingRewardResponse{} }
func (m *UnlockFarmingRewardResponse) String() string { return proto.CompactTextString(m) }
func (*UnlockFarmingRewardResponse) ProtoMessage()    {}
func (*UnlockFarmingRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{35}
}
func (m *UnlockFarmingRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockFarmingRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockFarmingRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockFarmingRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockFarmingRewardResponse.Merge(m, src)
}
func (m *UnlockFarmingRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnlockFarmingRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockFarmingRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockFarmingRewardResponse proto.InternalMessageInfo

func (m *UnlockFarmingRewardResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetFarmingRewardDetailsRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *GetFarmingRewardDetailsRequest) Reset()         { *m = GetFarmingRewardDetailsRequest{} }
func (m *GetFarmingRewardDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*GetFarmingRewardDetailsRequest) ProtoMessage()    {}
func (*GetFarmingRewardDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{36}
}
func (m *GetFarmingRewardDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFarmingRewardDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFarmingRewardDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFarmingRewardDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFarmingRewardDetailsRequest.Merge(m, src)
}
func (m *GetFarmingRewardDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFarmingRewardDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFarmingRewardDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFarmingRewardDetailsRequest proto.InternalMessageInfo

func (m *GetFarmingRewardDetailsRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type GetFarmingRewardDetailsResponse struct {
	Err     *ErrMsg                      `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Details []*types2.RewardClaimDetails `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
}

func (m *GetFarmingRewardDetailsResponse) Reset()         { *m = GetFarmingRewardDetailsResponse{} }
func (m *GetFarmingRewardDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*GetFarmingRewardDetailsResponse) ProtoMessage()    {}
func (*GetFarmingRewardDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{37}
}
func (m *GetFarmingRewardDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFarmingRewardDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFarmingRewardDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFarmingRewardDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFarmingRewardDetailsResponse.Merge(m, src)
}
func (m *GetFarmingRewardDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFarmingRewardDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFarmingRewardDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFarmingRewardDetailsResponse proto.InternalMessageInfo

func (m *GetFarmingRewardDetailsResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetFarmingRewardDetailsResponse) GetDetails() []*types2.RewardClaimDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

type QueryLiquidityStatusRequest struct {
	SeqNum  uint64 `protobuf:"varint,1,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	TxHash  string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LpAddr  string `protobuf:"bytes,3,opt,name=lp_addr,json=lpAddr,proto3" json:"lp_addr,omitempty"`
	ChainId uint32 `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Type    LPType `protobuf:"varint,5,opt,name=type,proto3,enum=sgn.gateway.v1.LPType" json:"type,omitempty"`
}

func (m *QueryLiquidityStatusRequest) Reset()         { *m = QueryLiquidityStatusRequest{} }
func (m *QueryLiquidityStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityStatusRequest) ProtoMessage()    {}
func (*QueryLiquidityStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{38}
}
func (m *QueryLiquidityStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityStatusRequest.Merge(m, src)
}
func (m *QueryLiquidityStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityStatusRequest proto.InternalMessageInfo

func (m *QueryLiquidityStatusRequest) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *QueryLiquidityStatusRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *QueryLiquidityStatusRequest) GetLpAddr() string {
	if m != nil {
		return m.LpAddr
	}
	return ""
}

func (m *QueryLiquidityStatusRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryLiquidityStatusRequest) GetType() LPType {
	if m != nil {
		return m.Type
	}
	return LPType_LP_TYPE_UNKNOWN
}

type TransferHistory struct {
	TransferId      string                       `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	SrcSendInfo     *TransferInfo                `protobuf:"bytes,2,opt,name=src_send_info,json=srcSendInfo,proto3" json:"src_send_info,omitempty"`
	DstReceivedInfo *TransferInfo                `protobuf:"bytes,3,opt,name=dst_received_info,json=dstReceivedInfo,proto3" json:"dst_received_info,omitempty"`
	Ts              uint64                       `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	SrcBlockTxLink  string                       `protobuf:"bytes,5,opt,name=src_block_tx_link,json=srcBlockTxLink,proto3" json:"src_block_tx_link,omitempty"`
	DstBlockTxLink  string                       `protobuf:"bytes,6,opt,name=dst_block_tx_link,json=dstBlockTxLink,proto3" json:"dst_block_tx_link,omitempty"`
	Status          types1.TransferHistoryStatus `protobuf:"varint,7,opt,name=status,proto3,enum=sgn.cbridge.v1.TransferHistoryStatus" json:"status,omitempty"`
	RefundReason    types1.XferStatus            `protobuf:"varint,8,opt,name=refund_reason,json=refundReason,proto3,enum=sgn.cbridge.v1.XferStatus" json:"refund_reason,omitempty"`
}

func (m *TransferHistory) Reset()         { *m = TransferHistory{} }
func (m *TransferHistory) String() string { return proto.CompactTextString(m) }
func (*TransferHistory) ProtoMessage()    {}
func (*TransferHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{39}
}
func (m *TransferHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferHistory.Merge(m, src)
}
func (m *TransferHistory) XXX_Size() int {
	return m.Size()
}
func (m *TransferHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TransferHistory proto.InternalMessageInfo

func (m *TransferHistory) GetTransferId() string {
	if m != nil {
		return m.TransferId
	}
	return ""
}

func (m *TransferHistory) GetSrcSendInfo() *TransferInfo {
	if m != nil {
		return m.SrcSendInfo
	}
	return nil
}

func (m *TransferHistory) GetDstReceivedInfo() *TransferInfo {
	if m != nil {
		return m.DstReceivedInfo
	}
	return nil
}

func (m *TransferHistory) GetTs() uint64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *TransferHistory) GetSrcBlockTxLink() string {
	if m != nil {
		return m.SrcBlockTxLink
	}
	return ""
}

func (m *TransferHistory) GetDstBlockTxLink() string {
	if m != nil {
		return m.DstBlockTxLink
	}
	return ""
}

func (m *TransferHistory) GetStatus() types1.TransferHistoryStatus {
	if m != nil {
		return m.Status
	}
	return types1.TransferHistoryStatus_TRANSFER_UNKNOWN
}

func (m *TransferHistory) GetRefundReason() types1.XferStatus {
	if m != nil {
		return m.RefundReason
	}
	return types1.XferStatus_UNKNOWN
}

type LPHistory struct {
	Chain       *Chain                `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Token       *TokenInfo            `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Amount      string                `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Ts          uint64                `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockTxLink string                `protobuf:"bytes,5,opt,name=block_tx_link,json=blockTxLink,proto3" json:"block_tx_link,omitempty"`
	Status      types1.WithdrawStatus `protobuf:"varint,6,opt,name=status,proto3,enum=sgn.cbridge.v1.WithdrawStatus" json:"status,omitempty"`
	Type        LPType                `protobuf:"varint,7,opt,name=type,proto3,enum=sgn.gateway.v1.LPType" json:"type,omitempty"`
	SeqNum      uint64                `protobuf:"varint,8,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	MethodType  WithdrawMethodType    `protobuf:"varint,9,opt,name=method_type,json=methodType,proto3,enum=sgn.gateway.v1.WithdrawMethodType" json:"method_type,omitempty"`
	Nonce       uint64                `protobuf:"varint,10,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *LPHistory) Reset()         { *m = LPHistory{} }
func (m *LPHistory) String() string { return proto.CompactTextString(m) }
func (*LPHistory) ProtoMessage()    {}
func (*LPHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{40}
}
func (m *LPHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPHistory.Merge(m, src)
}
func (m *LPHistory) XXX_Size() int {
	return m.Size()
}
func (m *LPHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_LPHistory.DiscardUnknown(m)
}

var xxx_messageInfo_LPHistory proto.InternalMessageInfo

func (m *LPHistory) GetChain() *Chain {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *LPHistory) GetToken() *TokenInfo {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *LPHistory) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *LPHistory) GetTs() uint64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *LPHistory) GetBlockTxLink() string {
	if m != nil {
		return m.BlockTxLink
	}
	return ""
}

func (m *LPHistory) GetStatus() types1.WithdrawStatus {
	if m != nil {
		return m.Status
	}
	return types1.WithdrawStatus_WD_UNKNOWN
}

func (m *LPHistory) GetType() LPType {
	if m != nil {
		return m.Type
	}
	return LPType_LP_TYPE_UNKNOWN
}

func (m *LPHistory) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *LPHistory) GetMethodType() WithdrawMethodType {
	if m != nil {
		return m.MethodType
	}
	return WithdrawMethodType_WD_METHOD_TYPE_UNDEFINED
}

func (m *LPHistory) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type TransferHistoryRequest struct {
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PageSize      uint64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Addr          string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *TransferHistoryRequest) Reset()         { *m = TransferHistoryRequest{} }
func (m *TransferHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*TransferHistoryRequest) ProtoMessage()    {}
func (*TransferHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{41}
}
func (m *TransferHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferHistoryRequest.Merge(m, src)
}
func (m *TransferHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferHistoryRequest proto.InternalMessageInfo

func (m *TransferHistoryRequest) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *TransferHistoryRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *TransferHistoryRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type TransferHistoryResponse struct {
	Err           *ErrMsg            `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	History       []*TransferHistory `protobuf:"bytes,2,rep,name=history,proto3" json:"history,omitempty"`
	NextPageToken string             `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	CurrentSize   uint64             `protobuf:"varint,4,opt,name=current_size,json=currentSize,proto3" json:"current_size,omitempty"`
}

func (m *TransferHistoryResponse) Reset()         { *m = TransferHistoryResponse{} }
func (m *TransferHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*TransferHistoryResponse) ProtoMessage()    {}
func (*TransferHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{42}
}
func (m *TransferHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferHistoryResponse.Merge(m, src)
}
func (m *TransferHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransferHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferHistoryResponse proto.InternalMessageInfo

func (m *TransferHistoryResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *TransferHistoryResponse) GetHistory() []*TransferHistory {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *TransferHistoryResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *TransferHistoryResponse) GetCurrentSize() uint64 {
	if m != nil {
		return m.CurrentSize
	}
	return 0
}

type LPHistoryRequest struct {
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PageSize      uint64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Addr          string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *LPHistoryRequest) Reset()         { *m = LPHistoryRequest{} }
func (m *LPHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*LPHistoryRequest) ProtoMessage()    {}
func (*LPHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{43}
}
func (m *LPHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPHistoryRequest.Merge(m, src)
}
func (m *LPHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *LPHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LPHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LPHistoryRequest proto.InternalMessageInfo

func (m *LPHistoryRequest) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *LPHistoryRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *LPHistoryRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type LPHistoryResponse struct {
	Err           *ErrMsg      `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	History       []*LPHistory `protobuf:"bytes,2,rep,name=history,proto3" json:"history,omitempty"`
	NextPageToken string       `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	CurrentSize   uint64       `protobuf:"varint,4,opt,name=current_size,json=currentSize,proto3" json:"current_size,omitempty"`
}

func (m *LPHistoryResponse) Reset()         { *m = LPHistoryResponse{} }
func (m *LPHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*LPHistoryResponse) ProtoMessage()    {}
func (*LPHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{44}
}
func (m *LPHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPHistoryResponse.Merge(m, src)
}
func (m *LPHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *LPHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LPHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LPHistoryResponse proto.InternalMessageInfo

func (m *LPHistoryResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *LPHistoryResponse) GetHistory() []*LPHistory {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *LPHistoryResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *LPHistoryResponse) GetCurrentSize() uint64 {
	if m != nil {
		return m.CurrentSize
	}
	return 0
}

type RewardingDataRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *RewardingDataRequest) Reset()         { *m = RewardingDataRequest{} }
func (m *RewardingDataRequest) String() string { return proto.CompactTextString(m) }
func (*RewardingDataRequest) ProtoMessage()    {}
func (*RewardingDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{45}
}
func (m *RewardingDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardingDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardingDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardingDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardingDataRequest.Merge(m, src)
}
func (m *RewardingDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *RewardingDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardingDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RewardingDataRequest proto.InternalMessageInfo

func (m *RewardingDataRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type Reward struct {
	Amt   float64       `protobuf:"fixed64,1,opt,name=amt,proto3" json:"amt,omitempty"`
	Token *types1.Token `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *Reward) Reset()         { *m = Reward{} }
func (m *Reward) String() string { return proto.CompactTextString(m) }
func (*Reward) ProtoMessage()    {}
func (*Reward) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{46}
}
func (m *Reward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reward.Merge(m, src)
}
func (m *Reward) XXX_Size() int {
	return m.Size()
}
func (m *Reward) XXX_DiscardUnknown() {
	xxx_messageInfo_Reward.DiscardUnknown(m)
}

var xxx_messageInfo_Reward proto.InternalMessageInfo

func (m *Reward) GetAmt() float64 {
	if m != nil {
		return m.Amt
	}
	return 0
}

func (m *Reward) GetToken() *types1.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type RewardingDataResponse struct {
	Err                         *ErrMsg            `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	UsdPrice                    map[string]float64 `protobuf:"bytes,2,rep,name=usd_price,json=usdPrice,proto3" json:"usd_price,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	HistoricalCumulativeRewards []*Reward          `protobuf:"bytes,3,rep,name=historical_cumulative_rewards,json=historicalCumulativeRewards,proto3" json:"historical_cumulative_rewards,omitempty"`
	UnlockedCumulativeRewards   []*Reward          `protobuf:"bytes,4,rep,name=unlocked_cumulative_rewards,json=unlockedCumulativeRewards,proto3" json:"unlocked_cumulative_rewards,omitempty"`
}

func (m *RewardingDataResponse) Reset()         { *m = RewardingDataResponse{} }
func (m *RewardingDataResponse) String() string { return proto.CompactTextString(m) }
func (*RewardingDataResponse) ProtoMessage()    {}
func (*RewardingDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{47}
}
func (m *RewardingDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardingDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardingDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardingDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardingDataResponse.Merge(m, src)
}
func (m *RewardingDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *RewardingDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardingDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RewardingDataResponse proto.InternalMessageInfo

func (m *RewardingDataResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *RewardingDataResponse) GetUsdPrice() map[string]float64 {
	if m != nil {
		return m.UsdPrice
	}
	return nil
}

func (m *RewardingDataResponse) GetHistoricalCumulativeRewards() []*Reward {
	if m != nil {
		return m.HistoricalCumulativeRewards
	}
	return nil
}

func (m *RewardingDataResponse) GetUnlockedCumulativeRewards() []*Reward {
	if m != nil {
		return m.UnlockedCumulativeRewards
	}
	return nil
}

type UpdateChainRequest struct {
	Chain       *Chain `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	TxUrlPrefix string `protobuf:"bytes,2,opt,name=tx_url_prefix,json=txUrlPrefix,proto3" json:"tx_url_prefix,omitempty"`
	Sig         []byte `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
	Addr        string `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *UpdateChainRequest) Reset()         { *m = UpdateChainRequest{} }
func (m *UpdateChainRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateChainRequest) ProtoMessage()    {}
func (*UpdateChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{48}
}
func (m *UpdateChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChainRequest.Merge(m, src)
}
func (m *UpdateChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChainRequest proto.InternalMessageInfo

func (m *UpdateChainRequest) GetChain() *Chain {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *UpdateChainRequest) GetTxUrlPrefix() string {
	if m != nil {
		return m.TxUrlPrefix
	}
	return ""
}

func (m *UpdateChainRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *UpdateChainRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type UpdateChainResponse struct {
	Err         *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Chain       *Chain  `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	TxUrlPrefix string  `protobuf:"bytes,3,opt,name=tx_url_prefix,json=txUrlPrefix,proto3" json:"tx_url_prefix,omitempty"`
}

func (m *UpdateChainResponse) Reset()         { *m = UpdateChainResponse{} }
func (m *UpdateChainResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateChainResponse) ProtoMessage()    {}
func (*UpdateChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{49}
}
func (m *UpdateChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChainResponse.Merge(m, src)
}
func (m *UpdateChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChainResponse proto.InternalMessageInfo

func (m *UpdateChainResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *UpdateChainResponse) GetChain() *Chain {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *UpdateChainResponse) GetTxUrlPrefix() string {
	if m != nil {
		return m.TxUrlPrefix
	}
	return ""
}

type UpdateTokenRequest struct {
	ChainId     uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TokenSymbol string `protobuf:"bytes,2,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TokenName   string `protobuf:"bytes,3,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenIcon   string `protobuf:"bytes,4,opt,name=token_icon,json=tokenIcon,proto3" json:"token_icon,omitempty"`
	Sig         []byte `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty"`
	Addr        string `protobuf:"bytes,6,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *UpdateTokenRequest) Reset()         { *m = UpdateTokenRequest{} }
func (m *UpdateTokenRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTokenRequest) ProtoMessage()    {}
func (*UpdateTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{50}
}
func (m *UpdateTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTokenRequest.Merge(m, src)
}
func (m *UpdateTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTokenRequest proto.InternalMessageInfo

func (m *UpdateTokenRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *UpdateTokenRequest) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *UpdateTokenRequest) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *UpdateTokenRequest) GetTokenIcon() string {
	if m != nil {
		return m.TokenIcon
	}
	return ""
}

func (m *UpdateTokenRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *UpdateTokenRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type UpdateTokenResponse struct {
	Err   *ErrMsg    `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Token *TokenInfo `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *UpdateTokenResponse) Reset()         { *m = UpdateTokenResponse{} }
func (m *UpdateTokenResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateTokenResponse) ProtoMessage()    {}
func (*UpdateTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{51}
}
func (m *UpdateTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTokenResponse.Merge(m, src)
}
func (m *UpdateTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTokenResponse proto.InternalMessageInfo

func (m *UpdateTokenResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *UpdateTokenResponse) GetToken() *TokenInfo {
	if m != nil {
		return m.Token
	}
	return nil
}

type StakingConfigRequest struct {
}

func (m *StakingConfigRequest) Reset()         { *m = StakingConfigRequest{} }
func (m *StakingConfigRequest) String() string { return proto.CompactTextString(m) }
func (*StakingConfigRequest) ProtoMessage()    {}
func (*StakingConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{52}
}
func (m *StakingConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingConfigRequest.Merge(m, src)
}
func (m *StakingConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *StakingConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StakingConfigRequest proto.InternalMessageInfo

type StakingConfigResponse struct {
	ViewerContract        string `protobuf:"bytes,1,opt,name=viewer_contract,json=viewerContract,proto3" json:"viewer_contract,omitempty"`
	StakingContract       string `protobuf:"bytes,2,opt,name=staking_contract,json=stakingContract,proto3" json:"staking_contract,omitempty"`
	StakingRewardContract string `protobuf:"bytes,3,opt,name=staking_reward_contract,json=stakingRewardContract,proto3" json:"staking_reward_contract,omitempty"`
	CelrContract          string `protobuf:"bytes,4,opt,name=celr_contract,json=celrContract,proto3" json:"celr_contract,omitempty"`
}

func (m *StakingConfigResponse) Reset()         { *m = StakingConfigResponse{} }
func (m *StakingConfigResponse) String() string { return proto.CompactTextString(m) }
func (*StakingConfigResponse) ProtoMessage()    {}
func (*StakingConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{53}
}
func (m *StakingConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingConfigResponse.Merge(m, src)
}
func (m *StakingConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *StakingConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StakingConfigResponse proto.InternalMessageInfo

func (m *StakingConfigResponse) GetViewerContract() string {
	if m != nil {
		return m.ViewerContract
	}
	return ""
}

func (m *StakingConfigResponse) GetStakingContract() string {
	if m != nil {
		return m.StakingContract
	}
	return ""
}

func (m *StakingConfigResponse) GetStakingRewardContract() string {
	if m != nil {
		return m.StakingRewardContract
	}
	return ""
}

func (m *StakingConfigResponse) GetCelrContract() string {
	if m != nil {
		return m.CelrContract
	}
	return ""
}

type UnlockStakingRewardRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *UnlockStakingRewardRequest) Reset()         { *m = UnlockStakingRewardRequest{} }
func (m *UnlockStakingRewardRequest) String() string { return proto.CompactTextString(m) }
func (*UnlockStakingRewardRequest) ProtoMessage()    {}
func (*UnlockStakingRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{54}
}
func (m *UnlockStakingRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockStakingRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockStakingRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockStakingRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockStakingRewardRequest.Merge(m, src)
}
func (m *UnlockStakingRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnlockStakingRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockStakingRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockStakingRewardRequest proto.InternalMessageInfo

func (m *UnlockStakingRewardRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

type UnlockStakingRewardResponse struct {
	Err *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *UnlockStakingRewardResponse) Reset()         { *m = UnlockStakingRewardResponse{} }
func (m *UnlockStakingRewardResponse) String() string { return proto.CompactTextString(m) }
func (*UnlockStakingRewardResponse) ProtoMessage()    {}
func (*UnlockStakingRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{55}
}
func (m *UnlockStakingRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockStakingRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockStakingRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockStakingRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockStakingRewardResponse.Merge(m, src)
}
func (m *UnlockStakingRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnlockStakingRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockStakingRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockStakingRewardResponse proto.InternalMessageInfo

func (m *UnlockStakingRewardResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetStakingRewardDetailsRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *GetStakingRewardDetailsRequest) Reset()         { *m = GetStakingRewardDetailsRequest{} }
func (m *GetStakingRewardDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*GetStakingRewardDetailsRequest) ProtoMessage()    {}
func (*GetStakingRewardDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{56}
}
func (m *GetStakingRewardDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakingRewardDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakingRewardDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakingRewardDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakingRewardDetailsRequest.Merge(m, src)
}
func (m *GetStakingRewardDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStakingRewardDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakingRewardDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakingRewardDetailsRequest proto.InternalMessageInfo

func (m *GetStakingRewardDetailsRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

type GetStakingRewardDetailsResponse struct {
	Err    *ErrMsg                        `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Detail *types3.StakingRewardClaimInfo `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (m *GetStakingRewardDetailsResponse) Reset()         { *m = GetStakingRewardDetailsResponse{} }
func (m *GetStakingRewardDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*GetStakingRewardDetailsResponse) ProtoMessage()    {}
func (*GetStakingRewardDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{57}
}
func (m *GetStakingRewardDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakingRewardDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakingRewardDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakingRewardDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakingRewardDetailsResponse.Merge(m, src)
}
func (m *GetStakingRewardDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStakingRewardDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakingRewardDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakingRewardDetailsResponse proto.InternalMessageInfo

func (m *GetStakingRewardDetailsResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetStakingRewardDetailsResponse) GetDetail() *types3.StakingRewardClaimInfo {
	if m != nil {
		return m.Detail
	}
	return nil
}

type GetTotalLiquidityProviderTokenBalanceRequest struct {
	ChainIds    []uint32 `protobuf:"varint,1,rep,packed,name=chain_ids,json=chainIds,proto3" json:"chain_ids,omitempty"`
	TokenSymbol string   `protobuf:"bytes,2,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
}

func (m *GetTotalLiquidityProviderTokenBalanceRequest) Reset() {
	*m = GetTotalLiquidityProviderTokenBalanceRequest{}
}
func (m *GetTotalLiquidityProviderTokenBalanceRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetTotalLiquidityProviderTokenBalanceRequest) ProtoMessage() {}
func (*GetTotalLiquidityProviderTokenBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{58}
}
func (m *GetTotalLiquidityProviderTokenBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalLiquidityProviderTokenBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalLiquidityProviderTokenBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalLiquidityProviderTokenBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalLiquidityProviderTokenBalanceRequest.Merge(m, src)
}
func (m *GetTotalLiquidityProviderTokenBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalLiquidityProviderTokenBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalLiquidityProviderTokenBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalLiquidityProviderTokenBalanceRequest proto.InternalMessageInfo

func (m *GetTotalLiquidityProviderTokenBalanceRequest) GetChainIds() []uint32 {
	if m != nil {
		return m.ChainIds
	}
	return nil
}

func (m *GetTotalLiquidityProviderTokenBalanceRequest) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

type GetTotalLiquidityProviderTokenBalanceResponse struct {
	Err      *ErrMsg           `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	TotalLiq map[uint64]string `protobuf:"bytes,2,rep,name=total_liq,json=totalLiq,proto3" json:"total_liq,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetTotalLiquidityProviderTokenBalanceResponse) Reset() {
	*m = GetTotalLiquidityProviderTokenBalanceResponse{}
}
func (m *GetTotalLiquidityProviderTokenBalanceResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetTotalLiquidityProviderTokenBalanceResponse) ProtoMessage() {}
func (*GetTotalLiquidityProviderTokenBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{59}
}
func (m *GetTotalLiquidityProviderTokenBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalLiquidityProviderTokenBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalLiquidityProviderTokenBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalLiquidityProviderTokenBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalLiquidityProviderTokenBalanceResponse.Merge(m, src)
}
func (m *GetTotalLiquidityProviderTokenBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalLiquidityProviderTokenBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalLiquidityProviderTokenBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalLiquidityProviderTokenBalanceResponse proto.InternalMessageInfo

func (m *GetTotalLiquidityProviderTokenBalanceResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetTotalLiquidityProviderTokenBalanceResponse) GetTotalLiq() map[uint64]string {
	if m != nil {
		return m.TotalLiq
	}
	return nil
}

type GetAbnormalStatusInfoRequest struct {
}

func (m *GetAbnormalStatusInfoRequest) Reset()         { *m = GetAbnormalStatusInfoRequest{} }
func (m *GetAbnormalStatusInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetAbnormalStatusInfoRequest) ProtoMessage()    {}
func (*GetAbnormalStatusInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{60}
}
func (m *GetAbnormalStatusInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAbnormalStatusInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAbnormalStatusInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAbnormalStatusInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAbnormalStatusInfoRequest.Merge(m, src)
}
func (m *GetAbnormalStatusInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAbnormalStatusInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAbnormalStatusInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAbnormalStatusInfoRequest proto.InternalMessageInfo

type GetAbnormalStatusInfoResponse struct {
	Info []*AbnormalStatusInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
}

func (m *GetAbnormalStatusInfoResponse) Reset()         { *m = GetAbnormalStatusInfoResponse{} }
func (m *GetAbnormalStatusInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetAbnormalStatusInfoResponse) ProtoMessage()    {}
func (*GetAbnormalStatusInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{61}
}
func (m *GetAbnormalStatusInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAbnormalStatusInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAbnormalStatusInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAbnormalStatusInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAbnormalStatusInfoResponse.Merge(m, src)
}
func (m *GetAbnormalStatusInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAbnormalStatusInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAbnormalStatusInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAbnormalStatusInfoResponse proto.InternalMessageInfo

func (m *GetAbnormalStatusInfoResponse) GetInfo() []*AbnormalStatusInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type AbnormalStatusInfo struct {
	Type          string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ChainId       uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	DstChainId    uint64 `protobuf:"varint,3,opt,name=dst_chain_id,json=dstChainId,proto3" json:"dst_chain_id,omitempty"`
	TxHash        string `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Time          string `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	PeggedInfo    string `protobuf:"bytes,6,opt,name=pegged_info,json=peggedInfo,proto3" json:"pegged_info,omitempty"`
	SrcTransferId string `protobuf:"bytes,7,opt,name=src_transfer_id,json=srcTransferId,proto3" json:"src_transfer_id,omitempty"`
}

func (m *AbnormalStatusInfo) Reset()         { *m = AbnormalStatusInfo{} }
func (m *AbnormalStatusInfo) String() string { return proto.CompactTextString(m) }
func (*AbnormalStatusInfo) ProtoMessage()    {}
func (*AbnormalStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{62}
}
func (m *AbnormalStatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AbnormalStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AbnormalStatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AbnormalStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbnormalStatusInfo.Merge(m, src)
}
func (m *AbnormalStatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *AbnormalStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AbnormalStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AbnormalStatusInfo proto.InternalMessageInfo

func (m *AbnormalStatusInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AbnormalStatusInfo) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *AbnormalStatusInfo) GetDstChainId() uint64 {
	if m != nil {
		return m.DstChainId
	}
	return 0
}

func (m *AbnormalStatusInfo) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *AbnormalStatusInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *AbnormalStatusInfo) GetPeggedInfo() string {
	if m != nil {
		return m.PeggedInfo
	}
	return ""
}

func (m *AbnormalStatusInfo) GetSrcTransferId() string {
	if m != nil {
		return m.SrcTransferId
	}
	return ""
}

type GetInfoByTxHashRequest struct {
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash  string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Type    CSType `protobuf:"varint,3,opt,name=type,proto3,enum=sgn.gateway.v1.CSType" json:"type,omitempty"`
	Sig     []byte `protobuf:"bytes,4,opt,name=sig,proto3" json:"sig,omitempty"`
	Addr    string `protobuf:"bytes,5,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *GetInfoByTxHashRequest) Reset()         { *m = GetInfoByTxHashRequest{} }
func (m *GetInfoByTxHashRequest) String() string { return proto.CompactTextString(m) }
func (*GetInfoByTxHashRequest) ProtoMessage()    {}
func (*GetInfoByTxHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{63}
}
func (m *GetInfoByTxHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfoByTxHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfoByTxHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfoByTxHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoByTxHashRequest.Merge(m, src)
}
func (m *GetInfoByTxHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInfoByTxHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoByTxHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoByTxHashRequest proto.InternalMessageInfo

func (m *GetInfoByTxHashRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GetInfoByTxHashRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *GetInfoByTxHashRequest) GetType() CSType {
	if m != nil {
		return m.Type
	}
	return CSType_CT_UNKNOWN
}

func (m *GetInfoByTxHashRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *GetInfoByTxHashRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type GetInfoByTxHashResponse struct {
	Operation CSOperation    `protobuf:"varint,1,opt,name=operation,proto3,enum=sgn.gateway.v1.CSOperation" json:"operation,omitempty"`
	Status    UserCaseStatus `protobuf:"varint,2,opt,name=status,proto3,enum=sgn.gateway.v1.UserCaseStatus" json:"status,omitempty"`
	Memo      string         `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	Info      string         `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *GetInfoByTxHashResponse) Reset()         { *m = GetInfoByTxHashResponse{} }
func (m *GetInfoByTxHashResponse) String() string { return proto.CompactTextString(m) }
func (*GetInfoByTxHashResponse) ProtoMessage()    {}
func (*GetInfoByTxHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{64}
}
func (m *GetInfoByTxHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfoByTxHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfoByTxHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfoByTxHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoByTxHashResponse.Merge(m, src)
}
func (m *GetInfoByTxHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInfoByTxHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoByTxHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoByTxHashResponse proto.InternalMessageInfo

func (m *GetInfoByTxHashResponse) GetOperation() CSOperation {
	if m != nil {
		return m.Operation
	}
	return CSOperation_CA_UNKNOWN
}

func (m *GetInfoByTxHashResponse) GetStatus() UserCaseStatus {
	if m != nil {
		return m.Status
	}
	return UserCaseStatus_CC_UNKNOWN
}

func (m *GetInfoByTxHashResponse) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *GetInfoByTxHashResponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type FixEventMissRequest struct {
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash  string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Type    CSType `protobuf:"varint,3,opt,name=type,proto3,enum=sgn.gateway.v1.CSType" json:"type,omitempty"`
	Sig     []byte `protobuf:"bytes,4,opt,name=sig,proto3" json:"sig,omitempty"`
	Addr    string `protobuf:"bytes,5,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *FixEventMissRequest) Reset()         { *m = FixEventMissRequest{} }
func (m *FixEventMissRequest) String() string { return proto.CompactTextString(m) }
func (*FixEventMissRequest) ProtoMessage()    {}
func (*FixEventMissRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{65}
}
func (m *FixEventMissRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixEventMissRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixEventMissRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixEventMissRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixEventMissRequest.Merge(m, src)
}
func (m *FixEventMissRequest) XXX_Size() int {
	return m.Size()
}
func (m *FixEventMissRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FixEventMissRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FixEventMissRequest proto.InternalMessageInfo

func (m *FixEventMissRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *FixEventMissRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *FixEventMissRequest) GetType() CSType {
	if m != nil {
		return m.Type
	}
	return CSType_CT_UNKNOWN
}

func (m *FixEventMissRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *FixEventMissRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type FixEventMissResponse struct {
	Err *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *FixEventMissResponse) Reset()         { *m = FixEventMissResponse{} }
func (m *FixEventMissResponse) String() string { return proto.CompactTextString(m) }
func (*FixEventMissResponse) ProtoMessage()    {}
func (*FixEventMissResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{66}
}
func (m *FixEventMissResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixEventMissResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixEventMissResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixEventMissResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixEventMissResponse.Merge(m, src)
}
func (m *FixEventMissResponse) XXX_Size() int {
	return m.Size()
}
func (m *FixEventMissResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FixEventMissResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FixEventMissResponse proto.InternalMessageInfo

func (m *FixEventMissResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetAllConfigsRequest struct {
}

func (m *GetAllConfigsRequest) Reset()         { *m = GetAllConfigsRequest{} }
func (m *GetAllConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllConfigsRequest) ProtoMessage()    {}
func (*GetAllConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{67}
}
func (m *GetAllConfigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllConfigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllConfigsRequest.Merge(m, src)
}
func (m *GetAllConfigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllConfigsRequest proto.InternalMessageInfo

type ExtendedPair struct {
	PeggedPair *types.OrigPeggedPair `protobuf:"bytes,1,opt,name=pegged_pair,json=peggedPair,proto3" json:"pegged_pair,omitempty"`
	MinDeposit string                `protobuf:"bytes,2,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MaxDeposit string                `protobuf:"bytes,3,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
	MinBurn    string                `protobuf:"bytes,4,opt,name=min_burn,json=minBurn,proto3" json:"min_burn,omitempty"`
	MaxBurn    string                `protobuf:"bytes,5,opt,name=max_burn,json=maxBurn,proto3" json:"max_burn,omitempty"`
}

func (m *ExtendedPair) Reset()         { *m = ExtendedPair{} }
func (m *ExtendedPair) String() string { return proto.CompactTextString(m) }
func (*ExtendedPair) ProtoMessage()    {}
func (*ExtendedPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{68}
}
func (m *ExtendedPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedPair.Merge(m, src)
}
func (m *ExtendedPair) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedPair) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedPair.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedPair proto.InternalMessageInfo

func (m *ExtendedPair) GetPeggedPair() *types.OrigPeggedPair {
	if m != nil {
		return m.PeggedPair
	}
	return nil
}

func (m *ExtendedPair) GetMinDeposit() string {
	if m != nil {
		return m.MinDeposit
	}
	return ""
}

func (m *ExtendedPair) GetMaxDeposit() string {
	if m != nil {
		return m.MaxDeposit
	}
	return ""
}

func (m *ExtendedPair) GetMinBurn() string {
	if m != nil {
		return m.MinBurn
	}
	return ""
}

func (m *ExtendedPair) GetMaxBurn() string {
	if m != nil {
		return m.MaxBurn
	}
	return ""
}

type GetAllConfigsResponse struct {
	Err         *ErrMsg           `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	PeggedPairs []*ExtendedPair   `protobuf:"bytes,2,rep,name=pegged_pairs,json=peggedPairs,proto3" json:"pegged_pairs,omitempty"`
	CbrConfig   *types1.CbrConfig `protobuf:"bytes,3,opt,name=cbr_config,json=cbrConfig,proto3" json:"cbr_config,omitempty"`
}

func (m *GetAllConfigsResponse) Reset()         { *m = GetAllConfigsResponse{} }
func (m *GetAllConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllConfigsResponse) ProtoMessage()    {}
func (*GetAllConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{69}
}
func (m *GetAllConfigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllConfigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllConfigsResponse.Merge(m, src)
}
func (m *GetAllConfigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllConfigsResponse proto.InternalMessageInfo

func (m *GetAllConfigsResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetAllConfigsResponse) GetPeggedPairs() []*ExtendedPair {
	if m != nil {
		return m.PeggedPairs
	}
	return nil
}

func (m *GetAllConfigsResponse) GetCbrConfig() *types1.CbrConfig {
	if m != nil {
		return m.CbrConfig
	}
	return nil
}

type GetCbrConfigsOnChainRequest struct {
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *GetCbrConfigsOnChainRequest) Reset()         { *m = GetCbrConfigsOnChainRequest{} }
func (m *GetCbrConfigsOnChainRequest) String() string { return proto.CompactTextString(m) }
func (*GetCbrConfigsOnChainRequest) ProtoMessage()    {}
func (*GetCbrConfigsOnChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{70}
}
func (m *GetCbrConfigsOnChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCbrConfigsOnChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCbrConfigsOnChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCbrConfigsOnChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCbrConfigsOnChainRequest.Merge(m, src)
}
func (m *GetCbrConfigsOnChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCbrConfigsOnChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCbrConfigsOnChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCbrConfigsOnChainRequest proto.InternalMessageInfo

func (m *GetCbrConfigsOnChainRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type ExtendedToken struct {
	Token           *types1.Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	DelayThreshold  string        `protobuf:"bytes,2,opt,name=delay_threshold,json=delayThreshold,proto3" json:"delay_threshold,omitempty"`
	EpochVolumeCaps string        `protobuf:"bytes,3,opt,name=epoch_volume_caps,json=epochVolumeCaps,proto3" json:"epoch_volume_caps,omitempty"`
	MinSend         string        `protobuf:"bytes,4,opt,name=min_send,json=minSend,proto3" json:"min_send,omitempty"`
	MaxSend         string        `protobuf:"bytes,5,opt,name=max_send,json=maxSend,proto3" json:"max_send,omitempty"`
	MinAdd          string        `protobuf:"bytes,6,opt,name=min_add,json=minAdd,proto3" json:"min_add,omitempty"`
}

func (m *ExtendedToken) Reset()         { *m = ExtendedToken{} }
func (m *ExtendedToken) String() string { return proto.CompactTextString(m) }
func (*ExtendedToken) ProtoMessage()    {}
func (*ExtendedToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{71}
}
func (m *ExtendedToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedToken.Merge(m, src)
}
func (m *ExtendedToken) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedToken) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedToken.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedToken proto.InternalMessageInfo

func (m *ExtendedToken) GetToken() *types1.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *ExtendedToken) GetDelayThreshold() string {
	if m != nil {
		return m.DelayThreshold
	}
	return ""
}

func (m *ExtendedToken) GetEpochVolumeCaps() string {
	if m != nil {
		return m.EpochVolumeCaps
	}
	return ""
}

func (m *ExtendedToken) GetMinSend() string {
	if m != nil {
		return m.MinSend
	}
	return ""
}

func (m *ExtendedToken) GetMaxSend() string {
	if m != nil {
		return m.MaxSend
	}
	return ""
}

func (m *ExtendedToken) GetMinAdd() string {
	if m != nil {
		return m.MinAdd
	}
	return ""
}

type GetCbrConfigsOnChainResponse struct {
	Err         *ErrMsg          `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	DelayPeriod string           `protobuf:"bytes,2,opt,name=delay_period,json=delayPeriod,proto3" json:"delay_period,omitempty"`
	EpochLength string           `protobuf:"bytes,3,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	NativeWrap  string           `protobuf:"bytes,4,opt,name=native_wrap,json=nativeWrap,proto3" json:"native_wrap,omitempty"`
	Tokens      []*ExtendedToken `protobuf:"bytes,5,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (m *GetCbrConfigsOnChainResponse) Reset()         { *m = GetCbrConfigsOnChainResponse{} }
func (m *GetCbrConfigsOnChainResponse) String() string { return proto.CompactTextString(m) }
func (*GetCbrConfigsOnChainResponse) ProtoMessage()    {}
func (*GetCbrConfigsOnChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{72}
}
func (m *GetCbrConfigsOnChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCbrConfigsOnChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCbrConfigsOnChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCbrConfigsOnChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCbrConfigsOnChainResponse.Merge(m, src)
}
func (m *GetCbrConfigsOnChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCbrConfigsOnChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCbrConfigsOnChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCbrConfigsOnChainResponse proto.InternalMessageInfo

func (m *GetCbrConfigsOnChainResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetCbrConfigsOnChainResponse) GetDelayPeriod() string {
	if m != nil {
		return m.DelayPeriod
	}
	return ""
}

func (m *GetCbrConfigsOnChainResponse) GetEpochLength() string {
	if m != nil {
		return m.EpochLength
	}
	return ""
}

func (m *GetCbrConfigsOnChainResponse) GetNativeWrap() string {
	if m != nil {
		return m.NativeWrap
	}
	return ""
}

func (m *GetCbrConfigsOnChainResponse) GetTokens() []*ExtendedToken {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type RetentionRewardsEvent struct {
	EventId uint64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// in millis
	EventStartTime uint64 `protobuf:"varint,2,opt,name=event_start_time,json=eventStartTime,proto3" json:"event_start_time,omitempty"`
	// in millis
	EventEndTime uint64                                   `protobuf:"varint,3,opt,name=event_end_time,json=eventEndTime,proto3" json:"event_end_time,omitempty"`
	Wrapper      *RetentionRewardsEventLevelConfigWrapper `protobuf:"bytes,4,opt,name=wrapper,proto3" json:"wrapper,omitempty"`
	// event ends early if the so_far_sum_reward of all participated users' rewards exceed this value
	EventPromoImgUrl    string `protobuf:"bytes,5,opt,name=event_promo_img_url,json=eventPromoImgUrl,proto3" json:"event_promo_img_url,omitempty"`
	EventFaqLinkUrl     string `protobuf:"bytes,6,opt,name=event_faq_link_url,json=eventFaqLinkUrl,proto3" json:"event_faq_link_url,omitempty"`
	EventRewardsTooltip string `protobuf:"bytes,7,opt,name=event_rewards_tooltip,json=eventRewardsTooltip,proto3" json:"event_rewards_tooltip,omitempty"`
	EventDescription    string `protobuf:"bytes,8,opt,name=event_description,json=eventDescription,proto3" json:"event_description,omitempty"`
	EventTitle          string `protobuf:"bytes,9,opt,name=event_title,json=eventTitle,proto3" json:"event_title,omitempty"`
	// event ends early if the so_far_sum_reward of all participated users' rewards exceed this value
	EventMaxRewardCap float64 `protobuf:"fixed64,10,opt,name=event_max_reward_cap,json=eventMaxRewardCap,proto3" json:"event_max_reward_cap,omitempty"`
	SoFarSumReward    float64 `protobuf:"fixed64,11,opt,name=so_far_sum_reward,json=soFarSumReward,proto3" json:"so_far_sum_reward,omitempty"`
}

func (m *RetentionRewardsEvent) Reset()         { *m = RetentionRewardsEvent{} }
func (m *RetentionRewardsEvent) String() string { return proto.CompactTextString(m) }
func (*RetentionRewardsEvent) ProtoMessage()    {}
func (*RetentionRewardsEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{73}
}
func (m *RetentionRewardsEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetentionRewardsEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetentionRewardsEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetentionRewardsEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetentionRewardsEvent.Merge(m, src)
}
func (m *RetentionRewardsEvent) XXX_Size() int {
	return m.Size()
}
func (m *RetentionRewardsEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RetentionRewardsEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RetentionRewardsEvent proto.InternalMessageInfo

func (m *RetentionRewardsEvent) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *RetentionRewardsEvent) GetEventStartTime() uint64 {
	if m != nil {
		return m.EventStartTime
	}
	return 0
}

func (m *RetentionRewardsEvent) GetEventEndTime() uint64 {
	if m != nil {
		return m.EventEndTime
	}
	return 0
}

func (m *RetentionRewardsEvent) GetWrapper() *RetentionRewardsEventLevelConfigWrapper {
	if m != nil {
		return m.Wrapper
	}
	return nil
}

func (m *RetentionRewardsEvent) GetEventPromoImgUrl() string {
	if m != nil {
		return m.EventPromoImgUrl
	}
	return ""
}

func (m *RetentionRewardsEvent) GetEventFaqLinkUrl() string {
	if m != nil {
		return m.EventFaqLinkUrl
	}
	return ""
}

func (m *RetentionRewardsEvent) GetEventRewardsTooltip() string {
	if m != nil {
		return m.EventRewardsTooltip
	}
	return ""
}

func (m *RetentionRewardsEvent) GetEventDescription() string {
	if m != nil {
		return m.EventDescription
	}
	return ""
}

func (m *RetentionRewardsEvent) GetEventTitle() string {
	if m != nil {
		return m.EventTitle
	}
	return ""
}

func (m *RetentionRewardsEvent) GetEventMaxRewardCap() float64 {
	if m != nil {
		return m.EventMaxRewardCap
	}
	return 0
}

func (m *RetentionRewardsEvent) GetSoFarSumReward() float64 {
	if m != nil {
		return m.SoFarSumReward
	}
	return 0
}

type RetentionRewardsEventLevelConfigWrapper struct {
	// key is level
	LevelConfig map[string]*RetentionRewardsLevelConfig `protobuf:"bytes,1,rep,name=level_config,json=levelConfig,proto3" json:"level_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RetentionRewardsEventLevelConfigWrapper) Reset() {
	*m = RetentionRewardsEventLevelConfigWrapper{}
}
func (m *RetentionRewardsEventLevelConfigWrapper) String() string { return proto.CompactTextString(m) }
func (*RetentionRewardsEventLevelConfigWrapper) ProtoMessage()    {}
func (*RetentionRewardsEventLevelConfigWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{74}
}
func (m *RetentionRewardsEventLevelConfigWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetentionRewardsEventLevelConfigWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetentionRewardsEventLevelConfigWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetentionRewardsEventLevelConfigWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetentionRewardsEventLevelConfigWrapper.Merge(m, src)
}
func (m *RetentionRewardsEventLevelConfigWrapper) XXX_Size() int {
	return m.Size()
}
func (m *RetentionRewardsEventLevelConfigWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_RetentionRewardsEventLevelConfigWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_RetentionRewardsEventLevelConfigWrapper proto.InternalMessageInfo

func (m *RetentionRewardsEventLevelConfigWrapper) GetLevelConfig() map[string]*RetentionRewardsLevelConfig {
	if m != nil {
		return m.LevelConfig
	}
	return nil
}

type RetentionRewardsLevelConfig struct {
	// in CELR wei
	MaxReward string `protobuf:"bytes,1,opt,name=max_reward,json=maxReward,proto3" json:"max_reward,omitempty"`
	// in USD
	MaxTransferVolume float64 `protobuf:"fixed64,2,opt,name=max_transfer_volume,json=maxTransferVolume,proto3" json:"max_transfer_volume,omitempty"`
}

func (m *RetentionRewardsLevelConfig) Reset()         { *m = RetentionRewardsLevelConfig{} }
func (m *RetentionRewardsLevelConfig) String() string { return proto.CompactTextString(m) }
func (*RetentionRewardsLevelConfig) ProtoMessage()    {}
func (*RetentionRewardsLevelConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{75}
}
func (m *RetentionRewardsLevelConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetentionRewardsLevelConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetentionRewardsLevelConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetentionRewardsLevelConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetentionRewardsLevelConfig.Merge(m, src)
}
func (m *RetentionRewardsLevelConfig) XXX_Size() int {
	return m.Size()
}
func (m *RetentionRewardsLevelConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RetentionRewardsLevelConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RetentionRewardsLevelConfig proto.InternalMessageInfo

func (m *RetentionRewardsLevelConfig) GetMaxReward() string {
	if m != nil {
		return m.MaxReward
	}
	return ""
}

func (m *RetentionRewardsLevelConfig) GetMaxTransferVolume() float64 {
	if m != nil {
		return m.MaxTransferVolume
	}
	return 0
}

type GetRetentionRewardsInfoRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *GetRetentionRewardsInfoRequest) Reset()         { *m = GetRetentionRewardsInfoRequest{} }
func (m *GetRetentionRewardsInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetRetentionRewardsInfoRequest) ProtoMessage()    {}
func (*GetRetentionRewardsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{76}
}
func (m *GetRetentionRewardsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionRewardsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionRewardsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionRewardsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionRewardsInfoRequest.Merge(m, src)
}
func (m *GetRetentionRewardsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionRewardsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionRewardsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionRewardsInfoRequest proto.InternalMessageInfo

func (m *GetRetentionRewardsInfoRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type GetRetentionRewardsInfoResponse struct {
	Err     *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	EventId uint64  `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// in millis
	EventEndTime uint64 `protobuf:"varint,3,opt,name=event_end_time,json=eventEndTime,proto3" json:"event_end_time,omitempty"`
	// in CELR
	MaxReward         string  `protobuf:"bytes,4,opt,name=max_reward,json=maxReward,proto3" json:"max_reward,omitempty"`
	MaxTransferVolume float64 `protobuf:"fixed64,5,opt,name=max_transfer_volume,json=maxTransferVolume,proto3" json:"max_transfer_volume,omitempty"`
	// in wei
	CurrentReward string  `protobuf:"bytes,6,opt,name=current_reward,json=currentReward,proto3" json:"current_reward,omitempty"`
	CelrUsdPrice  float64 `protobuf:"fixed64,7,opt,name=celr_usd_price,json=celrUsdPrice,proto3" json:"celr_usd_price,omitempty"`
	// if not 0 means already claimed
	ClaimTime uint64 `protobuf:"varint,8,opt,name=claim_time,json=claimTime,proto3" json:"claim_time,omitempty"`
	// signatures defines the signatures to be verified on Ethereum.
	Signature           types4.Signature `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature" yaml:"signature"`
	EventPromoImgUrl    string           `protobuf:"bytes,10,opt,name=event_promo_img_url,json=eventPromoImgUrl,proto3" json:"event_promo_img_url,omitempty"`
	EventFaqLinkUrl     string           `protobuf:"bytes,11,opt,name=event_faq_link_url,json=eventFaqLinkUrl,proto3" json:"event_faq_link_url,omitempty"`
	EventRewardsTooltip string           `protobuf:"bytes,12,opt,name=event_rewards_tooltip,json=eventRewardsTooltip,proto3" json:"event_rewards_tooltip,omitempty"`
	EventDescription    string           `protobuf:"bytes,13,opt,name=event_description,json=eventDescription,proto3" json:"event_description,omitempty"`
	EventTitle          string           `protobuf:"bytes,14,opt,name=event_title,json=eventTitle,proto3" json:"event_title,omitempty"`
	// event ends early if the so_far_sum_reward of all participated users' rewards exceed this value
	EventMaxRewardCap float64 `protobuf:"fixed64,15,opt,name=event_max_reward_cap,json=eventMaxRewardCap,proto3" json:"event_max_reward_cap,omitempty"`
	SoFarSumReward    float64 `protobuf:"fixed64,16,opt,name=so_far_sum_reward,json=soFarSumReward,proto3" json:"so_far_sum_reward,omitempty"`
}

func (m *GetRetentionRewardsInfoResponse) Reset()         { *m = GetRetentionRewardsInfoResponse{} }
func (m *GetRetentionRewardsInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetRetentionRewardsInfoResponse) ProtoMessage()    {}
func (*GetRetentionRewardsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{77}
}
func (m *GetRetentionRewardsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRetentionRewardsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRetentionRewardsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRetentionRewardsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRetentionRewardsInfoResponse.Merge(m, src)
}
func (m *GetRetentionRewardsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRetentionRewardsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRetentionRewardsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRetentionRewardsInfoResponse proto.InternalMessageInfo

func (m *GetRetentionRewardsInfoResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetRetentionRewardsInfoResponse) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *GetRetentionRewardsInfoResponse) GetEventEndTime() uint64 {
	if m != nil {
		return m.EventEndTime
	}
	return 0
}

func (m *GetRetentionRewardsInfoResponse) GetMaxReward() string {
	if m != nil {
		return m.MaxReward
	}
	return ""
}

func (m *GetRetentionRewardsInfoResponse) GetMaxTransferVolume() float64 {
	if m != nil {
		return m.MaxTransferVolume
	}
	return 0
}

func (m *GetRetentionRewardsInfoResponse) GetCurrentReward() string {
	if m != nil {
		return m.CurrentReward
	}
	return ""
}

func (m *GetRetentionRewardsInfoResponse) GetCelrUsdPrice() float64 {
	if m != nil {
		return m.CelrUsdPrice
	}
	return 0
}

func (m *GetRetentionRewardsInfoResponse) GetClaimTime() uint64 {
	if m != nil {
		return m.ClaimTime
	}
	return 0
}

func (m *GetRetentionRewardsInfoResponse) GetSignature() types4.Signature {
	if m != nil {
		return m.Signature
	}
	return types4.Signature{}
}

func (m *GetRetentionRewardsInfoResponse) GetEventPromoImgUrl() string {
	if m != nil {
		return m.EventPromoImgUrl
	}
	return ""
}

func (m *GetRetentionRewardsInfoResponse) GetEventFaqLinkUrl() string {
	if m != nil {
		return m.EventFaqLinkUrl
	}
	return ""
}

func (m *GetRetentionRewardsInfoResponse) GetEventRewardsTooltip() string {
	if m != nil {
		return m.EventRewardsTooltip
	}
	return ""
}

func (m *GetRetentionRewardsInfoResponse) GetEventDescription() string {
	if m != nil {
		return m.EventDescription
	}
	return ""
}

func (m *GetRetentionRewardsInfoResponse) GetEventTitle() string {
	if m != nil {
		return m.EventTitle
	}
	return ""
}

func (m *GetRetentionRewardsInfoResponse) GetEventMaxRewardCap() float64 {
	if m != nil {
		return m.EventMaxRewardCap
	}
	return 0
}

func (m *GetRetentionRewardsInfoResponse) GetSoFarSumReward() float64 {
	if m != nil {
		return m.SoFarSumReward
	}
	return 0
}

type ClaimRetentionRewardsRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *ClaimRetentionRewardsRequest) Reset()         { *m = ClaimRetentionRewardsRequest{} }
func (m *ClaimRetentionRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*ClaimRetentionRewardsRequest) ProtoMessage()    {}
func (*ClaimRetentionRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{78}
}
func (m *ClaimRetentionRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimRetentionRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimRetentionRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimRetentionRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimRetentionRewardsRequest.Merge(m, src)
}
func (m *ClaimRetentionRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimRetentionRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimRetentionRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimRetentionRewardsRequest proto.InternalMessageInfo

func (m *ClaimRetentionRewardsRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type ClaimRetentionRewardsResponse struct {
	Err     *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	EventId uint64  `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// in wei
	CurrentReward string `protobuf:"bytes,3,opt,name=current_reward,json=currentReward,proto3" json:"current_reward,omitempty"`
	// signatures defines the signatures to be verified on Ethereum.
	Signature types4.Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature" yaml:"signature"`
}

func (m *ClaimRetentionRewardsResponse) Reset()         { *m = ClaimRetentionRewardsResponse{} }
func (m *ClaimRetentionRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*ClaimRetentionRewardsResponse) ProtoMessage()    {}
func (*ClaimRetentionRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{79}
}
func (m *ClaimRetentionRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimRetentionRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimRetentionRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimRetentionRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimRetentionRewardsResponse.Merge(m, src)
}
func (m *ClaimRetentionRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClaimRetentionRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimRetentionRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimRetentionRewardsResponse proto.InternalMessageInfo

func (m *ClaimRetentionRewardsResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ClaimRetentionRewardsResponse) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *ClaimRetentionRewardsResponse) GetCurrentReward() string {
	if m != nil {
		return m.CurrentReward
	}
	return ""
}

func (m *ClaimRetentionRewardsResponse) GetSignature() types4.Signature {
	if m != nil {
		return m.Signature
	}
	return types4.Signature{}
}

type GetIncentiveCampaignCelrRankRequest struct {
}

func (m *GetIncentiveCampaignCelrRankRequest) Reset()         { *m = GetIncentiveCampaignCelrRankRequest{} }
func (m *GetIncentiveCampaignCelrRankRequest) String() string { return proto.CompactTextString(m) }
func (*GetIncentiveCampaignCelrRankRequest) ProtoMessage()    {}
func (*GetIncentiveCampaignCelrRankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{80}
}
func (m *GetIncentiveCampaignCelrRankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetIncentiveCampaignCelrRankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetIncentiveCampaignCelrRankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetIncentiveCampaignCelrRankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIncentiveCampaignCelrRankRequest.Merge(m, src)
}
func (m *GetIncentiveCampaignCelrRankRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetIncentiveCampaignCelrRankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIncentiveCampaignCelrRankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIncentiveCampaignCelrRankRequest proto.InternalMessageInfo

type GetIncentiveCampaignCelrRankResponse struct {
	Err   *ErrMsg                  `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Ranks []*IncentiveCampaignRank `protobuf:"bytes,2,rep,name=ranks,proto3" json:"ranks,omitempty"`
	// in millis
	UpdateTime uint64 `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (m *GetIncentiveCampaignCelrRankResponse) Reset()         { *m = GetIncentiveCampaignCelrRankResponse{} }
func (m *GetIncentiveCampaignCelrRankResponse) String() string { return proto.CompactTextString(m) }
func (*GetIncentiveCampaignCelrRankResponse) ProtoMessage()    {}
func (*GetIncentiveCampaignCelrRankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{81}
}
func (m *GetIncentiveCampaignCelrRankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetIncentiveCampaignCelrRankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetIncentiveCampaignCelrRankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetIncentiveCampaignCelrRankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIncentiveCampaignCelrRankResponse.Merge(m, src)
}
func (m *GetIncentiveCampaignCelrRankResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetIncentiveCampaignCelrRankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIncentiveCampaignCelrRankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIncentiveCampaignCelrRankResponse proto.InternalMessageInfo

func (m *GetIncentiveCampaignCelrRankResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetIncentiveCampaignCelrRankResponse) GetRanks() []*IncentiveCampaignRank {
	if m != nil {
		return m.Ranks
	}
	return nil
}

func (m *GetIncentiveCampaignCelrRankResponse) GetUpdateTime() uint64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

type GetIncentiveCampaignBnbRankRequest struct {
}

func (m *GetIncentiveCampaignBnbRankRequest) Reset()         { *m = GetIncentiveCampaignBnbRankRequest{} }
func (m *GetIncentiveCampaignBnbRankRequest) String() string { return proto.CompactTextString(m) }
func (*GetIncentiveCampaignBnbRankRequest) ProtoMessage()    {}
func (*GetIncentiveCampaignBnbRankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{82}
}
func (m *GetIncentiveCampaignBnbRankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetIncentiveCampaignBnbRankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetIncentiveCampaignBnbRankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetIncentiveCampaignBnbRankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIncentiveCampaignBnbRankRequest.Merge(m, src)
}
func (m *GetIncentiveCampaignBnbRankRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetIncentiveCampaignBnbRankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIncentiveCampaignBnbRankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIncentiveCampaignBnbRankRequest proto.InternalMessageInfo

type GetIncentiveCampaignBnbRankResponse struct {
	Err   *ErrMsg                  `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Ranks []*IncentiveCampaignRank `protobuf:"bytes,2,rep,name=ranks,proto3" json:"ranks,omitempty"`
	// in millis
	UpdateTime uint64 `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (m *GetIncentiveCampaignBnbRankResponse) Reset()         { *m = GetIncentiveCampaignBnbRankResponse{} }
func (m *GetIncentiveCampaignBnbRankResponse) String() string { return proto.CompactTextString(m) }
func (*GetIncentiveCampaignBnbRankResponse) ProtoMessage()    {}
func (*GetIncentiveCampaignBnbRankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{83}
}
func (m *GetIncentiveCampaignBnbRankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetIncentiveCampaignBnbRankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetIncentiveCampaignBnbRankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetIncentiveCampaignBnbRankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIncentiveCampaignBnbRankResponse.Merge(m, src)
}
func (m *GetIncentiveCampaignBnbRankResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetIncentiveCampaignBnbRankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIncentiveCampaignBnbRankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIncentiveCampaignBnbRankResponse proto.InternalMessageInfo

func (m *GetIncentiveCampaignBnbRankResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetIncentiveCampaignBnbRankResponse) GetRanks() []*IncentiveCampaignRank {
	if m != nil {
		return m.Ranks
	}
	return nil
}

func (m *GetIncentiveCampaignBnbRankResponse) GetUpdateTime() uint64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

type InIncentiveCampaignBnbWhiteListRequest struct {
	// 0x
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *InIncentiveCampaignBnbWhiteListRequest) Reset() {
	*m = InIncentiveCampaignBnbWhiteListRequest{}
}
func (m *InIncentiveCampaignBnbWhiteListRequest) String() string { return proto.CompactTextString(m) }
func (*InIncentiveCampaignBnbWhiteListRequest) ProtoMessage()    {}
func (*InIncentiveCampaignBnbWhiteListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{84}
}
func (m *InIncentiveCampaignBnbWhiteListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InIncentiveCampaignBnbWhiteListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InIncentiveCampaignBnbWhiteListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InIncentiveCampaignBnbWhiteListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InIncentiveCampaignBnbWhiteListRequest.Merge(m, src)
}
func (m *InIncentiveCampaignBnbWhiteListRequest) XXX_Size() int {
	return m.Size()
}
func (m *InIncentiveCampaignBnbWhiteListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InIncentiveCampaignBnbWhiteListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InIncentiveCampaignBnbWhiteListRequest proto.InternalMessageInfo

func (m *InIncentiveCampaignBnbWhiteListRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type InIncentiveCampaignBnbWhiteListResponse struct {
	Err      *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Eligible bool    `protobuf:"varint,2,opt,name=eligible,proto3" json:"eligible,omitempty"`
}

func (m *InIncentiveCampaignBnbWhiteListResponse) Reset() {
	*m = InIncentiveCampaignBnbWhiteListResponse{}
}
func (m *InIncentiveCampaignBnbWhiteListResponse) String() string { return proto.CompactTextString(m) }
func (*InIncentiveCampaignBnbWhiteListResponse) ProtoMessage()    {}
func (*InIncentiveCampaignBnbWhiteListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{85}
}
func (m *InIncentiveCampaignBnbWhiteListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InIncentiveCampaignBnbWhiteListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InIncentiveCampaignBnbWhiteListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InIncentiveCampaignBnbWhiteListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InIncentiveCampaignBnbWhiteListResponse.Merge(m, src)
}
func (m *InIncentiveCampaignBnbWhiteListResponse) XXX_Size() int {
	return m.Size()
}
func (m *InIncentiveCampaignBnbWhiteListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InIncentiveCampaignBnbWhiteListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InIncentiveCampaignBnbWhiteListResponse proto.InternalMessageInfo

func (m *InIncentiveCampaignBnbWhiteListResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *InIncentiveCampaignBnbWhiteListResponse) GetEligible() bool {
	if m != nil {
		return m.Eligible
	}
	return false
}

type IncentiveCampaignRank struct {
	// 0x
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// start from 1
	Rank   uint64  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Volume float64 `protobuf:"fixed64,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *IncentiveCampaignRank) Reset()         { *m = IncentiveCampaignRank{} }
func (m *IncentiveCampaignRank) String() string { return proto.CompactTextString(m) }
func (*IncentiveCampaignRank) ProtoMessage()    {}
func (*IncentiveCampaignRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{86}
}
func (m *IncentiveCampaignRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentiveCampaignRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentiveCampaignRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentiveCampaignRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentiveCampaignRank.Merge(m, src)
}
func (m *IncentiveCampaignRank) XXX_Size() int {
	return m.Size()
}
func (m *IncentiveCampaignRank) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentiveCampaignRank.DiscardUnknown(m)
}

var xxx_messageInfo_IncentiveCampaignRank proto.InternalMessageInfo

func (m *IncentiveCampaignRank) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *IncentiveCampaignRank) GetRank() uint64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *IncentiveCampaignRank) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

type FeeRebateEvent struct {
	EventId uint64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// in millis
	EventStartTime uint64 `protobuf:"varint,2,opt,name=event_start_time,json=eventStartTime,proto3" json:"event_start_time,omitempty"`
	// in millis
	EventEndTime uint64                            `protobuf:"varint,3,opt,name=event_end_time,json=eventEndTime,proto3" json:"event_end_time,omitempty"`
	Wrapper      *FeeRebateEventLevelConfigWrapper `protobuf:"bytes,4,opt,name=wrapper,proto3" json:"wrapper,omitempty"`
	// event ends early if the so_far_sum_reward of all participated users' rewards exceed this value
	EventMaxRewardCap float64 `protobuf:"fixed64,5,opt,name=event_max_reward_cap,json=eventMaxRewardCap,proto3" json:"event_max_reward_cap,omitempty"`
	SoFarSumReward    float64 `protobuf:"fixed64,6,opt,name=so_far_sum_reward,json=soFarSumReward,proto3" json:"so_far_sum_reward,omitempty"`
}

func (m *FeeRebateEvent) Reset()         { *m = FeeRebateEvent{} }
func (m *FeeRebateEvent) String() string { return proto.CompactTextString(m) }
func (*FeeRebateEvent) ProtoMessage()    {}
func (*FeeRebateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{87}
}
func (m *FeeRebateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeRebateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeRebateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeRebateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeRebateEvent.Merge(m, src)
}
func (m *FeeRebateEvent) XXX_Size() int {
	return m.Size()
}
func (m *FeeRebateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeRebateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FeeRebateEvent proto.InternalMessageInfo

func (m *FeeRebateEvent) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *FeeRebateEvent) GetEventStartTime() uint64 {
	if m != nil {
		return m.EventStartTime
	}
	return 0
}

func (m *FeeRebateEvent) GetEventEndTime() uint64 {
	if m != nil {
		return m.EventEndTime
	}
	return 0
}

func (m *FeeRebateEvent) GetWrapper() *FeeRebateEventLevelConfigWrapper {
	if m != nil {
		return m.Wrapper
	}
	return nil
}

func (m *FeeRebateEvent) GetEventMaxRewardCap() float64 {
	if m != nil {
		return m.EventMaxRewardCap
	}
	return 0
}

func (m *FeeRebateEvent) GetSoFarSumReward() float64 {
	if m != nil {
		return m.SoFarSumReward
	}
	return 0
}

type FeeRebateEventLevelConfigWrapper struct {
	// LevelDivisionLowerBound[0] <= tx volume <= LevelDivisionLowerBound[1] is level 1,
	// LevelDivisionLowerBound[1] <= tx volume <= LevelDivisionLowerBound[2] is level 2
	LevelDivisionLowerBound []float64 `protobuf:"fixed64,1,rep,packed,name=level_division_lower_bound,json=levelDivisionLowerBound,proto3" json:"level_division_lower_bound,omitempty"`
	// key is level
	LevelConfig map[string]*FeeRebateLevelConfig `protobuf:"bytes,2,rep,name=level_config,json=levelConfig,proto3" json:"level_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FeeRebateEventLevelConfigWrapper) Reset()         { *m = FeeRebateEventLevelConfigWrapper{} }
func (m *FeeRebateEventLevelConfigWrapper) String() string { return proto.CompactTextString(m) }
func (*FeeRebateEventLevelConfigWrapper) ProtoMessage()    {}
func (*FeeRebateEventLevelConfigWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{88}
}
func (m *FeeRebateEventLevelConfigWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeRebateEventLevelConfigWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeRebateEventLevelConfigWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeRebateEventLevelConfigWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeRebateEventLevelConfigWrapper.Merge(m, src)
}
func (m *FeeRebateEventLevelConfigWrapper) XXX_Size() int {
	return m.Size()
}
func (m *FeeRebateEventLevelConfigWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeRebateEventLevelConfigWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_FeeRebateEventLevelConfigWrapper proto.InternalMessageInfo

func (m *FeeRebateEventLevelConfigWrapper) GetLevelDivisionLowerBound() []float64 {
	if m != nil {
		return m.LevelDivisionLowerBound
	}
	return nil
}

func (m *FeeRebateEventLevelConfigWrapper) GetLevelConfig() map[string]*FeeRebateLevelConfig {
	if m != nil {
		return m.LevelConfig
	}
	return nil
}

type FeeRebateLevelConfig struct {
	RebatePortion float64 `protobuf:"fixed64,1,opt,name=rebate_portion,json=rebatePortion,proto3" json:"rebate_portion,omitempty"`
	// in wei
	MaxReward string `protobuf:"bytes,2,opt,name=max_reward,json=maxReward,proto3" json:"max_reward,omitempty"`
}

func (m *FeeRebateLevelConfig) Reset()         { *m = FeeRebateLevelConfig{} }
func (m *FeeRebateLevelConfig) String() string { return proto.CompactTextString(m) }
func (*FeeRebateLevelConfig) ProtoMessage()    {}
func (*FeeRebateLevelConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{89}
}
func (m *FeeRebateLevelConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeRebateLevelConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeRebateLevelConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeRebateLevelConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeRebateLevelConfig.Merge(m, src)
}
func (m *FeeRebateLevelConfig) XXX_Size() int {
	return m.Size()
}
func (m *FeeRebateLevelConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeRebateLevelConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FeeRebateLevelConfig proto.InternalMessageInfo

func (m *FeeRebateLevelConfig) GetRebatePortion() float64 {
	if m != nil {
		return m.RebatePortion
	}
	return 0
}

func (m *FeeRebateLevelConfig) GetMaxReward() string {
	if m != nil {
		return m.MaxReward
	}
	return ""
}

type GetFeeRebateInfoRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *GetFeeRebateInfoRequest) Reset()         { *m = GetFeeRebateInfoRequest{} }
func (m *GetFeeRebateInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetFeeRebateInfoRequest) ProtoMessage()    {}
func (*GetFeeRebateInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{90}
}
func (m *GetFeeRebateInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFeeRebateInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFeeRebateInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFeeRebateInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeeRebateInfoRequest.Merge(m, src)
}
func (m *GetFeeRebateInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFeeRebateInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeeRebateInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeeRebateInfoRequest proto.InternalMessageInfo

func (m *GetFeeRebateInfoRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type GetFeeRebateInfoResponse struct {
	Err     *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	EventId uint64  `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// in millis
	EventEndTime  uint64  `protobuf:"varint,3,opt,name=event_end_time,json=eventEndTime,proto3" json:"event_end_time,omitempty"`
	RebatePortion float64 `protobuf:"fixed64,4,opt,name=rebate_portion,json=rebatePortion,proto3" json:"rebate_portion,omitempty"`
	// CELR in wei
	Reward       string  `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
	CelrUsdPrice float64 `protobuf:"fixed64,6,opt,name=celr_usd_price,json=celrUsdPrice,proto3" json:"celr_usd_price,omitempty"`
	// if not 0 means already claimed
	ClaimTime uint64 `protobuf:"varint,7,opt,name=claim_time,json=claimTime,proto3" json:"claim_time,omitempty"`
	// signatures defines the signatures to be verified on Ethereum.
	Signature types4.Signature `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature" yaml:"signature"`
	// event ends early if the so_far_sum_reward of all participated users' rewards exceed this value
	EventMaxRewardCap float64 `protobuf:"fixed64,9,opt,name=event_max_reward_cap,json=eventMaxRewardCap,proto3" json:"event_max_reward_cap,omitempty"`
	SoFarSumReward    float64 `protobuf:"fixed64,10,opt,name=so_far_sum_reward,json=soFarSumReward,proto3" json:"so_far_sum_reward,omitempty"`
}

func (m *GetFeeRebateInfoResponse) Reset()         { *m = GetFeeRebateInfoResponse{} }
func (m *GetFeeRebateInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetFeeRebateInfoResponse) ProtoMessage()    {}
func (*GetFeeRebateInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{91}
}
func (m *GetFeeRebateInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFeeRebateInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFeeRebateInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFeeRebateInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeeRebateInfoResponse.Merge(m, src)
}
func (m *GetFeeRebateInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFeeRebateInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeeRebateInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeeRebateInfoResponse proto.InternalMessageInfo

func (m *GetFeeRebateInfoResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetFeeRebateInfoResponse) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *GetFeeRebateInfoResponse) GetEventEndTime() uint64 {
	if m != nil {
		return m.EventEndTime
	}
	return 0
}

func (m *GetFeeRebateInfoResponse) GetRebatePortion() float64 {
	if m != nil {
		return m.RebatePortion
	}
	return 0
}

func (m *GetFeeRebateInfoResponse) GetReward() string {
	if m != nil {
		return m.Reward
	}
	return ""
}

func (m *GetFeeRebateInfoResponse) GetCelrUsdPrice() float64 {
	if m != nil {
		return m.CelrUsdPrice
	}
	return 0
}

func (m *GetFeeRebateInfoResponse) GetClaimTime() uint64 {
	if m != nil {
		return m.ClaimTime
	}
	return 0
}

func (m *GetFeeRebateInfoResponse) GetSignature() types4.Signature {
	if m != nil {
		return m.Signature
	}
	return types4.Signature{}
}

func (m *GetFeeRebateInfoResponse) GetEventMaxRewardCap() float64 {
	if m != nil {
		return m.EventMaxRewardCap
	}
	return 0
}

func (m *GetFeeRebateInfoResponse) GetSoFarSumReward() float64 {
	if m != nil {
		return m.SoFarSumReward
	}
	return 0
}

type ClaimFeeRebateRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *ClaimFeeRebateRequest) Reset()         { *m = ClaimFeeRebateRequest{} }
func (m *ClaimFeeRebateRequest) String() string { return proto.CompactTextString(m) }
func (*ClaimFeeRebateRequest) ProtoMessage()    {}
func (*ClaimFeeRebateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{92}
}
func (m *ClaimFeeRebateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimFeeRebateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimFeeRebateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimFeeRebateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimFeeRebateRequest.Merge(m, src)
}
func (m *ClaimFeeRebateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimFeeRebateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimFeeRebateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimFeeRebateRequest proto.InternalMessageInfo

func (m *ClaimFeeRebateRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type ClaimFeeRebateResponse struct {
	Err     *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	EventId uint64  `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// in wei
	Reward string `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
	// signatures defines the signatures to be verified on Ethereum.
	Signature types4.Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature" yaml:"signature"`
}

func (m *ClaimFeeRebateResponse) Reset()         { *m = ClaimFeeRebateResponse{} }
func (m *ClaimFeeRebateResponse) String() string { return proto.CompactTextString(m) }
func (*ClaimFeeRebateResponse) ProtoMessage()    {}
func (*ClaimFeeRebateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{93}
}
func (m *ClaimFeeRebateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimFeeRebateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimFeeRebateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimFeeRebateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimFeeRebateResponse.Merge(m, src)
}
func (m *ClaimFeeRebateResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClaimFeeRebateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimFeeRebateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimFeeRebateResponse proto.InternalMessageInfo

func (m *ClaimFeeRebateResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ClaimFeeRebateResponse) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *ClaimFeeRebateResponse) GetReward() string {
	if m != nil {
		return m.Reward
	}
	return ""
}

func (m *ClaimFeeRebateResponse) GetSignature() types4.Signature {
	if m != nil {
		return m.Signature
	}
	return types4.Signature{}
}

type BscCampaignEventConfig struct {
	EventId uint64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// in millis
	EventStartTime uint64 `protobuf:"varint,2,opt,name=event_start_time,json=eventStartTime,proto3" json:"event_start_time,omitempty"`
	// in millis
	EventEndTime uint64 `protobuf:"varint,3,opt,name=event_end_time,json=eventEndTime,proto3" json:"event_end_time,omitempty"`
	// event ends early if the so_far_sum_reward of all participated users' rewards exceed this value
	EventPromoImgUrl    string `protobuf:"bytes,4,opt,name=event_promo_img_url,json=eventPromoImgUrl,proto3" json:"event_promo_img_url,omitempty"`
	EventFaqLinkUrl     string `protobuf:"bytes,5,opt,name=event_faq_link_url,json=eventFaqLinkUrl,proto3" json:"event_faq_link_url,omitempty"`
	EventRewardsTooltip string `protobuf:"bytes,6,opt,name=event_rewards_tooltip,json=eventRewardsTooltip,proto3" json:"event_rewards_tooltip,omitempty"`
	EventDescription    string `protobuf:"bytes,7,opt,name=event_description,json=eventDescription,proto3" json:"event_description,omitempty"`
	EventTitle          string `protobuf:"bytes,8,opt,name=event_title,json=eventTitle,proto3" json:"event_title,omitempty"`
	// 0x Hex
	WbnbAddr string `protobuf:"bytes,9,opt,name=wbnb_addr,json=wbnbAddr,proto3" json:"wbnb_addr,omitempty"`
	// 0x Hex
	RewardContractAddr string `protobuf:"bytes,10,opt,name=reward_contract_addr,json=rewardContractAddr,proto3" json:"reward_contract_addr,omitempty"`
	// event ends early if the so_far_sum_reward of all participated users' rewards exceed this value
	EventMaxRewardCap float64 `protobuf:"fixed64,11,opt,name=event_max_reward_cap,json=eventMaxRewardCap,proto3" json:"event_max_reward_cap,omitempty"`
	// sum of all users' rewards
	SoFarSumReward float64 `protobuf:"fixed64,12,opt,name=so_far_sum_reward,json=soFarSumReward,proto3" json:"so_far_sum_reward,omitempty"`
	// reward for one user ,in wei of WBNB
	MaxReward string `protobuf:"bytes,13,opt,name=max_reward,json=maxReward,proto3" json:"max_reward,omitempty"`
	// in USD
	MaxTransferVolume float64                              `protobuf:"fixed64,14,opt,name=max_transfer_volume,json=maxTransferVolume,proto3" json:"max_transfer_volume,omitempty"`
	TransferWhiteList *BscCampaignTransferWhiteListWrapper `protobuf:"bytes,15,opt,name=transfer_white_list,json=transferWhiteList,proto3" json:"transfer_white_list,omitempty"`
}

func (m *BscCampaignEventConfig) Reset()         { *m = BscCampaignEventConfig{} }
func (m *BscCampaignEventConfig) String() string { return proto.CompactTextString(m) }
func (*BscCampaignEventConfig) ProtoMessage()    {}
func (*BscCampaignEventConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{94}
}
func (m *BscCampaignEventConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BscCampaignEventConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BscCampaignEventConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BscCampaignEventConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BscCampaignEventConfig.Merge(m, src)
}
func (m *BscCampaignEventConfig) XXX_Size() int {
	return m.Size()
}
func (m *BscCampaignEventConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BscCampaignEventConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BscCampaignEventConfig proto.InternalMessageInfo

func (m *BscCampaignEventConfig) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *BscCampaignEventConfig) GetEventStartTime() uint64 {
	if m != nil {
		return m.EventStartTime
	}
	return 0
}

func (m *BscCampaignEventConfig) GetEventEndTime() uint64 {
	if m != nil {
		return m.EventEndTime
	}
	return 0
}

func (m *BscCampaignEventConfig) GetEventPromoImgUrl() string {
	if m != nil {
		return m.EventPromoImgUrl
	}
	return ""
}

func (m *BscCampaignEventConfig) GetEventFaqLinkUrl() string {
	if m != nil {
		return m.EventFaqLinkUrl
	}
	return ""
}

func (m *BscCampaignEventConfig) GetEventRewardsTooltip() string {
	if m != nil {
		return m.EventRewardsTooltip
	}
	return ""
}

func (m *BscCampaignEventConfig) GetEventDescription() string {
	if m != nil {
		return m.EventDescription
	}
	return ""
}

func (m *BscCampaignEventConfig) GetEventTitle() string {
	if m != nil {
		return m.EventTitle
	}
	return ""
}

func (m *BscCampaignEventConfig) GetWbnbAddr() string {
	if m != nil {
		return m.WbnbAddr
	}
	return ""
}

func (m *BscCampaignEventConfig) GetRewardContractAddr() string {
	if m != nil {
		return m.RewardContractAddr
	}
	return ""
}

func (m *BscCampaignEventConfig) GetEventMaxRewardCap() float64 {
	if m != nil {
		return m.EventMaxRewardCap
	}
	return 0
}

func (m *BscCampaignEventConfig) GetSoFarSumReward() float64 {
	if m != nil {
		return m.SoFarSumReward
	}
	return 0
}

func (m *BscCampaignEventConfig) GetMaxReward() string {
	if m != nil {
		return m.MaxReward
	}
	return ""
}

func (m *BscCampaignEventConfig) GetMaxTransferVolume() float64 {
	if m != nil {
		return m.MaxTransferVolume
	}
	return 0
}

func (m *BscCampaignEventConfig) GetTransferWhiteList() *BscCampaignTransferWhiteListWrapper {
	if m != nil {
		return m.TransferWhiteList
	}
	return nil
}

type BscCampaignTransferWhiteListWrapper struct {
	// token symbol -> chainIds
	TransferWhiteList map[string]*BscCampaignTransferWhiteList `protobuf:"bytes,1,rep,name=transfer_white_list,json=transferWhiteList,proto3" json:"transfer_white_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BscCampaignTransferWhiteListWrapper) Reset()         { *m = BscCampaignTransferWhiteListWrapper{} }
func (m *BscCampaignTransferWhiteListWrapper) String() string { return proto.CompactTextString(m) }
func (*BscCampaignTransferWhiteListWrapper) ProtoMessage()    {}
func (*BscCampaignTransferWhiteListWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{95}
}
func (m *BscCampaignTransferWhiteListWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BscCampaignTransferWhiteListWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BscCampaignTransferWhiteListWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BscCampaignTransferWhiteListWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BscCampaignTransferWhiteListWrapper.Merge(m, src)
}
func (m *BscCampaignTransferWhiteListWrapper) XXX_Size() int {
	return m.Size()
}
func (m *BscCampaignTransferWhiteListWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_BscCampaignTransferWhiteListWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_BscCampaignTransferWhiteListWrapper proto.InternalMessageInfo

func (m *BscCampaignTransferWhiteListWrapper) GetTransferWhiteList() map[string]*BscCampaignTransferWhiteList {
	if m != nil {
		return m.TransferWhiteList
	}
	return nil
}

type BscCampaignTransferWhiteList struct {
	ChainIds []uint64 `protobuf:"varint,1,rep,packed,name=chain_ids,json=chainIds,proto3" json:"chain_ids,omitempty"`
}

func (m *BscCampaignTransferWhiteList) Reset()         { *m = BscCampaignTransferWhiteList{} }
func (m *BscCampaignTransferWhiteList) String() string { return proto.CompactTextString(m) }
func (*BscCampaignTransferWhiteList) ProtoMessage()    {}
func (*BscCampaignTransferWhiteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{96}
}
func (m *BscCampaignTransferWhiteList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BscCampaignTransferWhiteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BscCampaignTransferWhiteList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BscCampaignTransferWhiteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BscCampaignTransferWhiteList.Merge(m, src)
}
func (m *BscCampaignTransferWhiteList) XXX_Size() int {
	return m.Size()
}
func (m *BscCampaignTransferWhiteList) XXX_DiscardUnknown() {
	xxx_messageInfo_BscCampaignTransferWhiteList.DiscardUnknown(m)
}

var xxx_messageInfo_BscCampaignTransferWhiteList proto.InternalMessageInfo

func (m *BscCampaignTransferWhiteList) GetChainIds() []uint64 {
	if m != nil {
		return m.ChainIds
	}
	return nil
}

type GetBscCampaignInfoRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *GetBscCampaignInfoRequest) Reset()         { *m = GetBscCampaignInfoRequest{} }
func (m *GetBscCampaignInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetBscCampaignInfoRequest) ProtoMessage()    {}
func (*GetBscCampaignInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{97}
}
func (m *GetBscCampaignInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBscCampaignInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBscCampaignInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBscCampaignInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBscCampaignInfoRequest.Merge(m, src)
}
func (m *GetBscCampaignInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBscCampaignInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBscCampaignInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBscCampaignInfoRequest proto.InternalMessageInfo

func (m *GetBscCampaignInfoRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type BscCampaignInfo struct {
	EventConfig *BscCampaignEventConfig `protobuf:"bytes,1,opt,name=event_config,json=eventConfig,proto3" json:"event_config,omitempty"`
	// in USD
	CurrentTransferVolume float64 `protobuf:"fixed64,2,opt,name=current_transfer_volume,json=currentTransferVolume,proto3" json:"current_transfer_volume,omitempty"`
	WbnbUsdPrice          float64 `protobuf:"fixed64,3,opt,name=wbnb_usd_price,json=wbnbUsdPrice,proto3" json:"wbnb_usd_price,omitempty"`
	// if not 0 means already claimed
	ClaimTime uint64 `protobuf:"varint,4,opt,name=claim_time,json=claimTime,proto3" json:"claim_time,omitempty"`
	// signatures defines the signatures to be verified on Ethereum.
	Signature types4.Signature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature" yaml:"signature"`
}

func (m *BscCampaignInfo) Reset()         { *m = BscCampaignInfo{} }
func (m *BscCampaignInfo) String() string { return proto.CompactTextString(m) }
func (*BscCampaignInfo) ProtoMessage()    {}
func (*BscCampaignInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{98}
}
func (m *BscCampaignInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BscCampaignInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BscCampaignInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BscCampaignInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BscCampaignInfo.Merge(m, src)
}
func (m *BscCampaignInfo) XXX_Size() int {
	return m.Size()
}
func (m *BscCampaignInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BscCampaignInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BscCampaignInfo proto.InternalMessageInfo

func (m *BscCampaignInfo) GetEventConfig() *BscCampaignEventConfig {
	if m != nil {
		return m.EventConfig
	}
	return nil
}

func (m *BscCampaignInfo) GetCurrentTransferVolume() float64 {
	if m != nil {
		return m.CurrentTransferVolume
	}
	return 0
}

func (m *BscCampaignInfo) GetWbnbUsdPrice() float64 {
	if m != nil {
		return m.WbnbUsdPrice
	}
	return 0
}

func (m *BscCampaignInfo) GetClaimTime() uint64 {
	if m != nil {
		return m.ClaimTime
	}
	return 0
}

func (m *BscCampaignInfo) GetSignature() types4.Signature {
	if m != nil {
		return m.Signature
	}
	return types4.Signature{}
}

type GetBscCampaignInfoResponse struct {
	Err  *ErrMsg            `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Info []*BscCampaignInfo `protobuf:"bytes,2,rep,name=info,proto3" json:"info,omitempty"`
}

func (m *GetBscCampaignInfoResponse) Reset()         { *m = GetBscCampaignInfoResponse{} }
func (m *GetBscCampaignInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetBscCampaignInfoResponse) ProtoMessage()    {}
func (*GetBscCampaignInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{99}
}
func (m *GetBscCampaignInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBscCampaignInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBscCampaignInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBscCampaignInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBscCampaignInfoResponse.Merge(m, src)
}
func (m *GetBscCampaignInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBscCampaignInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBscCampaignInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBscCampaignInfoResponse proto.InternalMessageInfo

func (m *GetBscCampaignInfoResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetBscCampaignInfoResponse) GetInfo() []*BscCampaignInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ClaimGetBscCampaignRewardRequest struct {
	Addr    string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	EventId uint64 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *ClaimGetBscCampaignRewardRequest) Reset()         { *m = ClaimGetBscCampaignRewardRequest{} }
func (m *ClaimGetBscCampaignRewardRequest) String() string { return proto.CompactTextString(m) }
func (*ClaimGetBscCampaignRewardRequest) ProtoMessage()    {}
func (*ClaimGetBscCampaignRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{100}
}
func (m *ClaimGetBscCampaignRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimGetBscCampaignRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimGetBscCampaignRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimGetBscCampaignRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimGetBscCampaignRewardRequest.Merge(m, src)
}
func (m *ClaimGetBscCampaignRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimGetBscCampaignRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimGetBscCampaignRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimGetBscCampaignRewardRequest proto.InternalMessageInfo

func (m *ClaimGetBscCampaignRewardRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ClaimGetBscCampaignRewardRequest) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

type ClaimGetBscCampaignRewardResponse struct {
	Err     *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	EventId uint64  `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// in wei of WBNB
	CurrentReward string `protobuf:"bytes,3,opt,name=current_reward,json=currentReward,proto3" json:"current_reward,omitempty"`
	// signatures defines the signatures to be verified on Ethereum.
	Signature types4.Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature" yaml:"signature"`
}

func (m *ClaimGetBscCampaignRewardResponse) Reset()         { *m = ClaimGetBscCampaignRewardResponse{} }
func (m *ClaimGetBscCampaignRewardResponse) String() string { return proto.CompactTextString(m) }
func (*ClaimGetBscCampaignRewardResponse) ProtoMessage()    {}
func (*ClaimGetBscCampaignRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{101}
}
func (m *ClaimGetBscCampaignRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimGetBscCampaignRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimGetBscCampaignRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimGetBscCampaignRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimGetBscCampaignRewardResponse.Merge(m, src)
}
func (m *ClaimGetBscCampaignRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClaimGetBscCampaignRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimGetBscCampaignRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimGetBscCampaignRewardResponse proto.InternalMessageInfo

func (m *ClaimGetBscCampaignRewardResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ClaimGetBscCampaignRewardResponse) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *ClaimGetBscCampaignRewardResponse) GetCurrentReward() string {
	if m != nil {
		return m.CurrentReward
	}
	return ""
}

func (m *ClaimGetBscCampaignRewardResponse) GetSignature() types4.Signature {
	if m != nil {
		return m.Signature
	}
	return types4.Signature{}
}

type GetCurrentBlockNumberByNodeRequest struct {
}

func (m *GetCurrentBlockNumberByNodeRequest) Reset()         { *m = GetCurrentBlockNumberByNodeRequest{} }
func (m *GetCurrentBlockNumberByNodeRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentBlockNumberByNodeRequest) ProtoMessage()    {}
func (*GetCurrentBlockNumberByNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{102}
}
func (m *GetCurrentBlockNumberByNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentBlockNumberByNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentBlockNumberByNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentBlockNumberByNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentBlockNumberByNodeRequest.Merge(m, src)
}
func (m *GetCurrentBlockNumberByNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentBlockNumberByNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentBlockNumberByNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentBlockNumberByNodeRequest proto.InternalMessageInfo

type GetCurrentBlockNumberByNodeResponse struct {
	Err *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	// key is addr
	Reports map[string]*relayer.SgnAnalyticsReport `protobuf:"bytes,2,rep,name=reports,proto3" json:"reports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// addrs' current block number is far from others'
	ProblematicAddrs []string `protobuf:"bytes,3,rep,name=problematic_addrs,json=problematicAddrs,proto3" json:"problematic_addrs,omitempty"`
}

func (m *GetCurrentBlockNumberByNodeResponse) Reset()         { *m = GetCurrentBlockNumberByNodeResponse{} }
func (m *GetCurrentBlockNumberByNodeResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentBlockNumberByNodeResponse) ProtoMessage()    {}
func (*GetCurrentBlockNumberByNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{103}
}
func (m *GetCurrentBlockNumberByNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentBlockNumberByNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentBlockNumberByNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentBlockNumberByNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentBlockNumberByNodeResponse.Merge(m, src)
}
func (m *GetCurrentBlockNumberByNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentBlockNumberByNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentBlockNumberByNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentBlockNumberByNodeResponse proto.InternalMessageInfo

func (m *GetCurrentBlockNumberByNodeResponse) GetErr() *ErrMsg {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetCurrentBlockNumberByNodeResponse) GetReports() map[string]*relayer.SgnAnalyticsReport {
	if m != nil {
		return m.Reports
	}
	return nil
}

func (m *GetCurrentBlockNumberByNodeResponse) GetProblematicAddrs() []string {
	if m != nil {
		return m.ProblematicAddrs
	}
	return nil
}

type ErrMsg struct {
	Code ErrCode `protobuf:"varint,1,opt,name=code,proto3,enum=sgn.gateway.v1.ErrCode" json:"code,omitempty"`
	Msg  string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ErrMsg) Reset()         { *m = ErrMsg{} }
func (m *ErrMsg) String() string { return proto.CompactTextString(m) }
func (*ErrMsg) ProtoMessage()    {}
func (*ErrMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{104}
}
func (m *ErrMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrMsg.Merge(m, src)
}
func (m *ErrMsg) XXX_Size() int {
	return m.Size()
}
func (m *ErrMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ErrMsg proto.InternalMessageInfo

func (m *ErrMsg) GetCode() ErrCode {
	if m != nil {
		return m.Code
	}
	return ErrCode_ERROR_CODE_UNDEFINED
}

func (m *ErrMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterEnum("sgn.gateway.v1.LPType", LPType_name, LPType_value)
	proto.RegisterEnum("sgn.gateway.v1.CSType", CSType_name, CSType_value)
	proto.RegisterEnum("sgn.gateway.v1.CSOperation", CSOperation_name, CSOperation_value)
	proto.RegisterEnum("sgn.gateway.v1.UserCaseStatus", UserCaseStatus_name, UserCaseStatus_value)
	proto.RegisterEnum("sgn.gateway.v1.WithdrawMethodType", WithdrawMethodType_name, WithdrawMethodType_value)
	proto.RegisterEnum("sgn.gateway.v1.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterType((*InitPegRefundRequest)(nil), "sgn.gateway.v1.InitPegRefundRequest")
	proto.RegisterType((*InitPegRefundResponse)(nil), "sgn.gateway.v1.InitPegRefundResponse")
	proto.RegisterType((*InitWithdrawRequest)(nil), "sgn.gateway.v1.InitWithdrawRequest")
	proto.RegisterType((*InitWithdrawResponse)(nil), "sgn.gateway.v1.InitWithdrawResponse")
	proto.RegisterType((*GetUsrBalanceRequest)(nil), "sgn.gateway.v1.GetUsrBalanceRequest")
	proto.RegisterType((*GetUsrBalanceResponse)(nil), "sgn.gateway.v1.GetUsrBalanceResponse")
	proto.RegisterType((*ClaimPegBridgeFeeRequest)(nil), "sgn.gateway.v1.ClaimPegBridgeFeeRequest")
	proto.RegisterType((*ClaimPegBridgeFeeResponse)(nil), "sgn.gateway.v1.ClaimPegBridgeFeeResponse")
	proto.RegisterType((*GetCampaignScoresRequest)(nil), "sgn.gateway.v1.GetCampaignScoresRequest")
	proto.RegisterType((*GetCampaignScoresResponse)(nil), "sgn.gateway.v1.GetCampaignScoresResponse")
	proto.RegisterType((*CampaignScore)(nil), "sgn.gateway.v1.CampaignScore")
	proto.RegisterType((*QueryLiquidityStatusResponse)(nil), "sgn.gateway.v1.QueryLiquidityStatusResponse")
	proto.RegisterType((*Chain)(nil), "sgn.gateway.v1.Chain")
	proto.RegisterType((*ChainTokenInfo)(nil), "sgn.gateway.v1.ChainTokenInfo")
	proto.RegisterType((*TokenInfo)(nil), "sgn.gateway.v1.TokenInfo")
	proto.RegisterType((*TransferInfo)(nil), "sgn.gateway.v1.TransferInfo")
	proto.RegisterType((*GetTransferStatusRequest)(nil), "sgn.gateway.v1.GetTransferStatusRequest")
	proto.RegisterType((*GetTransferStatusResponse)(nil), "sgn.gateway.v1.GetTransferStatusResponse")
	proto.RegisterType((*GetTransferConfigsRequest)(nil), "sgn.gateway.v1.GetTransferConfigsRequest")
	proto.RegisterType((*GetTransferConfigsResponse)(nil), "sgn.gateway.v1.GetTransferConfigsResponse")
	proto.RegisterMapType((map[uint32]*ChainTokenInfo)(nil), "sgn.gateway.v1.GetTransferConfigsResponse.ChainTokenEntry")
	proto.RegisterType((*PeggedPairConfig)(nil), "sgn.gateway.v1.PeggedPairConfig")
	proto.RegisterType((*GetTokenInfoRequest)(nil), "sgn.gateway.v1.GetTokenInfoRequest")
	proto.RegisterType((*GetTokenInfoResponse)(nil), "sgn.gateway.v1.GetTokenInfoResponse")
	proto.RegisterType((*EstimateAmtRequest)(nil), "sgn.gateway.v1.EstimateAmtRequest")
	proto.RegisterType((*EstimateAmtResponse)(nil), "sgn.gateway.v1.EstimateAmtResponse")
	proto.RegisterType((*WithdrawInfo)(nil), "sgn.gateway.v1.WithdrawInfo")
	proto.RegisterType((*EstimateWithdrawAmtRequest)(nil), "sgn.gateway.v1.EstimateWithdrawAmtRequest")
	proto.RegisterType((*EstimateWithdrawAmtResponse)(nil), "sgn.gateway.v1.EstimateWithdrawAmtResponse")
	proto.RegisterMapType((map[uint32]*EstimateWithdrawAmt)(nil), "sgn.gateway.v1.EstimateWithdrawAmtResponse.ReqAmtEntry")
	proto.RegisterType((*EstimateWithdrawAmt)(nil), "sgn.gateway.v1.EstimateWithdrawAmt")
	proto.RegisterType((*GetLPInfoListRequest)(nil), "sgn.gateway.v1.GetLPInfoListRequest")
	proto.RegisterType((*LPInfo)(nil), "sgn.gateway.v1.LPInfo")
	proto.RegisterType((*GetLPInfoListResponse)(nil), "sgn.gateway.v1.GetLPInfoListResponse")
	proto.RegisterType((*WithdrawLiquidityRequest)(nil), "sgn.gateway.v1.WithdrawLiquidityRequest")
	proto.RegisterType((*WithdrawLiquidityResponse)(nil), "sgn.gateway.v1.WithdrawLiquidityResponse")
	proto.RegisterType((*UnlockFarmingRewardRequest)(nil), "sgn.gateway.v1.UnlockFarmingRewardRequest")
	proto.RegisterType((*UnlockFarmingRewardResponse)(nil), "sgn.gateway.v1.UnlockFarmingRewardResponse")
	proto.RegisterType((*GetFarmingRewardDetailsRequest)(nil), "sgn.gateway.v1.GetFarmingRewardDetailsRequest")
	proto.RegisterType((*GetFarmingRewardDetailsResponse)(nil), "sgn.gateway.v1.GetFarmingRewardDetailsResponse")
	proto.RegisterType((*QueryLiquidityStatusRequest)(nil), "sgn.gateway.v1.QueryLiquidityStatusRequest")
	proto.RegisterType((*TransferHistory)(nil), "sgn.gateway.v1.TransferHistory")
	proto.RegisterType((*LPHistory)(nil), "sgn.gateway.v1.LPHistory")
	proto.RegisterType((*TransferHistoryRequest)(nil), "sgn.gateway.v1.TransferHistoryRequest")
	proto.RegisterType((*TransferHistoryResponse)(nil), "sgn.gateway.v1.TransferHistoryResponse")
	proto.RegisterType((*LPHistoryRequest)(nil), "sgn.gateway.v1.LPHistoryRequest")
	proto.RegisterType((*LPHistoryResponse)(nil), "sgn.gateway.v1.LPHistoryResponse")
	proto.RegisterType((*RewardingDataRequest)(nil), "sgn.gateway.v1.RewardingDataRequest")
	proto.RegisterType((*Reward)(nil), "sgn.gateway.v1.Reward")
	proto.RegisterType((*RewardingDataResponse)(nil), "sgn.gateway.v1.RewardingDataResponse")
	proto.RegisterMapType((map[string]float64)(nil), "sgn.gateway.v1.RewardingDataResponse.UsdPriceEntry")
	proto.RegisterType((*UpdateChainRequest)(nil), "sgn.gateway.v1.UpdateChainRequest")
	proto.RegisterType((*UpdateChainResponse)(nil), "sgn.gateway.v1.UpdateChainResponse")
	proto.RegisterType((*UpdateTokenRequest)(nil), "sgn.gateway.v1.UpdateTokenRequest")
	proto.RegisterType((*UpdateTokenResponse)(nil), "sgn.gateway.v1.UpdateTokenResponse")
	proto.RegisterType((*StakingConfigRequest)(nil), "sgn.gateway.v1.StakingConfigRequest")
	proto.RegisterType((*StakingConfigResponse)(nil), "sgn.gateway.v1.StakingConfigResponse")
	proto.RegisterType((*UnlockStakingRewardRequest)(nil), "sgn.gateway.v1.UnlockStakingRewardRequest")
	proto.RegisterType((*UnlockStakingRewardResponse)(nil), "sgn.gateway.v1.UnlockStakingRewardResponse")
	proto.RegisterType((*GetStakingRewardDetailsRequest)(nil), "sgn.gateway.v1.GetStakingRewardDetailsRequest")
	proto.RegisterType((*GetStakingRewardDetailsResponse)(nil), "sgn.gateway.v1.GetStakingRewardDetailsResponse")
	proto.RegisterType((*GetTotalLiquidityProviderTokenBalanceRequest)(nil), "sgn.gateway.v1.GetTotalLiquidityProviderTokenBalanceRequest")
	proto.RegisterType((*GetTotalLiquidityProviderTokenBalanceResponse)(nil), "sgn.gateway.v1.GetTotalLiquidityProviderTokenBalanceResponse")
	proto.RegisterMapType((map[uint64]string)(nil), "sgn.gateway.v1.GetTotalLiquidityProviderTokenBalanceResponse.TotalLiqEntry")
	proto.RegisterType((*GetAbnormalStatusInfoRequest)(nil), "sgn.gateway.v1.GetAbnormalStatusInfoRequest")
	proto.RegisterType((*GetAbnormalStatusInfoResponse)(nil), "sgn.gateway.v1.GetAbnormalStatusInfoResponse")
	proto.RegisterType((*AbnormalStatusInfo)(nil), "sgn.gateway.v1.AbnormalStatusInfo")
	proto.RegisterType((*GetInfoByTxHashRequest)(nil), "sgn.gateway.v1.GetInfoByTxHashRequest")
	proto.RegisterType((*GetInfoByTxHashResponse)(nil), "sgn.gateway.v1.GetInfoByTxHashResponse")
	proto.RegisterType((*FixEventMissRequest)(nil), "sgn.gateway.v1.FixEventMissRequest")
	proto.RegisterType((*FixEventMissResponse)(nil), "sgn.gateway.v1.FixEventMissResponse")
	proto.RegisterType((*GetAllConfigsRequest)(nil), "sgn.gateway.v1.GetAllConfigsRequest")
	proto.RegisterType((*ExtendedPair)(nil), "sgn.gateway.v1.ExtendedPair")
	proto.RegisterType((*GetAllConfigsResponse)(nil), "sgn.gateway.v1.GetAllConfigsResponse")
	proto.RegisterType((*GetCbrConfigsOnChainRequest)(nil), "sgn.gateway.v1.GetCbrConfigsOnChainRequest")
	proto.RegisterType((*ExtendedToken)(nil), "sgn.gateway.v1.ExtendedToken")
	proto.RegisterType((*GetCbrConfigsOnChainResponse)(nil), "sgn.gateway.v1.GetCbrConfigsOnChainResponse")
	proto.RegisterType((*RetentionRewardsEvent)(nil), "sgn.gateway.v1.RetentionRewardsEvent")
	proto.RegisterType((*RetentionRewardsEventLevelConfigWrapper)(nil), "sgn.gateway.v1.RetentionRewardsEventLevelConfigWrapper")
	proto.RegisterMapType((map[string]*RetentionRewardsLevelConfig)(nil), "sgn.gateway.v1.RetentionRewardsEventLevelConfigWrapper.LevelConfigEntry")
	proto.RegisterType((*RetentionRewardsLevelConfig)(nil), "sgn.gateway.v1.RetentionRewardsLevelConfig")
	proto.RegisterType((*GetRetentionRewardsInfoRequest)(nil), "sgn.gateway.v1.GetRetentionRewardsInfoRequest")
	proto.RegisterType((*GetRetentionRewardsInfoResponse)(nil), "sgn.gateway.v1.GetRetentionRewardsInfoResponse")
	proto.RegisterType((*ClaimRetentionRewardsRequest)(nil), "sgn.gateway.v1.ClaimRetentionRewardsRequest")
	proto.RegisterType((*ClaimRetentionRewardsResponse)(nil), "sgn.gateway.v1.ClaimRetentionRewardsResponse")
	proto.RegisterType((*GetIncentiveCampaignCelrRankRequest)(nil), "sgn.gateway.v1.GetIncentiveCampaignCelrRankRequest")
	proto.RegisterType((*GetIncentiveCampaignCelrRankResponse)(nil), "sgn.gateway.v1.GetIncentiveCampaignCelrRankResponse")
	proto.RegisterType((*GetIncentiveCampaignBnbRankRequest)(nil), "sgn.gateway.v1.GetIncentiveCampaignBnbRankRequest")
	proto.RegisterType((*GetIncentiveCampaignBnbRankResponse)(nil), "sgn.gateway.v1.GetIncentiveCampaignBnbRankResponse")
	proto.RegisterType((*InIncentiveCampaignBnbWhiteListRequest)(nil), "sgn.gateway.v1.InIncentiveCampaignBnbWhiteListRequest")
	proto.RegisterType((*InIncentiveCampaignBnbWhiteListResponse)(nil), "sgn.gateway.v1.InIncentiveCampaignBnbWhiteListResponse")
	proto.RegisterType((*IncentiveCampaignRank)(nil), "sgn.gateway.v1.IncentiveCampaignRank")
	proto.RegisterType((*FeeRebateEvent)(nil), "sgn.gateway.v1.FeeRebateEvent")
	proto.RegisterType((*FeeRebateEventLevelConfigWrapper)(nil), "sgn.gateway.v1.FeeRebateEventLevelConfigWrapper")
	proto.RegisterMapType((map[string]*FeeRebateLevelConfig)(nil), "sgn.gateway.v1.FeeRebateEventLevelConfigWrapper.LevelConfigEntry")
	proto.RegisterType((*FeeRebateLevelConfig)(nil), "sgn.gateway.v1.FeeRebateLevelConfig")
	proto.RegisterType((*GetFeeRebateInfoRequest)(nil), "sgn.gateway.v1.GetFeeRebateInfoRequest")
	proto.RegisterType((*GetFeeRebateInfoResponse)(nil), "sgn.gateway.v1.GetFeeRebateInfoResponse")
	proto.RegisterType((*ClaimFeeRebateRequest)(nil), "sgn.gateway.v1.ClaimFeeRebateRequest")
	proto.RegisterType((*ClaimFeeRebateResponse)(nil), "sgn.gateway.v1.ClaimFeeRebateResponse")
	proto.RegisterType((*BscCampaignEventConfig)(nil), "sgn.gateway.v1.BscCampaignEventConfig")
	proto.RegisterType((*BscCampaignTransferWhiteListWrapper)(nil), "sgn.gateway.v1.BscCampaignTransferWhiteListWrapper")
	proto.RegisterMapType((map[string]*BscCampaignTransferWhiteList)(nil), "sgn.gateway.v1.BscCampaignTransferWhiteListWrapper.TransferWhiteListEntry")
	proto.RegisterType((*BscCampaignTransferWhiteList)(nil), "sgn.gateway.v1.BscCampaignTransferWhiteList")
	proto.RegisterType((*GetBscCampaignInfoRequest)(nil), "sgn.gateway.v1.GetBscCampaignInfoRequest")
	proto.RegisterType((*BscCampaignInfo)(nil), "sgn.gateway.v1.BscCampaignInfo")
	proto.RegisterType((*GetBscCampaignInfoResponse)(nil), "sgn.gateway.v1.GetBscCampaignInfoResponse")
	proto.RegisterType((*ClaimGetBscCampaignRewardRequest)(nil), "sgn.gateway.v1.ClaimGetBscCampaignRewardRequest")
	proto.RegisterType((*ClaimGetBscCampaignRewardResponse)(nil), "sgn.gateway.v1.ClaimGetBscCampaignRewardResponse")
	proto.RegisterType((*GetCurrentBlockNumberByNodeRequest)(nil), "sgn.gateway.v1.GetCurrentBlockNumberByNodeRequest")
	proto.RegisterType((*GetCurrentBlockNumberByNodeResponse)(nil), "sgn.gateway.v1.GetCurrentBlockNumberByNodeResponse")
	proto.RegisterMapType((map[string]*relayer.SgnAnalyticsReport)(nil), "sgn.gateway.v1.GetCurrentBlockNumberByNodeResponse.ReportsEntry")
	proto.RegisterType((*ErrMsg)(nil), "sgn.gateway.v1.ErrMsg")
}

func init() { proto.RegisterFile("gateway/gateway.proto", fileDescriptor_285396c8df15061f) }

var fileDescriptor_285396c8df15061f = []byte{
	// 6872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x3d, 0x5b, 0x6c, 0x23, 0xc9,
	0x71, 0x37, 0x24, 0x45, 0x89, 0x25, 0x4a, 0xa2, 0x5a, 0x8f, 0x95, 0xa8, 0x7d, 0x68, 0x67, 0x9f,
	0xa7, 0xdd, 0x95, 0x6e, 0x75, 0xe7, 0x7b, 0x1b, 0x3e, 0x8a, 0xa2, 0x76, 0x79, 0x27, 0x91, 0xba,
	0x21, 0x75, 0xeb, 0x73, 0x62, 0x4f, 0x46, 0x64, 0x2f, 0x35, 0xd8, 0xe1, 0x0c, 0x77, 0x66, 0xa8,
	0xc7, 0x05, 0x88, 0x0d, 0x3b, 0x3f, 0xb1, 0x9d, 0xc4, 0xb1, 0x93, 0x38, 0x70, 0x82, 0xe4, 0x23,
	0x01, 0x02, 0xc4, 0x88, 0xfd, 0x91, 0x20, 0xfe, 0x49, 0xe2, 0x7c, 0x04, 0x88, 0x1d, 0x04, 0x86,
	0x01, 0x7f, 0x24, 0x40, 0x10, 0xc3, 0xf1, 0x05, 0x01, 0x12, 0xe7, 0x2b, 0xf0, 0x4f, 0xfe, 0x82,
	0x7e, 0x91, 0xf3, 0xe2, 0x6b, 0xbd, 0xe7, 0x18, 0xf9, 0x12, 0x59, 0x55, 0xdd, 0x55, 0x5d, 0x5d,
	0x5d, 0x5d, 0x5d, 0x5d, 0x4d, 0xc1, 0x42, 0x43, 0x73, 0xf1, 0x89, 0x76, 0xb6, 0xc1, 0xff, 0xae,
	0xb7, 0x6c, 0xcb, 0xb5, 0xd0, 0xb4, 0xd3, 0x30, 0xd7, 0x05, 0xe8, 0xf8, 0x6e, 0x76, 0xbe, 0x61,
	0x35, 0x2c, 0x8a, 0xda, 0x20, 0x9f, 0x18, 0x55, 0xf6, 0x7c, 0xc3, 0xb2, 0x1a, 0x06, 0xde, 0xd0,
	0x5a, 0xfa, 0x86, 0x66, 0x9a, 0x96, 0xab, 0xb9, 0xba, 0x65, 0x3a, 0x1c, 0x9b, 0x75, 0x1a, 0xe6,
	0x46, 0xed, 0xd0, 0xd6, 0xeb, 0x0d, 0xbc, 0x71, 0x7c, 0x77, 0xe3, 0x71, 0x1b, 0xdb, 0x67, 0xa2,
	0x65, 0x00, 0xc7, 0x3f, 0xfa, 0x5a, 0x5a, 0xcd, 0xa6, 0x65, 0x52, 0x24, 0xfd, 0xe4, 0x6d, 0xf9,
	0x50, 0xb3, 0x9b, 0xba, 0xd9, 0x20, 0x48, 0xfe, 0x91, 0x63, 0xaf, 0x13, 0x6c, 0x5d, 0x77, 0x5c,
	0x5b, 0x3f, 0x6c, 0x13, 0x61, 0x08, 0x89, 0xf7, 0x3b, 0xa7, 0x5b, 0x25, 0x74, 0x2d, 0xdc, 0xe8,
	0x4a, 0xd0, 0xf9, 0xe2, 0x95, 0xa1, 0x89, 0x1d, 0x47, 0x0b, 0x4b, 0xbf, 0x1c, 0x6a, 0xed, 0x9e,
	0x72, 0xd4, 0xc5, 0x9a, 0xe5, 0x34, 0x2d, 0x67, 0xe3, 0x50, 0x73, 0x08, 0xe2, 0x10, 0xbb, 0x1a,
	0x19, 0x80, 0x6e, 0x7a, 0xbb, 0x3d, 0xc2, 0x9a, 0xe1, 0x1e, 0x91, 0x76, 0xec, 0x13, 0xc3, 0xc9,
	0x77, 0x60, 0xbe, 0x68, 0xea, 0xee, 0x3e, 0x6e, 0x28, 0xf8, 0x61, 0xdb, 0xac, 0x2b, 0xf8, 0x71,
	0x1b, 0x3b, 0x2e, 0x5a, 0x80, 0xa4, 0x8d, 0x1f, 0xaa, 0x7a, 0x7d, 0x49, 0x5a, 0x95, 0x6e, 0xa6,
	0x95, 0x31, 0x1b, 0x3f, 0x2c, 0xd6, 0xe5, 0x1c, 0x2c, 0x04, 0xc8, 0x9d, 0x96, 0x65, 0x3a, 0x18,
	0xdd, 0x84, 0x38, 0xb6, 0x6d, 0x4a, 0x3c, 0xb9, 0xb9, 0xb8, 0xee, 0x9f, 0xca, 0xf5, 0x82, 0x6d,
	0xef, 0x39, 0x0d, 0x85, 0x90, 0xc8, 0x6f, 0xc2, 0x1c, 0xe9, 0xe2, 0x81, 0xee, 0x1e, 0xd5, 0x6d,
	0xed, 0x44, 0x30, 0xbc, 0x0c, 0xe9, 0x13, 0x0e, 0x52, 0x6d, 0xfc, 0x98, 0xb3, 0x9d, 0x3c, 0xe9,
	0x92, 0xa1, 0x0c, 0xc4, 0x1d, 0xbd, 0xb1, 0x14, 0xa3, 0x18, 0xf2, 0x51, 0x7e, 0x83, 0x49, 0xdf,
	0xed, 0x6b, 0x64, 0x69, 0x7e, 0x4f, 0x82, 0xf9, 0x7b, 0xd8, 0x3d, 0x70, 0xec, 0x2d, 0xcd, 0xd0,
	0xcc, 0x1a, 0x16, 0xf2, 0x70, 0x66, 0x52, 0x87, 0x19, 0x5a, 0x86, 0x09, 0x47, 0x6f, 0xa8, 0x5a,
	0xbd, 0x6e, 0x53, 0x19, 0x52, 0xca, 0xb8, 0xa3, 0x37, 0x72, 0xf5, 0xba, 0x4d, 0x50, 0x6d, 0xc7,
	0x66, 0xa8, 0x38, 0x43, 0xb5, 0x1d, 0x5b, 0xa0, 0x6a, 0x47, 0x9a, 0x6e, 0x12, 0x55, 0x26, 0x56,
	0xa5, 0x9b, 0x53, 0xca, 0x38, 0xfd, 0x5e, 0xac, 0x93, 0x21, 0xbb, 0xd6, 0x23, 0x6c, 0xaa, 0xce,
	0x59, 0xf3, 0xd0, 0x32, 0x96, 0xc6, 0x68, 0xcb, 0x49, 0x0a, 0xab, 0x50, 0x90, 0x7c, 0x17, 0x16,
	0x02, 0xd2, 0xf1, 0x11, 0x2e, 0xc1, 0xf8, 0x21, 0x03, 0x51, 0x11, 0x53, 0x8a, 0xf8, 0x2a, 0xbf,
	0x05, 0x4b, 0x79, 0x43, 0xd3, 0x9b, 0xfb, 0xb8, 0xb1, 0x45, 0x6d, 0x65, 0x07, 0x77, 0x06, 0xb5,
	0x01, 0xf1, 0xa6, 0xd3, 0xe0, 0x7a, 0xb9, 0x40, 0xf5, 0xd2, 0xb5, 0xc1, 0xe3, 0xbb, 0xeb, 0x7b,
	0x4e, 0x83, 0xb6, 0x25, 0x4d, 0x08, 0xa5, 0xfc, 0x29, 0x09, 0x96, 0x23, 0x7a, 0x1b, 0x55, 0xcd,
	0xe8, 0x15, 0x48, 0xd8, 0xd8, 0x69, 0x51, 0xbd, 0x4d, 0x6e, 0x5e, 0xeb, 0xcf, 0x99, 0x77, 0xaf,
	0xd0, 0x26, 0xb2, 0x01, 0x4b, 0xf7, 0xb0, 0x9b, 0xd7, 0x9a, 0x2d, 0x4d, 0x6f, 0x98, 0x95, 0x9a,
	0x65, 0x63, 0x47, 0x8c, 0x07, 0x41, 0xa2, 0xae, 0xb9, 0x4c, 0x05, 0x53, 0x0a, 0xfd, 0x8c, 0x2e,
	0xc1, 0xe4, 0x21, 0x6e, 0xe8, 0xa6, 0x7a, 0x68, 0x58, 0xb5, 0x47, 0x94, 0x63, 0x42, 0x01, 0x0a,
	0xda, 0x22, 0x10, 0xb4, 0x02, 0x29, 0x6c, 0xd6, 0x39, 0x3a, 0x4e, 0xd1, 0x13, 0xd8, 0xac, 0x53,
	0xa4, 0xfc, 0x45, 0x09, 0x96, 0x23, 0xd8, 0xf1, 0x01, 0x7f, 0x08, 0x92, 0x0e, 0x85, 0x2c, 0x49,
	0xab, 0xf1, 0x8e, 0x0a, 0x3d, 0x63, 0xf6, 0xb5, 0x53, 0x38, 0xb1, 0xd0, 0x53, 0x6c, 0xb0, 0x9e,
	0xe6, 0x61, 0x8c, 0x4a, 0xca, 0xe5, 0x62, 0x5f, 0xe4, 0x37, 0x60, 0xca, 0xd7, 0xb1, 0xcf, 0xde,
	0x24, 0xbf, 0xbd, 0xcd, 0xc3, 0x18, 0xe5, 0xca, 0x07, 0xce, 0xbe, 0xc8, 0xdf, 0x88, 0xc1, 0xf9,
	0xb7, 0x89, 0x37, 0xd9, 0xd5, 0x1f, 0xb7, 0xf5, 0xba, 0xee, 0x9e, 0x55, 0x5c, 0xcd, 0x6d, 0x3b,
	0x4f, 0x30, 0x95, 0x2f, 0x42, 0xd2, 0xa1, 0x6d, 0x29, 0x87, 0xe9, 0xcd, 0x8b, 0x94, 0xb8, 0xd6,
	0x9d, 0x4a, 0xb1, 0x1a, 0x39, 0x07, 0x4e, 0x8d, 0x2e, 0x00, 0x9c, 0xd4, 0x55, 0xcb, 0xa4, 0xd6,
	0x4f, 0xc7, 0x97, 0x56, 0x52, 0x27, 0xf5, 0x32, 0x03, 0x90, 0x69, 0x73, 0x2c, 0xdb, 0xc5, 0x75,
	0xd5, 0xd1, 0x1b, 0xce, 0x52, 0x62, 0x35, 0x7e, 0x33, 0xad, 0x00, 0x03, 0x55, 0xf4, 0x86, 0x43,
	0x2c, 0xde, 0xd1, 0x1b, 0x26, 0xb6, 0x9d, 0xa5, 0x31, 0x8a, 0x14, 0x5f, 0xd1, 0x22, 0x24, 0x5b,
	0xd6, 0x09, 0x41, 0x24, 0x29, 0x82, 0x7f, 0x43, 0x32, 0x4c, 0xd1, 0x49, 0x56, 0xdd, 0x53, 0xd5,
	0xd0, 0xcd, 0x47, 0x4b, 0xe3, 0x6c, 0x81, 0x51, 0x60, 0xf5, 0x74, 0x57, 0x37, 0x1f, 0x51, 0x6b,
	0xa1, 0x34, 0x75, 0x6c, 0x68, 0x67, 0x4b, 0x13, 0xd4, 0x90, 0x80, 0x82, 0xb6, 0x09, 0x44, 0xfe,
	0x7c, 0x1c, 0xc6, 0xf2, 0x54, 0xc2, 0x69, 0x88, 0x71, 0x77, 0x38, 0xa5, 0xc4, 0xf4, 0x3a, 0x31,
	0x3e, 0x53, 0x6b, 0x62, 0xee, 0x0b, 0xe8, 0x67, 0x02, 0xd3, 0x6b, 0x96, 0xc9, 0x9d, 0x00, 0xfd,
	0x1c, 0x64, 0x91, 0x08, 0xb2, 0x40, 0x37, 0x21, 0xd3, 0xd0, 0x1c, 0x35, 0xc2, 0x17, 0x4c, 0x37,
	0x34, 0xa7, 0xda, 0x75, 0x07, 0xa4, 0x2b, 0x7c, 0xda, 0x32, 0x2c, 0x1b, 0xab, 0x6d, 0xdb, 0x58,
	0x4a, 0x52, 0x22, 0xe0, 0xa0, 0x03, 0xdb, 0x40, 0x57, 0x60, 0xaa, 0x66, 0x99, 0xae, 0xad, 0xd5,
	0x5c, 0x66, 0x1d, 0x13, 0x94, 0x24, 0x2d, 0x80, 0xd4, 0x44, 0x56, 0x21, 0x5d, 0xb7, 0xad, 0x96,
	0x4a, 0x98, 0x6a, 0x4d, 0x77, 0x29, 0xc5, 0xba, 0x21, 0xb0, 0x7b, 0x9a, 0x93, 0x6b, 0xba, 0xe8,
	0x59, 0x98, 0xed, 0x50, 0xd4, 0x2c, 0xc7, 0xa5, 0x64, 0x93, 0x4c, 0x24, 0x4e, 0x96, 0xb7, 0x1c,
	0x97, 0x90, 0x3e, 0x0f, 0x8b, 0x1d, 0x52, 0xee, 0x82, 0x54, 0xcd, 0xc0, 0xb6, 0xbb, 0x94, 0xa6,
	0xf4, 0x73, 0x9c, 0x9e, 0x3b, 0xb0, 0x1c, 0x41, 0xa1, 0xdb, 0x80, 0x9c, 0x76, 0xa3, 0x81, 0x1d,
	0x32, 0xdf, 0x82, 0xc9, 0xd2, 0x14, 0xb5, 0xd8, 0x4c, 0x07, 0xc3, 0xb9, 0xbc, 0x99, 0x98, 0x18,
	0xcf, 0x4c, 0xbc, 0x99, 0x98, 0x80, 0xcc, 0xa4, 0x9c, 0x83, 0x69, 0x3a, 0x1b, 0x54, 0x2b, 0x45,
	0xf3, 0xa1, 0x85, 0x36, 0x60, 0x8c, 0x6a, 0x8e, 0x2f, 0xc9, 0xe5, 0xa0, 0xed, 0x76, 0x28, 0x15,
	0x46, 0x27, 0xff, 0x02, 0xa4, 0xba, 0xad, 0x6f, 0x75, 0x5b, 0x13, 0xcb, 0x5f, 0x08, 0x1a, 0x33,
	0xa5, 0xe4, 0x2d, 0x87, 0x9d, 0x71, 0xe2, 0x35, 0xd3, 0x55, 0x5b, 0x33, 0x9d, 0x87, 0xd8, 0x16,
	0x5c, 0x98, 0xd9, 0x7b, 0xb9, 0x78, 0xdd, 0x06, 0x41, 0x2a, 0x8c, 0xa6, 0x2b, 0x52, 0x6c, 0x08,
	0x91, 0x16, 0x21, 0xa9, 0x35, 0xad, 0xb6, 0xe9, 0x72, 0x01, 0xf8, 0x37, 0xf9, 0x35, 0xea, 0x35,
	0x85, 0x10, 0x62, 0xb1, 0x33, 0xaf, 0x79, 0x09, 0x26, 0x5d, 0x8e, 0x10, 0x1b, 0x7c, 0x4a, 0x01,
	0x01, 0x2a, 0xd6, 0xe5, 0xaf, 0xc5, 0xa9, 0x13, 0x0c, 0xb6, 0x1e, 0xd9, 0x55, 0x7c, 0x38, 0xe0,
	0x2a, 0xae, 0x85, 0x86, 0xc2, 0x39, 0xdc, 0xd7, 0x1d, 0xd7, 0xb2, 0xcf, 0xfe, 0xcf, 0x3d, 0xc6,
	0x47, 0x60, 0xca, 0xa6, 0x71, 0x8d, 0x6a, 0x63, 0xcd, 0xb1, 0x4c, 0xea, 0x31, 0xa6, 0x37, 0xb3,
	0x41, 0xb9, 0x3f, 0xda, 0xd5, 0x4a, 0xda, 0xe6, 0x81, 0x10, 0xa1, 0x1f, 0xe8, 0x4e, 0xc8, 0xca,
	0x72, 0xec, 0x9a, 0xea, 0xf7, 0x4b, 0x6c, 0x01, 0x4e, 0x3b, 0x76, 0x6d, 0xcb, 0xe3, 0x9a, 0xc8,
	0x22, 0x74, 0xdc, 0x00, 0x29, 0xf0, 0x45, 0xe8, 0xb8, 0x1e, 0x52, 0x79, 0xc5, 0x37, 0x5f, 0x79,
	0xcb, 0x7c, 0xa8, 0x37, 0xc4, 0x74, 0xcb, 0x7f, 0x1b, 0x87, 0x6c, 0x14, 0x76, 0xe4, 0xe9, 0xbc,
	0x03, 0x49, 0xaa, 0x79, 0x32, 0x9d, 0xf1, 0xde, 0x66, 0xcc, 0x89, 0xd0, 0xcf, 0xc1, 0x24, 0x8b,
	0x7c, 0x98, 0x35, 0xc7, 0x69, 0x9b, 0x57, 0x83, 0x6d, 0x7a, 0x4b, 0xb6, 0xde, 0x5d, 0xe8, 0x05,
	0xd3, 0xb5, 0xcf, 0x14, 0xa8, 0x75, 0x00, 0xe8, 0x23, 0x70, 0x9e, 0x47, 0xe1, 0xaa, 0x8d, 0x4f,
	0x34, 0xbb, 0xae, 0xfa, 0xfd, 0x5e, 0x82, 0xea, 0x69, 0x99, 0xd3, 0x28, 0x94, 0x24, 0xef, 0x75,
	0x82, 0xfb, 0x30, 0xd7, 0xc2, 0x8d, 0x06, 0xae, 0xab, 0x2d, 0x4d, 0xb7, 0x49, 0x6b, 0xc2, 0x9b,
	0x1a, 0xca, 0xe4, 0xe6, 0x6a, 0x50, 0xca, 0x7d, 0x4a, 0xba, 0xaf, 0xe9, 0x5c, 0x48, 0x65, 0xb6,
	0x15, 0x80, 0x38, 0xd9, 0x8f, 0xc3, 0x4c, 0x40, 0x62, 0x12, 0x44, 0x3e, 0xc2, 0x67, 0x7c, 0xcf,
	0x20, 0x1f, 0xd1, 0x0b, 0x30, 0x76, 0xac, 0x19, 0x6d, 0xcc, 0x17, 0xf7, 0xc5, 0x48, 0x15, 0x7a,
	0x5c, 0x16, 0x25, 0x7e, 0x35, 0xf6, 0xb2, 0x24, 0xff, 0x46, 0x1c, 0x32, 0x41, 0x31, 0x88, 0x2b,
	0xb7, 0xec, 0x86, 0xda, 0x89, 0x30, 0x19, 0x27, 0xb0, 0xec, 0x46, 0x9e, 0x07, 0x99, 0x2f, 0x42,
	0x8a, 0x50, 0x78, 0x3d, 0x4a, 0x1f, 0x17, 0x39, 0x61, 0xd9, 0x0d, 0xa6, 0xe0, 0xeb, 0x30, 0xc3,
	0xf5, 0xd3, 0xe9, 0x3c, 0x4e, 0x3b, 0x9f, 0x62, 0x60, 0xd1, 0xff, 0xeb, 0x90, 0xe6, 0x74, 0x8c,
	0x45, 0x62, 0x10, 0x8b, 0x49, 0x46, 0xde, 0x99, 0x46, 0xde, 0xba, 0x8e, 0x5b, 0x96, 0xa3, 0xbb,
	0x81, 0x69, 0x64, 0xdb, 0xe0, 0x32, 0xa3, 0xd9, 0x66, 0x24, 0xbe, 0x69, 0x7c, 0x05, 0x38, 0x52,
	0x3d, 0x6c, 0xdb, 0x66, 0xa0, 0x35, 0xdb, 0x1f, 0x17, 0x19, 0xc1, 0x56, 0xdb, 0x36, 0x7d, 0x4d,
	0x73, 0x70, 0xa1, 0xa6, 0x99, 0x96, 0xa9, 0xd7, 0x34, 0x83, 0x6f, 0xbe, 0xfe, 0xe6, 0x2c, 0x5c,
	0xc8, 0x76, 0x88, 0xa8, 0xc8, 0xde, 0x2e, 0xe4, 0x0a, 0xcc, 0x11, 0xfb, 0xed, 0x8c, 0x8d, 0x3b,
	0x58, 0x6f, 0xcc, 0x2f, 0xf5, 0x8f, 0xf9, 0x63, 0xe1, 0x98, 0xff, 0x3d, 0x7a, 0x22, 0xf1, 0x74,
	0x3a, 0xf2, 0x42, 0x7d, 0x19, 0x80, 0x31, 0xd1, 0xcd, 0x87, 0xd6, 0xe0, 0x49, 0x4f, 0xb9, 0xe2,
	0xa3, 0xfc, 0x63, 0x09, 0x50, 0xc1, 0x71, 0xf5, 0xa6, 0xe6, 0xe2, 0x5c, 0xd3, 0x15, 0x03, 0x5a,
	0x85, 0x34, 0xf1, 0x5a, 0x41, 0x33, 0x73, 0xec, 0x9a, 0x30, 0x03, 0x12, 0x53, 0x38, 0x6e, 0x97,
	0x22, 0xc6, 0x28, 0xea, 0x8e, 0x9b, 0xef, 0x31, 0xf2, 0x78, 0x68, 0xe4, 0x64, 0xb9, 0x90, 0x40,
	0x83, 0xad, 0x5d, 0xf2, 0xd1, 0x17, 0xe8, 0x8e, 0xf9, 0x03, 0xdd, 0x3b, 0x80, 0x1c, 0x43, 0x6f,
	0xb5, 0xb4, 0x06, 0x56, 0x5d, 0xcb, 0xc0, 0x36, 0x3d, 0x0c, 0x25, 0x29, 0xdf, 0x59, 0x81, 0xa9,
	0x0a, 0x04, 0x89, 0xfa, 0x75, 0x47, 0x65, 0xa6, 0x40, 0x67, 0x76, 0x42, 0x99, 0xd0, 0x1d, 0xb6,
	0xa0, 0xe4, 0x6f, 0xc7, 0x60, 0xce, 0x37, 0xec, 0x91, 0x55, 0x7e, 0x0b, 0x10, 0x7e, 0xac, 0xd2,
	0xd5, 0xca, 0x6d, 0x89, 0x8c, 0x84, 0xcd, 0xee, 0x0c, 0x7e, 0xfc, 0x0e, 0x41, 0x50, 0x8d, 0x93,
	0x98, 0x89, 0xec, 0x12, 0x74, 0x2f, 0x51, 0x6d, 0x72, 0x7a, 0x21, 0x9a, 0x88, 0x29, 0xc0, 0x40,
	0x0a, 0x39, 0xc3, 0x2c, 0xc3, 0x44, 0x0b, 0xdb, 0x35, 0xf5, 0x21, 0xc6, 0x5c, 0x1b, 0xe3, 0xe4,
	0xfb, 0x0e, 0xa6, 0x28, 0x72, 0xce, 0xa7, 0xa8, 0x71, 0x71, 0xf2, 0x73, 0xc8, 0xb1, 0xac, 0x87,
	0x46, 0xc6, 0x7a, 0x69, 0xe4, 0x32, 0xa4, 0x9b, 0xda, 0xa9, 0x2a, 0x10, 0x5c, 0x75, 0x93, 0x4d,
	0xed, 0xb4, 0xc2, 0x41, 0x68, 0x13, 0x16, 0x30, 0x57, 0x0b, 0xd9, 0x12, 0x6b, 0x58, 0x3f, 0xc6,
	0x74, 0x60, 0x2c, 0xac, 0x9c, 0xeb, 0x20, 0x15, 0x86, 0xcb, 0x35, 0x5d, 0xb9, 0x05, 0x69, 0x71,
	0x02, 0xa0, 0xb1, 0x4f, 0x9f, 0xc5, 0xd0, 0x0d, 0x5e, 0x62, 0xde, 0xe0, 0xa5, 0xc7, 0x40, 0xe2,
	0x3d, 0x06, 0x22, 0x7f, 0x53, 0x82, 0xac, 0x98, 0x3d, 0xc1, 0xda, 0x63, 0xbc, 0x39, 0x98, 0x22,
	0xc6, 0x2b, 0x32, 0x09, 0xe2, 0xec, 0x76, 0x3e, 0x38, 0x9d, 0x5e, 0xa9, 0x15, 0x62, 0xef, 0x02,
	0xe0, 0x3c, 0x1d, 0xeb, 0xf6, 0xda, 0x72, 0xc2, 0x67, 0xcb, 0xf2, 0xff, 0x48, 0xb0, 0x12, 0x39,
	0x82, 0x91, 0xed, 0x70, 0x1f, 0xc6, 0x6d, 0xfc, 0x98, 0x1b, 0x1f, 0x19, 0xe6, 0x4b, 0x21, 0xea,
	0xde, 0x7c, 0xd6, 0x15, 0xfc, 0x38, 0xd7, 0x74, 0xd9, 0x6e, 0x9b, 0xb4, 0xe9, 0x97, 0xec, 0x27,
	0x60, 0xd2, 0x03, 0x8e, 0xd8, 0xd2, 0x5e, 0xf1, 0x6f, 0x69, 0x57, 0x86, 0x61, 0xe8, 0xd9, 0xd7,
	0x7e, 0x24, 0x75, 0xd7, 0x9e, 0x87, 0xa4, 0xc7, 0x8a, 0x92, 0x86, 0x5a, 0x51, 0xb1, 0xbe, 0x2b,
	0x2a, 0xde, 0x7b, 0x45, 0x25, 0x3e, 0xe0, 0x15, 0x25, 0xaf, 0x51, 0xe7, 0xbe, 0xbb, 0x4f, 0x8c,
	0x6c, 0x57, 0x77, 0x5c, 0x4f, 0x26, 0xc3, 0x73, 0x9a, 0xa7, 0x9f, 0xe5, 0xef, 0x24, 0x20, 0xc9,
	0x28, 0x47, 0x3b, 0x40, 0x6c, 0xf8, 0x0f, 0x10, 0x03, 0x4f, 0x44, 0xe8, 0x3c, 0xa4, 0x0c, 0x91,
	0x17, 0xa0, 0xda, 0x91, 0x94, 0x2e, 0x80, 0x9c, 0x29, 0x3b, 0x5f, 0xd4, 0xae, 0x7f, 0x4e, 0x77,
	0x80, 0x64, 0x02, 0x9e, 0x83, 0xf9, 0x23, 0xcd, 0x51, 0x45, 0x4c, 0xe6, 0x60, 0xc7, 0xd1, 0x2d,
	0xd3, 0xa1, 0xba, 0x9a, 0x50, 0xd0, 0x91, 0xe6, 0xec, 0x30, 0x54, 0x85, 0x63, 0xd0, 0x55, 0x98,
	0x36, 0x5a, 0x44, 0xe9, 0x2a, 0xd6, 0x6c, 0x53, 0x37, 0x1b, 0x54, 0x5d, 0x92, 0x92, 0x36, 0x5a,
	0x3b, 0x18, 0x17, 0x18, 0x0c, 0xbd, 0x00, 0x8b, 0x81, 0x38, 0x4f, 0x50, 0x8f, 0x53, 0xea, 0x79,
	0x5f, 0x84, 0x27, 0x5a, 0x5d, 0x00, 0x38, 0xb6, 0x8c, 0x76, 0x13, 0xab, 0x9b, 0x2f, 0x1c, 0x51,
	0x67, 0x25, 0x29, 0x29, 0x06, 0xd9, 0x7c, 0xe1, 0x08, 0xdd, 0x80, 0x19, 0xd7, 0x72, 0x35, 0x43,
	0xed, 0x8e, 0x3a, 0x45, 0x69, 0xa6, 0x29, 0xb8, 0x93, 0x23, 0x41, 0xeb, 0x30, 0x17, 0x20, 0xa4,
	0x0a, 0x60, 0x41, 0xf8, 0xac, 0x9f, 0x98, 0xdb, 0xac, 0x7f, 0x4c, 0xaa, 0xd6, 0x3a, 0xa3, 0x07,
	0x67, 0x49, 0x99, 0xf1, 0x8e, 0x2b, 0xd7, 0x3a, 0x23, 0x36, 0x2b, 0x86, 0x46, 0xa8, 0xd2, 0x94,
	0x0a, 0x38, 0x88, 0x10, 0x94, 0xbb, 0x63, 0xe7, 0xfa, 0x64, 0x0b, 0xc1, 0x59, 0x9a, 0x1a, 0x74,
	0xd4, 0x15, 0x6a, 0xe1, 0xda, 0xa6, 0x08, 0x47, 0xb6, 0x69, 0x36, 0xd1, 0x6b, 0x7c, 0x23, 0xfb,
	0x97, 0x0d, 0x18, 0x37, 0x5a, 0x22, 0xae, 0x88, 0x47, 0x51, 0xb3, 0xee, 0x95, 0xa4, 0xd1, 0xa2,
	0x11, 0xc5, 0xdf, 0x4b, 0xb0, 0x24, 0x96, 0x75, 0x47, 0x57, 0x3f, 0x49, 0xd2, 0x97, 0x98, 0x44,
	0x68, 0x53, 0xaa, 0xd3, 0x79, 0x61, 0x0b, 0x7b, 0x3e, 0xb8, 0x2b, 0xd5, 0xc9, 0xd4, 0xe4, 0x61,
	0xb2, 0x89, 0xdd, 0x23, 0xab, 0xae, 0xba, 0x67, 0x2d, 0xb6, 0xd0, 0xa7, 0x37, 0xe5, 0x5e, 0x7b,
	0xc0, 0x1e, 0x25, 0xad, 0x9e, 0xb5, 0xb0, 0x02, 0xcd, 0xce, 0x67, 0xf9, 0x13, 0xb0, 0x1c, 0x31,
	0x96, 0x91, 0x95, 0x78, 0x0e, 0xc6, 0x1d, 0xfc, 0x58, 0x35, 0xdb, 0x4d, 0x9e, 0xa5, 0x4b, 0x3a,
	0xf8, 0x71, 0xa9, 0xdd, 0x94, 0x9f, 0x83, 0xec, 0x81, 0x49, 0xce, 0x75, 0x3b, 0x5e, 0xab, 0xee,
	0xe7, 0x23, 0xee, 0xc1, 0x4a, 0x64, 0x8b, 0x91, 0x13, 0xe1, 0x2f, 0xc0, 0xc5, 0x7b, 0xd8, 0xf5,
	0xf5, 0xb2, 0x8d, 0x5d, 0x4d, 0x37, 0x9c, 0x7e, 0xec, 0x7f, 0x45, 0x82, 0x4b, 0x3d, 0x9b, 0x8d,
	0xac, 0x97, 0xd7, 0x61, 0xbc, 0xce, 0x1a, 0x73, 0xe3, 0x62, 0xf3, 0x23, 0xae, 0x5b, 0x8e, 0xef,
	0xae, 0xf3, 0x83, 0x9c, 0xa1, 0xe9, 0x4d, 0xc1, 0x46, 0x34, 0x91, 0xbf, 0x2e, 0xc1, 0x4a, 0x74,
	0x8e, 0x93, 0xc9, 0xef, 0xd1, 0xba, 0xe4, 0xd5, 0x3a, 0x41, 0xb8, 0xa7, 0xea, 0x91, 0xe6, 0x1c,
	0x89, 0x38, 0xc4, 0x3d, 0xbd, 0xaf, 0x39, 0x47, 0x04, 0x61, 0xb4, 0xbc, 0x59, 0xfd, 0xa4, 0xd1,
	0x1a, 0x94, 0xd4, 0x5f, 0x83, 0x04, 0x35, 0xb0, 0x31, 0x6a, 0x60, 0x11, 0xab, 0x83, 0x1a, 0x15,
	0xa5, 0x91, 0xff, 0x28, 0x0e, 0x33, 0x81, 0x14, 0xc8, 0xc0, 0xe4, 0x0c, 0x7a, 0x83, 0x85, 0x33,
	0x0e, 0x36, 0xeb, 0xde, 0xf8, 0x3e, 0x14, 0xce, 0x78, 0x13, 0x50, 0xca, 0xa4, 0x63, 0xd7, 0x2a,
	0xd8, 0xac, 0xd3, 0xcd, 0xe4, 0x3e, 0x4b, 0x2c, 0x74, 0x96, 0x0e, 0xed, 0x25, 0x3e, 0x44, 0x2f,
	0x33, 0x75, 0xe2, 0x33, 0x58, 0x2b, 0xda, 0xd3, 0x34, 0xc4, 0x5c, 0x87, 0x6a, 0x20, 0xa1, 0xc4,
	0x5c, 0x27, 0x3a, 0xbb, 0x31, 0x36, 0x7c, 0x76, 0x23, 0x19, 0x95, 0xdd, 0xf0, 0xa4, 0x91, 0xc6,
	0x9f, 0x24, 0x8d, 0x14, 0x4a, 0xea, 0x4c, 0x8c, 0x96, 0xd4, 0x91, 0x7f, 0x35, 0x0e, 0xa9, 0xdd,
	0x7d, 0x31, 0x41, 0x1f, 0xec, 0x56, 0xdc, 0x23, 0x9f, 0x17, 0xd2, 0x74, 0x28, 0xb7, 0x3d, 0x16,
	0xce, 0x6d, 0x77, 0x33, 0xf5, 0xc9, 0x91, 0x32, 0xf5, 0xc2, 0x84, 0xc7, 0x07, 0x9b, 0xb0, 0x77,
	0x51, 0x4d, 0xf8, 0x16, 0x55, 0xc0, 0xdf, 0xa6, 0x9e, 0xc4, 0xdf, 0xa2, 0x79, 0x18, 0x33, 0x2d,
	0x12, 0x72, 0x01, 0xbb, 0xcc, 0xa0, 0x5f, 0xe4, 0xc7, 0xb0, 0x18, 0x98, 0x71, 0xb1, 0xc4, 0xaf,
	0xc3, 0x8c, 0x89, 0x4f, 0x5d, 0x95, 0x07, 0x6c, 0x22, 0xaf, 0x9b, 0x52, 0xa6, 0x08, 0x78, 0x9f,
	0x06, 0x6b, 0x44, 0xcb, 0x2b, 0x90, 0xa2, 0x24, 0x8e, 0xfe, 0x9e, 0xb8, 0x28, 0x99, 0x20, 0x80,
	0x8a, 0xfe, 0x1e, 0xee, 0xf8, 0xb9, 0xb8, 0xc7, 0xcf, 0x7d, 0x5b, 0x82, 0x73, 0x21, 0x9e, 0x4f,
	0x70, 0x0b, 0x36, 0x7e, 0xc4, 0x1a, 0x73, 0xff, 0x76, 0xa9, 0xd7, 0x72, 0x13, 0x3c, 0x04, 0x7d,
	0xd4, 0xc8, 0xe2, 0x51, 0x23, 0xbb, 0x0c, 0xe9, 0x5a, 0xdb, 0xb6, 0xb1, 0xe9, 0xb2, 0xc1, 0x31,
	0x8b, 0x99, 0xe4, 0x30, 0x32, 0x3e, 0xf9, 0x11, 0x64, 0x3a, 0xd6, 0xfc, 0x81, 0x2b, 0xee, 0xaf,
	0x24, 0x98, 0xf5, 0x70, 0x1b, 0x59, 0x65, 0xcf, 0x07, 0x55, 0xb6, 0x1c, 0x36, 0xc7, 0x0f, 0x52,
	0x59, 0x6b, 0x30, 0xcf, 0xf6, 0x1c, 0xdd, 0x6c, 0x6c, 0x6b, 0xae, 0xd6, 0x7f, 0x2f, 0x4e, 0x32,
	0x5a, 0x91, 0xc8, 0x90, 0x68, 0x48, 0x47, 0x13, 0x19, 0xa3, 0x24, 0xf5, 0xe5, 0x5f, 0x8e, 0xc3,
	0x42, 0x80, 0xeb, 0x13, 0x1c, 0x04, 0x53, 0x6d, 0xa7, 0xae, 0xb6, 0x6c, 0xbd, 0x86, 0xb9, 0xea,
	0x9e, 0x0f, 0xd2, 0x47, 0xf2, 0x58, 0x3f, 0x70, 0xea, 0xfb, 0xa4, 0x15, 0x3b, 0x06, 0x4e, 0xb4,
	0xf9, 0x57, 0xf4, 0x31, 0xb8, 0xc0, 0x14, 0x4c, 0x13, 0x66, 0xb5, 0x76, 0xb3, 0x6d, 0x68, 0xae,
	0x7e, 0x8c, 0x79, 0x60, 0xee, 0xf0, 0x0c, 0xef, 0x62, 0x34, 0x17, 0x65, 0xa5, 0xdb, 0x38, 0xdf,
	0x69, 0xcb, 0x70, 0x0e, 0x7a, 0x07, 0x56, 0xda, 0x34, 0x8c, 0xc1, 0xf5, 0xa8, 0x9e, 0x13, 0x7d,
	0x7b, 0x5e, 0x16, 0x4d, 0x43, 0xfd, 0x66, 0x5f, 0x83, 0x29, 0xdf, 0x70, 0xbc, 0xc7, 0xd7, 0x14,
	0x3b, 0xbe, 0xce, 0x7b, 0x8f, 0xaf, 0x92, 0xf7, 0x64, 0xfa, 0x39, 0x09, 0xd0, 0x41, 0xab, 0xae,
	0xb9, 0x98, 0xf9, 0x74, 0x3e, 0xf5, 0x23, 0x6d, 0x00, 0x32, 0x4c, 0xb9, 0xa7, 0x6a, 0xdb, 0x36,
	0xd4, 0x96, 0x8d, 0x1f, 0xea, 0xa7, 0x9d, 0x84, 0xdf, 0xe9, 0x81, 0x6d, 0xec, 0x53, 0x90, 0x08,
	0x71, 0xe3, 0xdd, 0x10, 0x57, 0x58, 0x57, 0xc2, 0x63, 0x5d, 0x5f, 0x90, 0x60, 0xce, 0x27, 0xcd,
	0x13, 0xe4, 0xa8, 0xb8, 0xe0, 0xb1, 0x27, 0x11, 0x3c, 0x1e, 0x12, 0x5c, 0xfe, 0x8b, 0x8e, 0x82,
	0x98, 0xf9, 0x3e, 0x8d, 0xf4, 0x27, 0x39, 0xbb, 0x31, 0x12, 0x7a, 0xd5, 0xc6, 0xb8, 0xb2, 0x0c,
	0x65, 0x49, 0x6b, 0xe2, 0x2e, 0x9a, 0xde, 0xba, 0x25, 0x3c, 0xe8, 0x62, 0xcd, 0x32, 0x85, 0x2e,
	0xc7, 0xc2, 0xba, 0x4c, 0x7a, 0x74, 0xd9, 0x12, 0xaa, 0xe4, 0x72, 0x3f, 0xc1, 0x31, 0x68, 0xb4,
	0x7d, 0x5d, 0x5e, 0x84, 0xf9, 0x8a, 0xab, 0x3d, 0xd2, 0xcd, 0x06, 0xbf, 0x40, 0xe0, 0x97, 0x33,
	0xdf, 0x92, 0x60, 0x21, 0x80, 0xe0, 0xc2, 0xdc, 0x80, 0x99, 0x63, 0x1d, 0x9f, 0x60, 0xbb, 0x93,
	0x95, 0xe6, 0x56, 0x3b, 0xcd, 0xc0, 0x22, 0x11, 0x8d, 0x9e, 0x85, 0x8c, 0xc3, 0x7a, 0xe8, 0x52,
	0xf2, 0xc4, 0xa3, 0xd3, 0xe9, 0x99, 0x91, 0xbe, 0x08, 0xe7, 0x04, 0x69, 0xe0, 0xd6, 0x84, 0x2b,
	0x7a, 0x81, 0xa3, 0xfd, 0x17, 0x26, 0xf4, 0x5a, 0x19, 0x1b, 0x1e, 0x49, 0x78, 0x0a, 0x80, 0x00,
	0x05, 0x91, 0x5c, 0x14, 0x87, 0x97, 0x8a, 0xb7, 0x8f, 0xee, 0xaa, 0x99, 0xad, 0x63, 0x03, 0x37,
	0x34, 0xd7, 0x62, 0x39, 0x30, 0xec, 0x38, 0x7c, 0x40, 0x99, 0x0e, 0x22, 0xc7, 0xe0, 0xdd, 0x53,
	0x4d, 0xa0, 0xab, 0x91, 0x4f, 0x35, 0x7b, 0xf4, 0x54, 0xe3, 0xeb, 0x25, 0x70, 0xaa, 0x19, 0x49,
	0xae, 0x2f, 0xb0, 0xe3, 0x4e, 0x74, 0x7f, 0x23, 0x1b, 0x51, 0x1e, 0x92, 0xec, 0xec, 0xc2, 0xad,
	0xe8, 0x16, 0x25, 0xf6, 0x55, 0x8e, 0x1d, 0xdf, 0x5d, 0xf7, 0x31, 0xa3, 0x27, 0x1f, 0x76, 0xbe,
	0x66, 0x4d, 0x65, 0x13, 0x6e, 0xd3, 0xdb, 0x02, 0x6f, 0x2a, 0x62, 0xdf, 0xb6, 0x8e, 0xf5, 0x3a,
	0xb6, 0xa9, 0x15, 0x06, 0xea, 0x9a, 0x56, 0x20, 0x25, 0x16, 0x27, 0xcb, 0x84, 0x4e, 0x29, 0x13,
	0x7c, 0x75, 0x3a, 0xc3, 0xdc, 0x4e, 0x7c, 0x2a, 0x06, 0x77, 0x86, 0x64, 0x38, 0xb2, 0x42, 0x8e,
	0x20, 0xd5, 0x49, 0xb7, 0xf0, 0x3d, 0xeb, 0xad, 0xa8, 0xfb, 0xc2, 0xa1, 0x79, 0xaf, 0x0b, 0x52,
	0xbe, 0x97, 0x89, 0x8c, 0x0d, 0xd9, 0x17, 0x7c, 0x28, 0xef, 0xbe, 0x90, 0x88, 0xd8, 0x17, 0x52,
	0xde, 0x7d, 0xe1, 0x22, 0x9c, 0xbf, 0x87, 0xdd, 0xdc, 0xa1, 0x69, 0xd9, 0x4d, 0xcd, 0x60, 0xc1,
	0xb3, 0xe7, 0xfa, 0x47, 0x7e, 0x00, 0x17, 0x7a, 0xe0, 0xb9, 0x46, 0x5e, 0x84, 0x04, 0x3d, 0x73,
	0x49, 0x9e, 0x43, 0xae, 0x67, 0x88, 0x11, 0x2d, 0x29, 0xbd, 0xfc, 0xcf, 0x12, 0xa0, 0x30, 0x92,
	0x78, 0x38, 0x1a, 0x63, 0xf3, 0x58, 0x84, 0xc6, 0xe5, 0x5e, 0x1f, 0xcc, 0xe2, 0xb4, 0x8e, 0x0f,
	0x0e, 0x26, 0xb3, 0x59, 0xa9, 0x91, 0x37, 0x99, 0xed, 0x39, 0x10, 0x27, 0x7c, 0x07, 0x62, 0xc2,
	0x49, 0x6f, 0x62, 0x7e, 0xd8, 0xa0, 0x9f, 0xc9, 0x81, 0x95, 0xdf, 0xc0, 0xd1, 0x31, 0xf1, 0x9a,
	0x14, 0x06, 0xa2, 0xe2, 0x5d, 0x87, 0x19, 0x72, 0x28, 0xf4, 0x9e, 0x6a, 0xd9, 0xc5, 0x05, 0x39,
	0xc7, 0x56, 0xbb, 0x55, 0x07, 0xbf, 0x2f, 0xc1, 0xe2, 0x3d, 0xec, 0x92, 0x36, 0x5b, 0x67, 0x55,
	0xca, 0x70, 0x88, 0x1d, 0xa5, 0xe7, 0xe1, 0x5d, 0x9c, 0x62, 0xe2, 0xd1, 0xa7, 0x98, 0x7c, 0xc5,
	0x73, 0x8a, 0xe1, 0xbb, 0x46, 0x22, 0xbc, 0x6b, 0x8c, 0x79, 0x76, 0x8d, 0x3f, 0x97, 0xe0, 0x5c,
	0x48, 0x40, 0x3e, 0xa5, 0xaf, 0x40, 0xca, 0x6a, 0x61, 0x9b, 0x16, 0xa3, 0x52, 0x11, 0xa7, 0x37,
	0x57, 0xc2, 0x2c, 0xcb, 0x82, 0x44, 0xe9, 0x52, 0xf7, 0x28, 0xa8, 0xf2, 0xb4, 0x3b, 0x70, 0xb0,
	0x9d, 0xd7, 0x1c, 0x1c, 0x38, 0xa6, 0x21, 0x48, 0x34, 0x71, 0xd3, 0x12, 0xe1, 0x36, 0xf9, 0x4c,
	0xab, 0x51, 0xc8, 0x2c, 0xf0, 0xc0, 0x81, 0x5a, 0xcd, 0xef, 0x4a, 0x30, 0xb7, 0xa3, 0x9f, 0x16,
	0x8e, 0xb1, 0xe9, 0xee, 0xe9, 0x8e, 0xf3, 0xb3, 0xa5, 0xd4, 0x37, 0x60, 0xde, 0x2f, 0xdc, 0xc8,
	0x3e, 0x7e, 0x91, 0xa6, 0xd4, 0x73, 0x86, 0x11, 0xa8, 0x7b, 0xf8, 0xb6, 0x04, 0xe9, 0xc2, 0xa9,
	0x8b, 0xcd, 0x3a, 0xbb, 0x32, 0x47, 0xb9, 0x8e, 0xa5, 0xb6, 0x34, 0x5d, 0x74, 0xbd, 0x1a, 0xae,
	0x45, 0x2c, 0xdb, 0x7a, 0xa3, 0x7b, 0xd3, 0x2e, 0x6c, 0x99, 0x76, 0x71, 0x09, 0x26, 0x9b, 0xba,
	0x29, 0x2e, 0xab, 0xb9, 0x72, 0xa0, 0xa9, 0x9b, 0xfc, 0x6e, 0x9a, 0x12, 0x68, 0xa7, 0x1d, 0x82,
	0x38, 0x27, 0xd0, 0x4e, 0x05, 0xc1, 0x32, 0x4c, 0x90, 0x1e, 0x0e, 0xdb, 0xb6, 0x88, 0x5e, 0xc6,
	0x9b, 0xba, 0xb9, 0xd5, 0xb6, 0x4d, 0x8a, 0xd2, 0x4e, 0x19, 0x8a, 0x5f, 0x76, 0x36, 0xb5, 0x53,
	0x82, 0x92, 0xff, 0x52, 0xa2, 0xa9, 0x5b, 0xef, 0x20, 0x47, 0xf6, 0xae, 0x1f, 0xe9, 0xdc, 0xd4,
	0x93, 0xe1, 0x8b, 0x14, 0x5b, 0x28, 0xe3, 0xe3, 0x55, 0x99, 0xb8, 0xac, 0x27, 0x9f, 0x1d, 0xf4,
	0x32, 0x40, 0xed, 0x50, 0x94, 0x4a, 0xf0, 0x84, 0xd1, 0x72, 0xf0, 0x20, 0x93, 0x3f, 0x14, 0x25,
	0x12, 0xa9, 0x9a, 0xf8, 0x28, 0xbf, 0x0c, 0x2b, 0xf7, 0xb0, 0xdb, 0x41, 0x39, 0x65, 0xd3, 0x17,
	0x51, 0xf7, 0xb6, 0x44, 0xf9, 0x07, 0x12, 0x4c, 0x09, 0x89, 0xd8, 0xa1, 0x6d, 0xa4, 0x8a, 0xad,
	0x1b, 0x30, 0x43, 0x2b, 0x71, 0x54, 0xf7, 0xc8, 0xc6, 0xce, 0x91, 0x65, 0xd4, 0xf9, 0x9c, 0x4d,
	0x53, 0x70, 0x55, 0x40, 0xd1, 0x1a, 0xcc, 0xe2, 0x96, 0x55, 0x3b, 0x52, 0xf9, 0xbd, 0x41, 0x4d,
	0x6b, 0x39, 0x7c, 0xf6, 0x66, 0x28, 0xe2, 0x1d, 0x0a, 0xcf, 0x6b, 0x2d, 0x47, 0x4c, 0xa1, 0x83,
	0xcd, 0xba, 0x67, 0x0a, 0x2b, 0xd8, 0xac, 0x8b, 0x29, 0xa4, 0xa8, 0xee, 0x14, 0x52, 0xd4, 0x39,
	0x20, 0x54, 0x24, 0xc4, 0xe0, 0x3e, 0x32, 0xd9, 0xd4, 0xcd, 0x5c, 0xbd, 0x2e, 0xff, 0xbb, 0x44,
	0xf7, 0x93, 0x08, 0xed, 0x8c, 0x3c, 0xc5, 0x97, 0x21, 0xcd, 0x86, 0xdb, 0xc2, 0xb6, 0x6e, 0x89,
	0xb1, 0x4e, 0x52, 0xd8, 0x3e, 0x05, 0x11, 0x12, 0x36, 0x50, 0x03, 0x9b, 0x0d, 0xf7, 0x48, 0x84,
	0xf5, 0x14, 0xb6, 0x4b, 0x41, 0xc4, 0x86, 0x4d, 0x76, 0xfe, 0x3a, 0xb1, 0xb5, 0x16, 0x1f, 0x22,
	0x30, 0xd0, 0x03, 0x5b, 0x6b, 0xa1, 0x0f, 0x41, 0x92, 0x5f, 0x44, 0x8c, 0x45, 0x97, 0xc1, 0xfa,
	0x66, 0x4c, 0xe1, 0xc4, 0xf2, 0xaf, 0x27, 0xc8, 0xb1, 0xd6, 0xc5, 0x26, 0xf5, 0x80, 0xec, 0x84,
	0x46, 0x17, 0x3e, 0x51, 0x1b, 0x26, 0x1f, 0x84, 0x01, 0x24, 0x94, 0x71, 0xfa, 0xbd, 0x58, 0x47,
	0x37, 0x21, 0xc3, 0x50, 0x8e, 0xab, 0xd9, 0xae, 0x4a, 0xb7, 0x1f, 0xb6, 0xa1, 0x4d, 0x53, 0x78,
	0x85, 0x80, 0xab, 0x64, 0x23, 0xba, 0x0a, 0x0c, 0xa2, 0x62, 0xb3, 0xce, 0xe8, 0xd8, 0xce, 0x96,
	0xa6, 0xd0, 0x82, 0x59, 0xa7, 0x54, 0x6f, 0xc3, 0x38, 0x19, 0x55, 0x0b, 0xdb, 0xbc, 0x54, 0xe5,
	0xa5, 0xf0, 0xa9, 0x32, 0x42, 0xc4, 0x5d, 0x7c, 0x8c, 0xf9, 0xda, 0x7b, 0xc0, 0x9a, 0x2b, 0xa2,
	0x1f, 0x74, 0x07, 0xe6, 0x18, 0xe3, 0x96, 0x6d, 0x35, 0x2d, 0x55, 0x6f, 0x36, 0x68, 0x75, 0x26,
	0x9b, 0x7f, 0x26, 0xfd, 0x3e, 0xc1, 0x14, 0x9b, 0x8d, 0x03, 0xdb, 0xa0, 0x17, 0x9b, 0x94, 0xfc,
	0xa1, 0xf6, 0x98, 0xe6, 0xee, 0x3c, 0xb5, 0x9c, 0x33, 0x14, 0xb3, 0xa3, 0x3d, 0xde, 0xd5, 0xcd,
	0x47, 0x84, 0x78, 0x13, 0x16, 0x18, 0x31, 0x3f, 0x0a, 0xab, 0xae, 0x65, 0x19, 0xae, 0xde, 0xe2,
	0x5b, 0x28, 0x63, 0xcc, 0x05, 0xad, 0x32, 0x14, 0x09, 0x69, 0x59, 0x9b, 0x3a, 0x76, 0x6a, 0xb6,
	0xde, 0xa2, 0x7b, 0xd2, 0x84, 0x47, 0x9a, 0xed, 0x2e, 0x9c, 0x96, 0x94, 0x52, 0x62, 0x57, 0x77,
	0x0d, 0x2c, 0x6a, 0x41, 0x29, 0xa8, 0x4a, 0x20, 0x68, 0x03, 0xe6, 0x19, 0x01, 0x31, 0x6c, 0x71,
	0x6a, 0xd0, 0x5a, 0x34, 0x25, 0x27, 0x29, 0x8c, 0xd3, 0x9e, 0x76, 0xca, 0xe3, 0x53, 0xad, 0x45,
	0x93, 0xc0, 0x96, 0xfa, 0x50, 0xb3, 0x55, 0xa7, 0xdd, 0xe4, 0x2d, 0xf8, 0x1d, 0xd8, 0xb4, 0x63,
	0xed, 0x68, 0x76, 0xa5, 0xdd, 0x64, 0xd4, 0xf2, 0x67, 0x62, 0x70, 0x63, 0x48, 0x75, 0xa3, 0x47,
	0x90, 0x36, 0x08, 0x54, 0xf8, 0x1f, 0x16, 0x3c, 0xdd, 0x7f, 0xc2, 0xd9, 0x5b, 0xf7, 0x80, 0x58,
	0x70, 0x38, 0x69, 0x74, 0x21, 0xd9, 0x47, 0x90, 0x09, 0x12, 0x44, 0xa4, 0x0e, 0x72, 0xfe, 0x9b,
	0xef, 0x5b, 0x83, 0x64, 0xf1, 0x74, 0xe9, 0x8d, 0x27, 0x0d, 0x58, 0xe9, 0x43, 0x49, 0x4e, 0xbc,
	0x5d, 0xd5, 0x73, 0xf6, 0xa9, 0xa6, 0xd0, 0x38, 0x5a, 0x87, 0x39, 0x82, 0xee, 0x84, 0x57, 0xcc,
	0x81, 0xf1, 0x6c, 0xc6, 0x6c, 0x53, 0x3b, 0x15, 0x21, 0x16, 0xf3, 0x60, 0xfc, 0xa2, 0x27, 0xc8,
	0xd0, 0x5b, 0xbe, 0x14, 0x95, 0xdb, 0xfa, 0xde, 0x18, 0x3d, 0xf9, 0x44, 0x37, 0x1b, 0xd9, 0x4f,
	0x79, 0xd7, 0x7b, 0xcc, 0xbf, 0xde, 0x87, 0x5b, 0xc5, 0x7e, 0x9d, 0x24, 0x86, 0xd4, 0xc9, 0x58,
	0x0f, 0x9d, 0xa0, 0x6b, 0x30, 0x2d, 0x12, 0x81, 0xbc, 0x4b, 0xb6, 0x1c, 0xa7, 0x38, 0x94, 0x77,
	0x7b, 0x15, 0xa6, 0xe9, 0x31, 0xb8, 0x9b, 0x58, 0x63, 0x97, 0xd0, 0xf4, 0x1c, 0x2c, 0xf2, 0x4c,
	0x44, 0xb6, 0x1a, 0x39, 0xa6, 0x31, 0xe9, 0x59, 0x56, 0x3c, 0x45, 0x21, 0x54, 0xf4, 0x7d, 0x48,
	0x39, 0x7a, 0xc3, 0xd4, 0xdc, 0xb6, 0xcd, 0x96, 0xdb, 0xe4, 0xe6, 0x12, 0xdb, 0xc3, 0xd8, 0x93,
	0x23, 0x72, 0xe4, 0x13, 0xf8, 0xad, 0xa5, 0x6f, 0x7d, 0xff, 0xd2, 0x33, 0xff, 0xfd, 0xfd, 0x4b,
	0x99, 0x33, 0xad, 0x69, 0xbc, 0x2a, 0x77, 0x1a, 0xca, 0x4a, 0xb7, 0x93, 0x5e, 0xfe, 0x07, 0x46,
	0xf2, 0x3f, 0x93, 0x23, 0xfa, 0x9f, 0xf4, 0x88, 0xfe, 0x67, 0x6a, 0x38, 0xff, 0x33, 0x3d, 0xb4,
	0xff, 0x99, 0x19, 0xc9, 0xff, 0x64, 0x22, 0xfd, 0xcf, 0x26, 0x9c, 0xa7, 0x27, 0xea, 0xa0, 0x59,
	0xf7, 0x5b, 0x09, 0xff, 0x22, 0xc1, 0x85, 0x1e, 0x8d, 0x9e, 0xe6, 0x3a, 0x08, 0x9b, 0x64, 0x3c,
	0xca, 0x24, 0x7d, 0xd6, 0x94, 0x78, 0x0a, 0xd6, 0x24, 0x5f, 0x83, 0x2b, 0xf4, 0x90, 0x53, 0x23,
	0x83, 0x3b, 0xc6, 0xe2, 0xe1, 0x49, 0x1e, 0x1b, 0xb6, 0xa2, 0x99, 0x8f, 0x44, 0x74, 0xfd, 0x35,
	0x09, 0xae, 0xf6, 0xa7, 0x1b, 0x59, 0x1b, 0xaf, 0xc1, 0x98, 0xad, 0x99, 0x8f, 0x44, 0x64, 0x7a,
	0x2d, 0x48, 0x1b, 0xe2, 0x45, 0xf9, 0xb0, 0x36, 0xc4, 0x8e, 0xda, 0x34, 0xa5, 0xe7, 0x75, 0x1a,
	0xc0, 0x40, 0x64, 0xdd, 0xc9, 0x57, 0x41, 0x8e, 0x92, 0x77, 0xcb, 0x3c, 0xf4, 0x0e, 0xeb, 0x4f,
	0xa5, 0xe8, 0xe1, 0x77, 0xc8, 0x7e, 0xc6, 0x46, 0xf5, 0x3a, 0x5c, 0x2f, 0x9a, 0x51, 0xd2, 0x3e,
	0x38, 0xd2, 0x5d, 0x3c, 0xa8, 0xc2, 0xc8, 0x82, 0x1b, 0x03, 0x5b, 0x8f, 0x3c, 0xe0, 0x2c, 0x4c,
	0x60, 0x43, 0x6f, 0xe8, 0x87, 0x06, 0xdb, 0x85, 0x26, 0x94, 0xce, 0x77, 0xf9, 0x01, 0x2c, 0x44,
	0x8e, 0x37, 0x4a, 0x3a, 0x02, 0x23, 0x5a, 0xe0, 0x2b, 0x83, 0x7e, 0x46, 0x8b, 0x90, 0xe4, 0xce,
	0x9c, 0xd5, 0x29, 0xf1, 0x6f, 0xf2, 0x1f, 0xc6, 0x60, 0x9a, 0xbe, 0x1d, 0x3b, 0xd4, 0x5c, 0xfc,
	0x53, 0x0f, 0x2a, 0xdf, 0x0c, 0x06, 0x95, 0xcf, 0x05, 0x15, 0xe4, 0x97, 0xad, 0x5f, 0x34, 0xd9,
	0xcb, 0xdf, 0x8d, 0x8d, 0xe4, 0xef, 0x92, 0x91, 0xfe, 0xee, 0xab, 0x31, 0x58, 0x1d, 0x24, 0x09,
	0x7a, 0x0d, 0xb2, 0x2c, 0xd0, 0xaa, 0xeb, 0xc7, 0x3a, 0xad, 0x3a, 0x32, 0xac, 0x13, 0x6c, 0xab,
	0x87, 0x56, 0xdb, 0xac, 0xd3, 0xb0, 0x4b, 0x52, 0xce, 0x51, 0x8a, 0x6d, 0x4e, 0xb0, 0x4b, 0xf0,
	0x5b, 0x04, 0x8d, 0xea, 0x81, 0x28, 0x8d, 0x19, 0x7d, 0x6e, 0x54, 0x75, 0x0c, 0x08, 0xcf, 0xea,
	0x43, 0x85, 0x67, 0xaf, 0xfa, 0xc3, 0xb3, 0xab, 0x3d, 0x85, 0xe8, 0x11, 0x97, 0xfd, 0x3c, 0xcc,
	0x47, 0x91, 0x10, 0xd7, 0x6c, 0x53, 0xa0, 0xda, 0xb2, 0xec, 0x4e, 0xc2, 0x47, 0x52, 0xa6, 0x18,
	0x74, 0x9f, 0x01, 0x03, 0x31, 0x4a, 0x2c, 0x10, 0xa3, 0xc8, 0x77, 0x68, 0x32, 0xa9, 0xc3, 0x60,
	0x50, 0x00, 0xf6, 0x8d, 0x38, 0x7d, 0xd1, 0x13, 0xa0, 0xff, 0xe9, 0x47, 0x5e, 0xe1, 0xc1, 0x27,
	0xa2, 0x06, 0xbf, 0x08, 0x49, 0x3e, 0x70, 0x76, 0x0c, 0xe2, 0xdf, 0x22, 0x42, 0xa8, 0xe4, 0xc0,
	0x10, 0x6a, 0xbc, 0x6f, 0x08, 0x35, 0xf1, 0x34, 0x42, 0xa8, 0x5e, 0x8b, 0x2e, 0x35, 0xd2, 0xa2,
	0x83, 0xc8, 0x45, 0x77, 0x0b, 0x16, 0xba, 0x4f, 0x5b, 0x89, 0x8e, 0xfa, 0x4d, 0xf3, 0xdf, 0x49,
	0xb0, 0x18, 0xa4, 0x7e, 0x9a, 0x93, 0xdc, 0x9d, 0x97, 0xb8, 0x6f, 0x5e, 0x9e, 0x7e, 0x1c, 0xf1,
	0x37, 0x63, 0xb0, 0xb8, 0xe5, 0xd4, 0x84, 0x97, 0xa7, 0x0b, 0x9d, 0x2f, 0xa0, 0x9f, 0xa2, 0x67,
	0xee, 0x11, 0x1b, 0x27, 0x46, 0x8a, 0x8d, 0xc7, 0x46, 0x8c, 0x8d, 0x93, 0x23, 0xc6, 0xc6, 0xe3,
	0xc3, 0xc5, 0xc6, 0x13, 0xa1, 0xd8, 0x78, 0x05, 0x52, 0x27, 0x87, 0xe6, 0x21, 0x2b, 0x51, 0x63,
	0x47, 0xf7, 0x09, 0x02, 0xa0, 0x45, 0x6a, 0xcf, 0xc1, 0x7c, 0xe4, 0xd3, 0x28, 0x76, 0x2e, 0x40,
	0x76, 0xf8, 0x4d, 0x54, 0xaf, 0x55, 0x30, 0x39, 0xd2, 0x2a, 0x48, 0x47, 0xad, 0x82, 0x80, 0x37,
	0x9c, 0x1a, 0xf2, 0xc4, 0x36, 0xdd, 0xeb, 0xc4, 0x56, 0x83, 0xb9, 0x0e, 0xed, 0x09, 0x09, 0x56,
	0x54, 0x43, 0x77, 0x5c, 0x7a, 0x28, 0x88, 0x28, 0x74, 0xf0, 0xd8, 0xa1, 0xe8, 0xa7, 0x13, 0xe1,
	0x88, 0x0d, 0x78, 0xd6, 0x0d, 0x62, 0xe4, 0xdf, 0x8a, 0xc1, 0x95, 0x21, 0x9a, 0xa2, 0xf7, 0xa2,
	0x85, 0x61, 0x19, 0x8a, 0x37, 0x9f, 0x40, 0x98, 0xf5, 0x10, 0x82, 0x6d, 0x82, 0x61, 0x19, 0xb3,
	0x76, 0xb7, 0x18, 0xca, 0x4f, 0x1c, 0xb1, 0x21, 0x6e, 0xf9, 0x37, 0xc4, 0xdb, 0xa3, 0x48, 0xe6,
	0xdd, 0x18, 0x5f, 0x83, 0xf3, 0xfd, 0x48, 0xc3, 0x77, 0x8c, 0x89, 0xee, 0x1d, 0xa3, 0xbc, 0x41,
	0xdf, 0x2a, 0x7a, 0xda, 0x0f, 0xda, 0xf9, 0xbe, 0x1a, 0x83, 0x99, 0x00, 0x39, 0x2a, 0x02, 0x5b,
	0xe6, 0xdd, 0x64, 0x10, 0x19, 0xd0, 0xf5, 0x3e, 0x03, 0xf2, 0xf8, 0x1f, 0x85, 0xad, 0x2a, 0xee,
	0x8c, 0x5e, 0x84, 0x73, 0xe2, 0xa0, 0x15, 0x9d, 0x43, 0x59, 0xe0, 0xe8, 0x80, 0x05, 0x5e, 0x85,
	0x69, 0xba, 0xf6, 0xba, 0x3b, 0x19, 0x8b, 0x48, 0xd3, 0x04, 0xda, 0x63, 0x27, 0x4b, 0xf4, 0xdd,
	0xc9, 0xc6, 0x9e, 0x86, 0xdb, 0xfd, 0x45, 0xfa, 0xd8, 0x33, 0xa4, 0xde, 0x27, 0x28, 0xbc, 0x4a,
	0x78, 0xaa, 0xbc, 0x2f, 0xf5, 0xd1, 0xac, 0xe7, 0x82, 0xf2, 0x6d, 0x58, 0xa5, 0x9b, 0x97, 0x5f,
	0x82, 0x81, 0x55, 0xcc, 0x7d, 0x36, 0x2c, 0xf9, 0x5f, 0x25, 0xb8, 0xdc, 0xa7, 0xcf, 0xff, 0x17,
	0x47, 0x6e, 0x76, 0x34, 0xcd, 0x33, 0x2e, 0xb4, 0xf2, 0xb5, 0xd4, 0x6e, 0x1e, 0x62, 0x7b, 0xeb,
	0xac, 0x64, 0xd5, 0x45, 0xb8, 0x20, 0x7f, 0x23, 0x46, 0x8f, 0xa6, 0xbd, 0xc9, 0x46, 0xd6, 0xc5,
	0xc7, 0x60, 0xdc, 0xc6, 0x24, 0x8c, 0x13, 0x87, 0xd3, 0x37, 0x22, 0x6e, 0xdb, 0x07, 0xf1, 0x5b,
	0x57, 0x58, 0x17, 0xcc, 0x43, 0x89, 0x0e, 0xc9, 0x46, 0xd7, 0xb2, 0xad, 0x43, 0x03, 0x37, 0x35,
	0x57, 0xaf, 0xd1, 0x9d, 0x87, 0x55, 0x88, 0xa5, 0x94, 0x8c, 0x07, 0x41, 0xf6, 0x1d, 0x27, 0xfb,
	0x71, 0x48, 0x7b, 0x7b, 0x89, 0x70, 0x5d, 0x2f, 0xf9, 0x5d, 0xd7, 0x65, 0x2a, 0x28, 0xff, 0x25,
	0x1b, 0xa2, 0xf0, 0x86, 0x99, 0x33, 0x35, 0xe3, 0xcc, 0xd5, 0x6b, 0x0e, 0xeb, 0xc9, 0xeb, 0xaf,
	0xee, 0x41, 0x92, 0x0d, 0x1b, 0xdd, 0x82, 0x44, 0xcd, 0xaa, 0x63, 0x7e, 0x43, 0x7b, 0x2e, 0x42,
	0x39, 0x79, 0x32, 0x34, 0x4a, 0x44, 0xa4, 0x68, 0x3a, 0x0d, 0x1e, 0xb9, 0x93, 0x8f, 0x6b, 0x5b,
	0x90, 0x64, 0xd5, 0xaf, 0x68, 0x0e, 0x66, 0x76, 0xf7, 0xd5, 0xea, 0xbb, 0xfb, 0x05, 0xf5, 0xa0,
	0xf4, 0x56, 0xa9, 0xfc, 0xa0, 0x94, 0x79, 0x06, 0xcd, 0xc0, 0xa4, 0x00, 0xe6, 0xb6, 0xb7, 0x33,
	0x12, 0x42, 0x30, 0x2d, 0x00, 0x4a, 0x61, 0xaf, 0xfc, 0x4e, 0x21, 0x13, 0x5b, 0x7b, 0x1b, 0x92,
	0xec, 0x9a, 0x14, 0x4d, 0x03, 0xe4, 0xab, 0x9e, 0xe6, 0x29, 0x18, 0xcb, 0x57, 0xd5, 0xea, 0x47,
	0x33, 0x12, 0x9a, 0x82, 0x54, 0xbe, 0xaa, 0xee, 0xee, 0xd3, 0x7e, 0x62, 0x28, 0x0d, 0x13, 0xec,
	0xab, 0xb2, 0x97, 0x89, 0x13, 0x36, 0xf9, 0xaa, 0xba, 0xad, 0x94, 0xf7, 0xd5, 0x7b, 0xb9, 0x4a,
	0x26, 0xb1, 0xf6, 0xd7, 0x12, 0x4c, 0x7a, 0x2e, 0x97, 0x69, 0xc7, 0x39, 0x4f, 0xc7, 0xa4, 0xb7,
	0x9c, 0x5a, 0x2a, 0x2b, 0x7b, 0xb9, 0xdd, 0x8c, 0xc4, 0xd1, 0x0f, 0x72, 0xc5, 0x6a, 0xb1, 0x74,
	0x2f, 0x13, 0xe3, 0x68, 0xa5, 0xb0, 0x5f, 0x56, 0xaa, 0x99, 0x38, 0x5a, 0x04, 0x44, 0x5a, 0x57,
	0x88, 0xcc, 0x95, 0x77, 0x4b, 0x79, 0xb5, 0x5a, 0x2e, 0xef, 0x66, 0x12, 0x7e, 0x78, 0xf1, 0x5e,
	0x89, 0xc1, 0xc7, 0xd0, 0x12, 0xcc, 0x77, 0xe1, 0x07, 0x7b, 0x5b, 0xc5, 0x2a, 0xc3, 0x24, 0xd1,
	0x39, 0x98, 0xcb, 0xe7, 0xd4, 0xbd, 0xb2, 0x52, 0x50, 0x8b, 0xa5, 0x9d, 0xb2, 0x5a, 0x2a, 0x14,
	0xb6, 0x0b, 0xdb, 0x99, 0x71, 0x2e, 0x41, 0xbe, 0xc2, 0x08, 0x27, 0xd6, 0xde, 0x8f, 0xc3, 0xb4,
	0xff, 0x96, 0x9b, 0x92, 0xe4, 0x3d, 0x63, 0xc8, 0xc2, 0x62, 0x3e, 0xaf, 0x56, 0x95, 0x5c, 0xa9,
	0xb2, 0x53, 0x50, 0xd4, 0x52, 0x59, 0xbd, 0x5f, 0xac, 0x54, 0xcb, 0xca, 0xbb, 0x19, 0x29, 0x88,
	0xab, 0x1c, 0x6c, 0xed, 0x15, 0xab, 0x7c, 0x70, 0xb7, 0xe1, 0xa6, 0x17, 0xc7, 0x47, 0xad, 0xee,
	0x94, 0x15, 0xb5, 0x72, 0xaf, 0xa4, 0xe6, 0xcb, 0xa5, 0x9d, 0xa2, 0xb2, 0x97, 0xab, 0x16, 0xcb,
	0xa5, 0x4c, 0x1c, 0xdd, 0x84, 0xab, 0xbd, 0xa8, 0x77, 0x0e, 0x4a, 0xdb, 0xaa, 0x52, 0xd8, 0x2d,
	0xe4, 0x2a, 0x85, 0x4c, 0x02, 0x5d, 0x86, 0x0b, 0x5e, 0x4a, 0xa5, 0xf0, 0xf6, 0x41, 0xa1, 0x42,
	0x89, 0x95, 0x02, 0x21, 0xcd, 0x8c, 0xa1, 0xeb, 0x20, 0x7b, 0x49, 0x38, 0x2b, 0x42, 0xf2, 0x6e,
	0xf9, 0x40, 0x11, 0x74, 0x49, 0xb4, 0x00, 0xb3, 0xf9, 0x3c, 0x99, 0x69, 0xef, 0xa8, 0xc6, 0x3d,
	0x60, 0xcf, 0x80, 0x26, 0xf8, 0x60, 0x09, 0x38, 0x30, 0x96, 0x4c, 0x8a, 0x37, 0xf1, 0xc2, 0x77,
	0xf7, 0x33, 0xc0, 0x9b, 0x3c, 0x28, 0x56, 0xef, 0x6f, 0x2b, 0xb9, 0x07, 0xde, 0xee, 0x26, 0xd1,
	0x25, 0x58, 0xf1, 0xe2, 0x82, 0x7d, 0xa6, 0xd1, 0x3c, 0x64, 0xf2, 0xf9, 0x8e, 0xb5, 0xa9, 0x3b,
	0xb9, 0xe2, 0x6e, 0x66, 0x8a, 0x4e, 0xad, 0x07, 0x5a, 0x39, 0xc8, 0xe7, 0x0b, 0x95, 0x4a, 0x66,
	0x1a, 0x2d, 0xc3, 0x82, 0x17, 0x51, 0x2a, 0xab, 0x4a, 0x21, 0x5f, 0x56, 0xb6, 0x33, 0x33, 0x6b,
	0xbf, 0x26, 0x01, 0x0a, 0x17, 0x7c, 0xa3, 0xf3, 0xb0, 0xf4, 0x60, 0x5b, 0xdd, 0x2b, 0x54, 0xef,
	0x97, 0xb7, 0xc5, 0x8a, 0xda, 0x2e, 0xec, 0x14, 0x4b, 0x85, 0xed, 0xcc, 0x33, 0xa4, 0xbf, 0x00,
	0xb6, 0x5c, 0x2a, 0x90, 0x75, 0x20, 0xa1, 0x0b, 0xb0, 0x1c, 0x40, 0xe5, 0x76, 0x77, 0xd5, 0x62,
	0x89, 0x50, 0x64, 0x62, 0x68, 0x15, 0xce, 0x07, 0xd0, 0x95, 0x6a, 0xee, 0x2d, 0x32, 0xb8, 0xfc,
	0x6e, 0xae, 0xb8, 0x97, 0x89, 0xaf, 0x7d, 0x47, 0x82, 0x71, 0xbe, 0xe4, 0x89, 0x15, 0x17, 0x14,
	0xa5, 0x4c, 0xa6, 0x69, 0xdb, 0x2f, 0xc1, 0x22, 0xcc, 0x7a, 0x30, 0xf9, 0xf2, 0xde, 0x5e, 0xb9,
	0x94, 0xf9, 0x71, 0x1c, 0xad, 0xc2, 0x0a, 0x83, 0x97, 0xca, 0x6a, 0xb5, 0xfc, 0x56, 0x81, 0xf0,
	0x55, 0xb7, 0x2b, 0x55, 0x35, 0x7f, 0x3f, 0x57, 0x2c, 0x65, 0xfe, 0x63, 0x3c, 0x9a, 0xa2, 0xa2,
	0xe4, 0x39, 0xc5, 0x7f, 0x8e, 0xa3, 0x4b, 0x90, 0x65, 0x14, 0xc5, 0x52, 0xb1, 0xda, 0x9d, 0x05,
	0xa2, 0xe4, 0xc2, 0x76, 0xe6, 0x47, 0xe3, 0xe8, 0x36, 0xdc, 0xf0, 0x30, 0x2f, 0x95, 0xd5, 0x42,
	0xa9, 0x7c, 0x70, 0xef, 0x7e, 0x14, 0xc3, 0xff, 0x1a, 0xdf, 0xfc, 0x87, 0x0d, 0x88, 0x3f, 0xc0,
	0x87, 0xe8, 0x73, 0x12, 0xa0, 0xf0, 0x0f, 0x2b, 0xa0, 0x67, 0x87, 0xf9, 0xf1, 0x05, 0xba, 0xd9,
	0x64, 0xd7, 0x86, 0xff, 0x9d, 0x06, 0xf9, 0xe2, 0xa7, 0xbf, 0xf7, 0x6f, 0x5f, 0x8a, 0x2d, 0xa1,
	0xc5, 0x8d, 0xe3, 0xbb, 0x1b, 0x8d, 0x30, 0xdb, 0x2f, 0x4b, 0xbe, 0x1f, 0x23, 0xe1, 0xe0, 0x1d,
	0xcb, 0xce, 0x19, 0xc6, 0x07, 0x25, 0xd3, 0x55, 0x2a, 0xd3, 0x45, 0x74, 0x3e, 0x5a, 0x26, 0xce,
	0xdc, 0x81, 0xb4, 0xf7, 0xa9, 0x3d, 0xba, 0x12, 0x59, 0x6d, 0xe6, 0x7f, 0xdd, 0x9f, 0xbd, 0xda,
	0x9f, 0x88, 0x0b, 0xb0, 0x44, 0x05, 0x40, 0x28, 0x23, 0x04, 0xe8, 0x30, 0xb1, 0x60, 0xd2, 0xf3,
	0xd6, 0x1c, 0xc9, 0xbd, 0xde, 0xcb, 0x76, 0x9f, 0x30, 0x67, 0xaf, 0xf4, 0xa5, 0xe1, 0x1c, 0xcf,
	0x51, 0x8e, 0xb3, 0x68, 0x86, 0x70, 0xc4, 0x1e, 0x0e, 0x9f, 0x95, 0x60, 0x36, 0xf4, 0x73, 0x2e,
	0xe8, 0x66, 0x1f, 0x6d, 0xfa, 0x1e, 0x4e, 0x65, 0x9f, 0x1d, 0x82, 0x92, 0xcb, 0xb0, 0x4a, 0x65,
	0xc8, 0xca, 0x0b, 0x01, 0xb5, 0x33, 0xb2, 0x57, 0xa5, 0x35, 0x74, 0x02, 0x53, 0xbe, 0x37, 0x88,
	0x28, 0x4a, 0x9d, 0xa1, 0xf7, 0xb1, 0xd9, 0x6b, 0x03, 0xa8, 0x38, 0xff, 0x65, 0xca, 0x7f, 0x0e,
	0xcd, 0x72, 0xfe, 0x1e, 0x3e, 0x44, 0x0b, 0xa1, 0xc7, 0x7b, 0x61, 0x2d, 0xf4, 0x7a, 0xab, 0x18,
	0xd6, 0x42, 0xcf, 0x97, 0x80, 0x7e, 0x2d, 0x9c, 0x04, 0xc9, 0x88, 0x16, 0xbe, 0xd8, 0xe3, 0xd1,
	0xf3, 0xda, 0x50, 0xaf, 0xb5, 0x99, 0x40, 0xb7, 0x46, 0x78, 0xd9, 0x2d, 0xcb, 0x54, 0xa4, 0xf3,
	0xf2, 0x39, 0xaf, 0x71, 0x78, 0x08, 0x89, 0x50, 0x5f, 0x92, 0x60, 0x3e, 0xea, 0x01, 0x1d, 0x0a,
	0x71, 0xea, 0xf3, 0xcc, 0x2e, 0x7b, 0x7b, 0x38, 0x62, 0xbf, 0xaa, 0xd0, 0x52, 0xe7, 0xf7, 0x0e,
	0x83, 0xcc, 0x89, 0xaa, 0x22, 0x9e, 0x38, 0x86, 0x55, 0xd5, 0xfb, 0xe5, 0x64, 0x58, 0x55, 0x7d,
	0xde, 0x4c, 0xfa, 0x55, 0xd5, 0x0e, 0x13, 0x12, 0x55, 0xfd, 0x01, 0x2b, 0x05, 0x8c, 0x7a, 0xf7,
	0x88, 0xd6, 0x23, 0x4c, 0xb5, 0xcf, 0xbb, 0xca, 0xec, 0xc6, 0xd0, 0xf4, 0x5c, 0xc0, 0x2b, 0x54,
	0xc0, 0x0b, 0x68, 0x85, 0x1b, 0x79, 0xa4, 0x14, 0x9f, 0x0c, 0x3f, 0x2d, 0xbc, 0x3e, 0xe8, 0xb5,
	0x11, 0x17, 0xe8, 0xc6, 0x40, 0x3a, 0x2e, 0xc8, 0x0a, 0x15, 0x64, 0x01, 0xcd, 0xd1, 0x9f, 0xa3,
	0x0c, 0x70, 0x6b, 0x78, 0x1f, 0xcd, 0xad, 0xf6, 0x7e, 0xb5, 0xc3, 0x99, 0x5e, 0xee, 0x43, 0xc1,
	0xd9, 0x2d, 0x50, 0x76, 0x33, 0x68, 0x8a, 0xb0, 0x33, 0x5a, 0xa2, 0xef, 0x13, 0x98, 0xf2, 0x3d,
	0x64, 0x09, 0x7b, 0x94, 0xa8, 0x17, 0x3c, 0x61, 0x8f, 0x12, 0xf9, 0x1a, 0xc6, 0xef, 0x51, 0x6c,
	0x1f, 0x9f, 0x4f, 0xc2, 0x94, 0xaf, 0x74, 0x3f, 0xcc, 0x38, 0xaa, 0xe4, 0x3f, 0xcc, 0x38, 0xb2,
	0xfe, 0x5f, 0xbe, 0x4c, 0x19, 0xaf, 0xa0, 0x65, 0xc2, 0x98, 0x97, 0xe5, 0x6f, 0x38, 0x3e, 0x7e,
	0x5f, 0xe9, 0x2c, 0x0d, 0x5f, 0x91, 0x78, 0xaf, 0xa5, 0x11, 0x55, 0x97, 0xdf, 0x6b, 0x69, 0x44,
	0x16, 0xde, 0xcb, 0x6b, 0x54, 0xa6, 0xab, 0xf2, 0x25, 0xaf, 0x4c, 0xed, 0x70, 0x03, 0xb2, 0x44,
	0xfe, 0x98, 0x2d, 0x91, 0xa8, 0x5a, 0xf9, 0xc8, 0x25, 0xd2, 0xa7, 0x48, 0x3f, 0x72, 0x89, 0xf4,
	0x2b, 0xc2, 0x97, 0x6f, 0x51, 0x41, 0xaf, 0xa1, 0x2b, 0x5e, 0x41, 0x1b, 0x3d, 0xa4, 0xf9, 0x47,
	0x09, 0xae, 0x0d, 0x55, 0x56, 0x8e, 0x5e, 0x7f, 0xc2, 0x6a, 0x74, 0x36, 0x8a, 0x0f, 0xff, 0x44,
	0xb5, 0xec, 0xf2, 0x5d, 0x3a, 0xa6, 0x5b, 0xe8, 0xd9, 0x4e, 0x44, 0x31, 0x50, 0xde, 0x33, 0x98,
	0xf4, 0x3c, 0x19, 0x0a, 0x87, 0x1a, 0xe1, 0xd7, 0x4d, 0xe1, 0x50, 0x23, 0xe2, 0xcd, 0x91, 0xb0,
	0x4d, 0x79, 0x91, 0xfd, 0x54, 0x2e, 0x31, 0xc6, 0x8d, 0x76, 0x97, 0x8e, 0x4c, 0x7f, 0x87, 0x35,
	0xab, 0xda, 0xec, 0xc1, 0xda, 0xfb, 0x6e, 0xa8, 0x17, 0x6b, 0xdf, 0x1b, 0x9d, 0x3e, 0xac, 0x29,
	0x1d, 0x61, 0xfd, 0x79, 0x16, 0xef, 0xf8, 0x7f, 0xc3, 0x33, 0x32, 0xde, 0x89, 0xfc, 0x55, 0xd1,
	0xc8, 0x78, 0x27, 0xfa, 0x07, 0x41, 0xc5, 0x5e, 0x81, 0xb2, 0x7c, 0x4e, 0x04, 0xd9, 0x2e, 0xd6,
	0xea, 0xd8, 0xde, 0xb2, 0xc8, 0x6a, 0xfc, 0xb4, 0x04, 0x33, 0x81, 0xb2, 0xf1, 0xb0, 0x2b, 0x8e,
	0x2e, 0x7c, 0x0f, 0xbb, 0xe2, 0x1e, 0xf5, 0xe7, 0xfe, 0x18, 0xbc, 0xe6, 0x10, 0x59, 0x7c, 0x0c,
	0xbf, 0xcc, 0x0b, 0x88, 0xc3, 0xaf, 0x07, 0x6e, 0x47, 0xb0, 0xe8, 0xf9, 0xb6, 0x21, 0x7b, 0x67,
	0x48, 0xea, 0x28, 0x27, 0xd6, 0x88, 0xe4, 0x7f, 0x06, 0x69, 0x6f, 0x01, 0x78, 0x38, 0x06, 0x8f,
	0xa8, 0x5d, 0x0f, 0xc7, 0xe0, 0x51, 0x35, 0xe4, 0x42, 0x29, 0xf2, 0x1c, 0x57, 0xca, 0x43, 0x0f,
	0x11, 0x31, 0x94, 0xf7, 0x68, 0x2c, 0xda, 0xfd, 0x75, 0xdd, 0xc8, 0x58, 0x34, 0xf4, 0xd3, 0xc0,
	0x91, 0xb1, 0x68, 0xf8, 0x27, 0x7a, 0xe5, 0xf3, 0x94, 0xfb, 0x22, 0x9a, 0xef, 0x4e, 0x89, 0x87,
	0x15, 0xe3, 0xdd, 0x2d, 0xe8, 0x8e, 0xe4, 0x1d, 0x2a, 0x6a, 0x8f, 0xe4, 0x1d, 0xae, 0x0a, 0x8f,
	0xe2, 0xed, 0x61, 0xf5, 0xdb, 0xec, 0x47, 0x8f, 0x43, 0x15, 0xc7, 0xe1, 0x40, 0xaf, 0x4f, 0xd5,
	0x76, 0xf6, 0xf6, 0x70, 0xc4, 0x51, 0x41, 0x0b, 0x93, 0x28, 0xcc, 0xff, 0x77, 0x24, 0x58, 0x62,
	0xe9, 0xbb, 0x70, 0xd6, 0x91, 0x2f, 0xe0, 0x6e, 0xce, 0x8f, 0x11, 0xfa, 0x33, 0x7f, 0xde, 0x05,
	0xdc, 0x9f, 0x92, 0x8b, 0x75, 0x83, 0x8a, 0x75, 0x59, 0x3e, 0xcf, 0xb6, 0xf7, 0x68, 0xd6, 0xc4,
	0x56, 0xbe, 0x2e, 0xb1, 0x1a, 0xf6, 0x1e, 0xd9, 0x50, 0xb4, 0x39, 0x52, 0xea, 0x94, 0xc9, 0xf9,
	0xfc, 0x13, 0xa4, 0x5b, 0x85, 0xc4, 0xe8, 0x92, 0x70, 0x39, 0xbd, 0x24, 0xe2, 0x31, 0x6a, 0x54,
	0xc9, 0x66, 0xe4, 0x06, 0xdc, 0xa7, 0x24, 0x34, 0x72, 0x03, 0xee, 0x57, 0x0b, 0x1a, 0x8a, 0x51,
	0x23, 0xa5, 0xf8, 0x33, 0x56, 0xf9, 0xde, 0xb3, 0x86, 0x0c, 0x3d, 0x1f, 0xe9, 0xfe, 0xfa, 0x57,
	0xa6, 0x65, 0x5f, 0x18, 0xad, 0x11, 0x17, 0xf8, 0x26, 0x15, 0x58, 0x46, 0xab, 0x5c, 0xe0, 0xde,
	0x42, 0x7d, 0x53, 0x82, 0x4b, 0x03, 0xaa, 0xa6, 0xd0, 0x8b, 0xe1, 0x2a, 0xaf, 0x61, 0x8a, 0xb4,
	0xb2, 0x2f, 0x8d, 0xdc, 0x2e, 0x2a, 0xe0, 0xd1, 0x07, 0x48, 0xc7, 0x6d, 0xb9, 0x57, 0x91, 0x5b,
	0xa4, 0x2d, 0x0f, 0x28, 0x9c, 0xcb, 0x3e, 0x3f, 0x52, 0x9b, 0x1e, 0xb6, 0xdc, 0x53, 0xa2, 0xaf,
	0x48, 0xbc, 0x88, 0x22, 0x68, 0x47, 0xe1, 0xed, 0xab, 0x5f, 0x41, 0x67, 0x78, 0xfb, 0xea, 0x5b,
	0xc9, 0x29, 0xb2, 0x48, 0x32, 0xdd, 0xbe, 0x6a, 0x51, 0xa4, 0xc4, 0x35, 0xf0, 0x6c, 0x5b, 0xf0,
	0x8e, 0x32, 0x2a, 0x8c, 0x88, 0xbe, 0xf6, 0x8c, 0xcc, 0x6c, 0xf5, 0xb8, 0xc2, 0x0b, 0x65, 0xdb,
	0x82, 0x6c, 0xff, 0x44, 0xfc, 0x64, 0x7b, 0xd4, 0x85, 0x19, 0x7a, 0x2e, 0x52, 0x01, 0x7d, 0xee,
	0xeb, 0xb2, 0x77, 0x47, 0x68, 0xe1, 0x5f, 0x4b, 0xf2, 0x85, 0x8e, 0xda, 0xa2, 0xc8, 0x89, 0xea,
	0x3e, 0x23, 0x41, 0x26, 0x58, 0xd5, 0x84, 0xa2, 0x82, 0x9e, 0xa8, 0x3a, 0xa9, 0xec, 0xcd, 0xc1,
	0x84, 0x51, 0xfb, 0x61, 0x23, 0xc8, 0xf0, 0x97, 0x60, 0xda, 0x5f, 0x73, 0x83, 0xae, 0x45, 0x0e,
	0x3a, 0x58, 0xc1, 0x93, 0xbd, 0x3e, 0x88, 0x8c, 0xb3, 0xbf, 0x40, 0xd9, 0x9f, 0x93, 0x51, 0x47,
	0x21, 0x1d, 0x1a, 0xa2, 0x85, 0xcf, 0x4a, 0x30, 0x1b, 0xfa, 0x95, 0xfd, 0x70, 0xc0, 0xda, 0xeb,
	0x67, 0xfd, 0xc3, 0x01, 0x6b, 0xcf, 0x9f, 0xec, 0xf7, 0xa7, 0xa6, 0x6a, 0x41, 0x32, 0x22, 0xcc,
	0x31, 0xa4, 0xbd, 0xff, 0x53, 0x21, 0x1c, 0x8f, 0x45, 0xfc, 0xf7, 0x86, 0x70, 0x3c, 0x16, 0xf5,
	0x6f, 0x19, 0x44, 0xbe, 0x40, 0xce, 0x30, 0x27, 0xd5, 0xa5, 0xe0, 0xc1, 0x98, 0xef, 0x5f, 0x4b,
	0xa0, 0xc8, 0x3e, 0x83, 0xff, 0xa8, 0x22, 0x7b, 0x6d, 0x00, 0x95, 0xdf, 0x00, 0xe4, 0x59, 0xc1,
	0xba, 0x43, 0x42, 0x78, 0xff, 0xa6, 0x04, 0xb3, 0x85, 0x53, 0x5c, 0xa3, 0x8f, 0xae, 0xf3, 0x96,
	0xe9, 0xe2, 0x53, 0xd7, 0x41, 0xcc, 0x59, 0xf0, 0xff, 0xc7, 0xd1, 0xc9, 0x64, 0x85, 0xe8, 0x84,
	0x24, 0xeb, 0xc3, 0x92, 0x47, 0x4d, 0x05, 0x0e, 0x92, 0xbd, 0x2a, 0xad, 0x6d, 0xed, 0x7f, 0xeb,
	0x87, 0x17, 0xa5, 0xef, 0xfe, 0xf0, 0xa2, 0xf4, 0x83, 0x1f, 0x5e, 0x94, 0xbe, 0xf0, 0xfe, 0xc5,
	0x67, 0xbe, 0xfb, 0xfe, 0xc5, 0x67, 0xfe, 0xe9, 0xfd, 0x8b, 0xcf, 0x7c, 0xec, 0xc5, 0x86, 0xee,
	0x1e, 0xb5, 0x0f, 0xd7, 0x6b, 0x56, 0x73, 0xa3, 0x86, 0x0d, 0x6c, 0xdf, 0x31, 0xb1, 0x7b, 0x62,
	0xd9, 0x8f, 0x36, 0x9c, 0x86, 0x79, 0xe7, 0x78, 0xf3, 0x4e, 0xe0, 0x5f, 0xac, 0x6c, 0x9c, 0xe0,
	0x43, 0xad, 0xa5, 0x1f, 0x26, 0xe9, 0x7f, 0xfd, 0x78, 0xfe, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xbe, 0xd8, 0xcb, 0x33, 0x83, 0x65, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebClient interface {
	// get chain and token selector
	// after getting these info, remember to record them(especially decimal)
	GetTransferConfigs(ctx context.Context, in *GetTransferConfigsRequest, opts ...grpc.CallOption) (*GetTransferConfigsResponse, error)
	// include disabled tokens
	GetTransferConfigsForAll(ctx context.Context, in *GetTransferConfigsRequest, opts ...grpc.CallOption) (*GetTransferConfigsResponse, error)
	// get chain and token info
	GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoResponse, error)
	// estimate transfer fee
	EstimateAmt(ctx context.Context, in *EstimateAmtRequest, opts ...grpc.CallOption) (*EstimateAmtResponse, error)
	GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error)
	// LP
	//  get LP table info
	GetLPInfoList(ctx context.Context, in *GetLPInfoListRequest, opts ...grpc.CallOption) (*GetLPInfoListResponse, error)
	// https://github.com/celer-network/sgn-v2/blob/main/proto/sgn/cbridge/v1/tx.proto#L10
	//  remove liquidity or refund transfer calling this api
	WithdrawLiquidity(ctx context.Context, in *WithdrawLiquidityRequest, opts ...grpc.CallOption) (*WithdrawLiquidityResponse, error)
	// estimate transfer fee
	// front end need post method for this api
	EstimateWithdrawAmt(ctx context.Context, in *EstimateWithdrawAmtRequest, opts ...grpc.CallOption) (*EstimateWithdrawAmtResponse, error)
	// bcz it's time cost for sgn voting, so we need a polling api to check the status
	QueryLiquidityStatus(ctx context.Context, in *QueryLiquidityStatusRequest, opts ...grpc.CallOption) (*QueryLiquidityStatusResponse, error)
	// web will use this api to init reward claim
	UnlockFarmingReward(ctx context.Context, in *UnlockFarmingRewardRequest, opts ...grpc.CallOption) (*UnlockFarmingRewardResponse, error)
	// web polling this api after UnlockFarmingReward
	GetFarmingRewardDetails(ctx context.Context, in *GetFarmingRewardDetailsRequest, opts ...grpc.CallOption) (*GetFarmingRewardDetailsResponse, error)
	// History
	TransferHistory(ctx context.Context, in *TransferHistoryRequest, opts ...grpc.CallOption) (*TransferHistoryResponse, error)
	LPHistory(ctx context.Context, in *LPHistoryRequest, opts ...grpc.CallOption) (*LPHistoryResponse, error)
	RewardingData(ctx context.Context, in *RewardingDataRequest, opts ...grpc.CallOption) (*RewardingDataResponse, error)
	// staking api
	StakingConfig(ctx context.Context, in *StakingConfigRequest, opts ...grpc.CallOption) (*StakingConfigResponse, error)
	// web will use this api to init distribution reward claim
	UnlockStakingReward(ctx context.Context, in *UnlockStakingRewardRequest, opts ...grpc.CallOption) (*UnlockStakingRewardResponse, error)
	// web polling this api after UnlockStakingReward
	GetStakingRewardDetails(ctx context.Context, in *GetStakingRewardDetailsRequest, opts ...grpc.CallOption) (*GetStakingRewardDetailsResponse, error)
	// Safeguarding apis
	GetTotalLiquidityProviderTokenBalance(ctx context.Context, in *GetTotalLiquidityProviderTokenBalanceRequest, opts ...grpc.CallOption) (*GetTotalLiquidityProviderTokenBalanceResponse, error)
	// configs api, apis in these service need sign valid addr
	UpdateChain(ctx context.Context, in *UpdateChainRequest, opts ...grpc.CallOption) (*UpdateChainResponse, error)
	UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateTokenResponse, error)
	GetCampaignScores(ctx context.Context, in *GetCampaignScoresRequest, opts ...grpc.CallOption) (*GetCampaignScoresResponse, error)
	// cs tools
	GetInfoByTxHash(ctx context.Context, in *GetInfoByTxHashRequest, opts ...grpc.CallOption) (*GetInfoByTxHashResponse, error)
	GetAbnormalStatusInfo(ctx context.Context, in *GetAbnormalStatusInfoRequest, opts ...grpc.CallOption) (*GetAbnormalStatusInfoResponse, error)
	// only CA_USE_RESYNC_TOOL and CA_USE_RESIGN_TOOL will be handled
	FixEventMiss(ctx context.Context, in *FixEventMissRequest, opts ...grpc.CallOption) (*FixEventMissResponse, error)
	GetUsrBalance(ctx context.Context, in *GetUsrBalanceRequest, opts ...grpc.CallOption) (*GetUsrBalanceResponse, error)
	// read all configs
	GetAllConfigs(ctx context.Context, in *GetAllConfigsRequest, opts ...grpc.CallOption) (*GetAllConfigsResponse, error)
	// read onchain config of cbridge contract
	GetCbrConfigsOnChain(ctx context.Context, in *GetCbrConfigsOnChainRequest, opts ...grpc.CallOption) (*GetCbrConfigsOnChainResponse, error)
	ReportCurrentBlockNumber(ctx context.Context, in *relayer.ReportSgnAnalyticsRequest, opts ...grpc.CallOption) (*relayer.ReportSgnAnalyticsResponse, error)
	GetCurrentBlockNumberByNode(ctx context.Context, in *GetCurrentBlockNumberByNodeRequest, opts ...grpc.CallOption) (*GetCurrentBlockNumberByNodeResponse, error)
	// incentive rewards
	GetRetentionRewardsInfo(ctx context.Context, in *GetRetentionRewardsInfoRequest, opts ...grpc.CallOption) (*GetRetentionRewardsInfoResponse, error)
	GetIncentiveCampaignCelrRank(ctx context.Context, in *GetIncentiveCampaignCelrRankRequest, opts ...grpc.CallOption) (*GetIncentiveCampaignCelrRankResponse, error)
	InIncentiveCampaignBnbWhiteList(ctx context.Context, in *InIncentiveCampaignBnbWhiteListRequest, opts ...grpc.CallOption) (*InIncentiveCampaignBnbWhiteListResponse, error)
	GetIncentiveCampaignBnbRank(ctx context.Context, in *GetIncentiveCampaignBnbRankRequest, opts ...grpc.CallOption) (*GetIncentiveCampaignBnbRankResponse, error)
	ClaimRetentionRewards(ctx context.Context, in *ClaimRetentionRewardsRequest, opts ...grpc.CallOption) (*ClaimRetentionRewardsResponse, error)
	GetBscCampaignInfo(ctx context.Context, in *GetBscCampaignInfoRequest, opts ...grpc.CallOption) (*GetBscCampaignInfoResponse, error)
	ClaimGetBscCampaignReward(ctx context.Context, in *ClaimGetBscCampaignRewardRequest, opts ...grpc.CallOption) (*ClaimGetBscCampaignRewardResponse, error)
	GetFeeRebateInfo(ctx context.Context, in *GetFeeRebateInfoRequest, opts ...grpc.CallOption) (*GetFeeRebateInfoResponse, error)
	ClaimFeeRebate(ctx context.Context, in *ClaimFeeRebateRequest, opts ...grpc.CallOption) (*ClaimFeeRebateResponse, error)
	// ClaimFee ClaimPegBridgeFee a method for SGN delegators to trigger a claim of pegbridge fee.
	ClaimPegBridgeFee(ctx context.Context, in *ClaimPegBridgeFeeRequest, opts ...grpc.CallOption) (*ClaimPegBridgeFeeResponse, error)
	InitWithdraw(ctx context.Context, in *InitWithdrawRequest, opts ...grpc.CallOption) (*InitWithdrawResponse, error)
	InitPegRefund(ctx context.Context, in *InitPegRefundRequest, opts ...grpc.CallOption) (*InitPegRefundResponse, error)
	// proxy method for executors to fetch active execution contexts without knowing sgn node url
	ExecutionContexts(ctx context.Context, in *types5.QueryExecutionContextsRequest, opts ...grpc.CallOption) (*types5.QueryExecutionContextsResponse, error)
}

type webClient struct {
	cc grpc1.ClientConn
}

func NewWebClient(cc grpc1.ClientConn) WebClient {
	return &webClient{cc}
}

func (c *webClient) GetTransferConfigs(ctx context.Context, in *GetTransferConfigsRequest, opts ...grpc.CallOption) (*GetTransferConfigsResponse, error) {
	out := new(GetTransferConfigsResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetTransferConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetTransferConfigsForAll(ctx context.Context, in *GetTransferConfigsRequest, opts ...grpc.CallOption) (*GetTransferConfigsResponse, error) {
	out := new(GetTransferConfigsResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetTransferConfigsForAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoResponse, error) {
	out := new(GetTokenInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetTokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) EstimateAmt(ctx context.Context, in *EstimateAmtRequest, opts ...grpc.CallOption) (*EstimateAmtResponse, error) {
	out := new(EstimateAmtResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/EstimateAmt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error) {
	out := new(GetTransferStatusResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetTransferStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetLPInfoList(ctx context.Context, in *GetLPInfoListRequest, opts ...grpc.CallOption) (*GetLPInfoListResponse, error) {
	out := new(GetLPInfoListResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetLPInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) WithdrawLiquidity(ctx context.Context, in *WithdrawLiquidityRequest, opts ...grpc.CallOption) (*WithdrawLiquidityResponse, error) {
	out := new(WithdrawLiquidityResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/WithdrawLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) EstimateWithdrawAmt(ctx context.Context, in *EstimateWithdrawAmtRequest, opts ...grpc.CallOption) (*EstimateWithdrawAmtResponse, error) {
	out := new(EstimateWithdrawAmtResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/EstimateWithdrawAmt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) QueryLiquidityStatus(ctx context.Context, in *QueryLiquidityStatusRequest, opts ...grpc.CallOption) (*QueryLiquidityStatusResponse, error) {
	out := new(QueryLiquidityStatusResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/QueryLiquidityStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) UnlockFarmingReward(ctx context.Context, in *UnlockFarmingRewardRequest, opts ...grpc.CallOption) (*UnlockFarmingRewardResponse, error) {
	out := new(UnlockFarmingRewardResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/UnlockFarmingReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetFarmingRewardDetails(ctx context.Context, in *GetFarmingRewardDetailsRequest, opts ...grpc.CallOption) (*GetFarmingRewardDetailsResponse, error) {
	out := new(GetFarmingRewardDetailsResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetFarmingRewardDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) TransferHistory(ctx context.Context, in *TransferHistoryRequest, opts ...grpc.CallOption) (*TransferHistoryResponse, error) {
	out := new(TransferHistoryResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/TransferHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) LPHistory(ctx context.Context, in *LPHistoryRequest, opts ...grpc.CallOption) (*LPHistoryResponse, error) {
	out := new(LPHistoryResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/LPHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) RewardingData(ctx context.Context, in *RewardingDataRequest, opts ...grpc.CallOption) (*RewardingDataResponse, error) {
	out := new(RewardingDataResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/RewardingData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) StakingConfig(ctx context.Context, in *StakingConfigRequest, opts ...grpc.CallOption) (*StakingConfigResponse, error) {
	out := new(StakingConfigResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/StakingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) UnlockStakingReward(ctx context.Context, in *UnlockStakingRewardRequest, opts ...grpc.CallOption) (*UnlockStakingRewardResponse, error) {
	out := new(UnlockStakingRewardResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/UnlockStakingReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetStakingRewardDetails(ctx context.Context, in *GetStakingRewardDetailsRequest, opts ...grpc.CallOption) (*GetStakingRewardDetailsResponse, error) {
	out := new(GetStakingRewardDetailsResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetStakingRewardDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetTotalLiquidityProviderTokenBalance(ctx context.Context, in *GetTotalLiquidityProviderTokenBalanceRequest, opts ...grpc.CallOption) (*GetTotalLiquidityProviderTokenBalanceResponse, error) {
	out := new(GetTotalLiquidityProviderTokenBalanceResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetTotalLiquidityProviderTokenBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) UpdateChain(ctx context.Context, in *UpdateChainRequest, opts ...grpc.CallOption) (*UpdateChainResponse, error) {
	out := new(UpdateChainResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/UpdateChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateTokenResponse, error) {
	out := new(UpdateTokenResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetCampaignScores(ctx context.Context, in *GetCampaignScoresRequest, opts ...grpc.CallOption) (*GetCampaignScoresResponse, error) {
	out := new(GetCampaignScoresResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetCampaignScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetInfoByTxHash(ctx context.Context, in *GetInfoByTxHashRequest, opts ...grpc.CallOption) (*GetInfoByTxHashResponse, error) {
	out := new(GetInfoByTxHashResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetInfoByTxHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetAbnormalStatusInfo(ctx context.Context, in *GetAbnormalStatusInfoRequest, opts ...grpc.CallOption) (*GetAbnormalStatusInfoResponse, error) {
	out := new(GetAbnormalStatusInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetAbnormalStatusInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) FixEventMiss(ctx context.Context, in *FixEventMissRequest, opts ...grpc.CallOption) (*FixEventMissResponse, error) {
	out := new(FixEventMissResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/FixEventMiss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetUsrBalance(ctx context.Context, in *GetUsrBalanceRequest, opts ...grpc.CallOption) (*GetUsrBalanceResponse, error) {
	out := new(GetUsrBalanceResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetUsrBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetAllConfigs(ctx context.Context, in *GetAllConfigsRequest, opts ...grpc.CallOption) (*GetAllConfigsResponse, error) {
	out := new(GetAllConfigsResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetAllConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetCbrConfigsOnChain(ctx context.Context, in *GetCbrConfigsOnChainRequest, opts ...grpc.CallOption) (*GetCbrConfigsOnChainResponse, error) {
	out := new(GetCbrConfigsOnChainResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetCbrConfigsOnChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ReportCurrentBlockNumber(ctx context.Context, in *relayer.ReportSgnAnalyticsRequest, opts ...grpc.CallOption) (*relayer.ReportSgnAnalyticsResponse, error) {
	out := new(relayer.ReportSgnAnalyticsResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/ReportCurrentBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetCurrentBlockNumberByNode(ctx context.Context, in *GetCurrentBlockNumberByNodeRequest, opts ...grpc.CallOption) (*GetCurrentBlockNumberByNodeResponse, error) {
	out := new(GetCurrentBlockNumberByNodeResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetCurrentBlockNumberByNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetRetentionRewardsInfo(ctx context.Context, in *GetRetentionRewardsInfoRequest, opts ...grpc.CallOption) (*GetRetentionRewardsInfoResponse, error) {
	out := new(GetRetentionRewardsInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetRetentionRewardsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetIncentiveCampaignCelrRank(ctx context.Context, in *GetIncentiveCampaignCelrRankRequest, opts ...grpc.CallOption) (*GetIncentiveCampaignCelrRankResponse, error) {
	out := new(GetIncentiveCampaignCelrRankResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetIncentiveCampaignCelrRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) InIncentiveCampaignBnbWhiteList(ctx context.Context, in *InIncentiveCampaignBnbWhiteListRequest, opts ...grpc.CallOption) (*InIncentiveCampaignBnbWhiteListResponse, error) {
	out := new(InIncentiveCampaignBnbWhiteListResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/InIncentiveCampaignBnbWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetIncentiveCampaignBnbRank(ctx context.Context, in *GetIncentiveCampaignBnbRankRequest, opts ...grpc.CallOption) (*GetIncentiveCampaignBnbRankResponse, error) {
	out := new(GetIncentiveCampaignBnbRankResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetIncentiveCampaignBnbRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ClaimRetentionRewards(ctx context.Context, in *ClaimRetentionRewardsRequest, opts ...grpc.CallOption) (*ClaimRetentionRewardsResponse, error) {
	out := new(ClaimRetentionRewardsResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/ClaimRetentionRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetBscCampaignInfo(ctx context.Context, in *GetBscCampaignInfoRequest, opts ...grpc.CallOption) (*GetBscCampaignInfoResponse, error) {
	out := new(GetBscCampaignInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetBscCampaignInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ClaimGetBscCampaignReward(ctx context.Context, in *ClaimGetBscCampaignRewardRequest, opts ...grpc.CallOption) (*ClaimGetBscCampaignRewardResponse, error) {
	out := new(ClaimGetBscCampaignRewardResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/ClaimGetBscCampaignReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetFeeRebateInfo(ctx context.Context, in *GetFeeRebateInfoRequest, opts ...grpc.CallOption) (*GetFeeRebateInfoResponse, error) {
	out := new(GetFeeRebateInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/GetFeeRebateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ClaimFeeRebate(ctx context.Context, in *ClaimFeeRebateRequest, opts ...grpc.CallOption) (*ClaimFeeRebateResponse, error) {
	out := new(ClaimFeeRebateResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/ClaimFeeRebate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ClaimPegBridgeFee(ctx context.Context, in *ClaimPegBridgeFeeRequest, opts ...grpc.CallOption) (*ClaimPegBridgeFeeResponse, error) {
	out := new(ClaimPegBridgeFeeResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/ClaimPegBridgeFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) InitWithdraw(ctx context.Context, in *InitWithdrawRequest, opts ...grpc.CallOption) (*InitWithdrawResponse, error) {
	out := new(InitWithdrawResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/InitWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) InitPegRefund(ctx context.Context, in *InitPegRefundRequest, opts ...grpc.CallOption) (*InitPegRefundResponse, error) {
	out := new(InitPegRefundResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/InitPegRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) ExecutionContexts(ctx context.Context, in *types5.QueryExecutionContextsRequest, opts ...grpc.CallOption) (*types5.QueryExecutionContextsResponse, error) {
	out := new(types5.QueryExecutionContextsResponse)
	err := c.cc.Invoke(ctx, "/sgn.gateway.v1.Web/ExecutionContexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServer is the server API for Web service.
type WebServer interface {
	// get chain and token selector
	// after getting these info, remember to record them(especially decimal)
	GetTransferConfigs(context.Context, *GetTransferConfigsRequest) (*GetTransferConfigsResponse, error)
	// include disabled tokens
	GetTransferConfigsForAll(context.Context, *GetTransferConfigsRequest) (*GetTransferConfigsResponse, error)
	// get chain and token info
	GetTokenInfo(context.Context, *GetTokenInfoRequest) (*GetTokenInfoResponse, error)
	// estimate transfer fee
	EstimateAmt(context.Context, *EstimateAmtRequest) (*EstimateAmtResponse, error)
	GetTransferStatus(context.Context, *GetTransferStatusRequest) (*GetTransferStatusResponse, error)
	// LP
	//  get LP table info
	GetLPInfoList(context.Context, *GetLPInfoListRequest) (*GetLPInfoListResponse, error)
	// https://github.com/celer-network/sgn-v2/blob/main/proto/sgn/cbridge/v1/tx.proto#L10
	//  remove liquidity or refund transfer calling this api
	WithdrawLiquidity(context.Context, *WithdrawLiquidityRequest) (*WithdrawLiquidityResponse, error)
	// estimate transfer fee
	// front end need post method for this api
	EstimateWithdrawAmt(context.Context, *EstimateWithdrawAmtRequest) (*EstimateWithdrawAmtResponse, error)
	// bcz it's time cost for sgn voting, so we need a polling api to check the status
	QueryLiquidityStatus(context.Context, *QueryLiquidityStatusRequest) (*QueryLiquidityStatusResponse, error)
	// web will use this api to init reward claim
	UnlockFarmingReward(context.Context, *UnlockFarmingRewardRequest) (*UnlockFarmingRewardResponse, error)
	// web polling this api after UnlockFarmingReward
	GetFarmingRewardDetails(context.Context, *GetFarmingRewardDetailsRequest) (*GetFarmingRewardDetailsResponse, error)
	// History
	TransferHistory(context.Context, *TransferHistoryRequest) (*TransferHistoryResponse, error)
	LPHistory(context.Context, *LPHistoryRequest) (*LPHistoryResponse, error)
	RewardingData(context.Context, *RewardingDataRequest) (*RewardingDataResponse, error)
	// staking api
	StakingConfig(context.Context, *StakingConfigRequest) (*StakingConfigResponse, error)
	// web will use this api to init distribution reward claim
	UnlockStakingReward(context.Context, *UnlockStakingRewardRequest) (*UnlockStakingRewardResponse, error)
	// web polling this api after UnlockStakingReward
	GetStakingRewardDetails(context.Context, *GetStakingRewardDetailsRequest) (*GetStakingRewardDetailsResponse, error)
	// Safeguarding apis
	GetTotalLiquidityProviderTokenBalance(context.Context, *GetTotalLiquidityProviderTokenBalanceRequest) (*GetTotalLiquidityProviderTokenBalanceResponse, error)
	// configs api, apis in these service need sign valid addr
	UpdateChain(context.Context, *UpdateChainRequest) (*UpdateChainResponse, error)
	UpdateToken(context.Context, *UpdateTokenRequest) (*UpdateTokenResponse, error)
	GetCampaignScores(context.Context, *GetCampaignScoresRequest) (*GetCampaignScoresResponse, error)
	// cs tools
	GetInfoByTxHash(context.Context, *GetInfoByTxHashRequest) (*GetInfoByTxHashResponse, error)
	GetAbnormalStatusInfo(context.Context, *GetAbnormalStatusInfoRequest) (*GetAbnormalStatusInfoResponse, error)
	// only CA_USE_RESYNC_TOOL and CA_USE_RESIGN_TOOL will be handled
	FixEventMiss(context.Context, *FixEventMissRequest) (*FixEventMissResponse, error)
	GetUsrBalance(context.Context, *GetUsrBalanceRequest) (*GetUsrBalanceResponse, error)
	// read all configs
	GetAllConfigs(context.Context, *GetAllConfigsRequest) (*GetAllConfigsResponse, error)
	// read onchain config of cbridge contract
	GetCbrConfigsOnChain(context.Context, *GetCbrConfigsOnChainRequest) (*GetCbrConfigsOnChainResponse, error)
	ReportCurrentBlockNumber(context.Context, *relayer.ReportSgnAnalyticsRequest) (*relayer.ReportSgnAnalyticsResponse, error)
	GetCurrentBlockNumberByNode(context.Context, *GetCurrentBlockNumberByNodeRequest) (*GetCurrentBlockNumberByNodeResponse, error)
	// incentive rewards
	GetRetentionRewardsInfo(context.Context, *GetRetentionRewardsInfoRequest) (*GetRetentionRewardsInfoResponse, error)
	GetIncentiveCampaignCelrRank(context.Context, *GetIncentiveCampaignCelrRankRequest) (*GetIncentiveCampaignCelrRankResponse, error)
	InIncentiveCampaignBnbWhiteList(context.Context, *InIncentiveCampaignBnbWhiteListRequest) (*InIncentiveCampaignBnbWhiteListResponse, error)
	GetIncentiveCampaignBnbRank(context.Context, *GetIncentiveCampaignBnbRankRequest) (*GetIncentiveCampaignBnbRankResponse, error)
	ClaimRetentionRewards(context.Context, *ClaimRetentionRewardsRequest) (*ClaimRetentionRewardsResponse, error)
	GetBscCampaignInfo(context.Context, *GetBscCampaignInfoRequest) (*GetBscCampaignInfoResponse, error)
	ClaimGetBscCampaignReward(context.Context, *ClaimGetBscCampaignRewardRequest) (*ClaimGetBscCampaignRewardResponse, error)
	GetFeeRebateInfo(context.Context, *GetFeeRebateInfoRequest) (*GetFeeRebateInfoResponse, error)
	ClaimFeeRebate(context.Context, *ClaimFeeRebateRequest) (*ClaimFeeRebateResponse, error)
	// ClaimFee ClaimPegBridgeFee a method for SGN delegators to trigger a claim of pegbridge fee.
	ClaimPegBridgeFee(context.Context, *ClaimPegBridgeFeeRequest) (*ClaimPegBridgeFeeResponse, error)
	InitWithdraw(context.Context, *InitWithdrawRequest) (*InitWithdrawResponse, error)
	InitPegRefund(context.Context, *InitPegRefundRequest) (*InitPegRefundResponse, error)
	// proxy method for executors to fetch active execution contexts without knowing sgn node url
	ExecutionContexts(context.Context, *types5.QueryExecutionContextsRequest) (*types5.QueryExecutionContextsResponse, error)
}

// UnimplementedWebServer can be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (*UnimplementedWebServer) GetTransferConfigs(ctx context.Context, req *GetTransferConfigsRequest) (*GetTransferConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferConfigs not implemented")
}
func (*UnimplementedWebServer) GetTransferConfigsForAll(ctx context.Context, req *GetTransferConfigsRequest) (*GetTransferConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferConfigsForAll not implemented")
}
func (*UnimplementedWebServer) GetTokenInfo(ctx context.Context, req *GetTokenInfoRequest) (*GetTokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenInfo not implemented")
}
func (*UnimplementedWebServer) EstimateAmt(ctx context.Context, req *EstimateAmtRequest) (*EstimateAmtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateAmt not implemented")
}
func (*UnimplementedWebServer) GetTransferStatus(ctx context.Context, req *GetTransferStatusRequest) (*GetTransferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferStatus not implemented")
}
func (*UnimplementedWebServer) GetLPInfoList(ctx context.Context, req *GetLPInfoListRequest) (*GetLPInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLPInfoList not implemented")
}
func (*UnimplementedWebServer) WithdrawLiquidity(ctx context.Context, req *WithdrawLiquidityRequest) (*WithdrawLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawLiquidity not implemented")
}
func (*UnimplementedWebServer) EstimateWithdrawAmt(ctx context.Context, req *EstimateWithdrawAmtRequest) (*EstimateWithdrawAmtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateWithdrawAmt not implemented")
}
func (*UnimplementedWebServer) QueryLiquidityStatus(ctx context.Context, req *QueryLiquidityStatusRequest) (*QueryLiquidityStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLiquidityStatus not implemented")
}
func (*UnimplementedWebServer) UnlockFarmingReward(ctx context.Context, req *UnlockFarmingRewardRequest) (*UnlockFarmingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockFarmingReward not implemented")
}
func (*UnimplementedWebServer) GetFarmingRewardDetails(ctx context.Context, req *GetFarmingRewardDetailsRequest) (*GetFarmingRewardDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFarmingRewardDetails not implemented")
}
func (*UnimplementedWebServer) TransferHistory(ctx context.Context, req *TransferHistoryRequest) (*TransferHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferHistory not implemented")
}
func (*UnimplementedWebServer) LPHistory(ctx context.Context, req *LPHistoryRequest) (*LPHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPHistory not implemented")
}
func (*UnimplementedWebServer) RewardingData(ctx context.Context, req *RewardingDataRequest) (*RewardingDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardingData not implemented")
}
func (*UnimplementedWebServer) StakingConfig(ctx context.Context, req *StakingConfigRequest) (*StakingConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakingConfig not implemented")
}
func (*UnimplementedWebServer) UnlockStakingReward(ctx context.Context, req *UnlockStakingRewardRequest) (*UnlockStakingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockStakingReward not implemented")
}
func (*UnimplementedWebServer) GetStakingRewardDetails(ctx context.Context, req *GetStakingRewardDetailsRequest) (*GetStakingRewardDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakingRewardDetails not implemented")
}
func (*UnimplementedWebServer) GetTotalLiquidityProviderTokenBalance(ctx context.Context, req *GetTotalLiquidityProviderTokenBalanceRequest) (*GetTotalLiquidityProviderTokenBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalLiquidityProviderTokenBalance not implemented")
}
func (*UnimplementedWebServer) UpdateChain(ctx context.Context, req *UpdateChainRequest) (*UpdateChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChain not implemented")
}
func (*UnimplementedWebServer) UpdateToken(ctx context.Context, req *UpdateTokenRequest) (*UpdateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (*UnimplementedWebServer) GetCampaignScores(ctx context.Context, req *GetCampaignScoresRequest) (*GetCampaignScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignScores not implemented")
}
func (*UnimplementedWebServer) GetInfoByTxHash(ctx context.Context, req *GetInfoByTxHashRequest) (*GetInfoByTxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByTxHash not implemented")
}
func (*UnimplementedWebServer) GetAbnormalStatusInfo(ctx context.Context, req *GetAbnormalStatusInfoRequest) (*GetAbnormalStatusInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbnormalStatusInfo not implemented")
}
func (*UnimplementedWebServer) FixEventMiss(ctx context.Context, req *FixEventMissRequest) (*FixEventMissResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixEventMiss not implemented")
}
func (*UnimplementedWebServer) GetUsrBalance(ctx context.Context, req *GetUsrBalanceRequest) (*GetUsrBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsrBalance not implemented")
}
func (*UnimplementedWebServer) GetAllConfigs(ctx context.Context, req *GetAllConfigsRequest) (*GetAllConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConfigs not implemented")
}
func (*UnimplementedWebServer) GetCbrConfigsOnChain(ctx context.Context, req *GetCbrConfigsOnChainRequest) (*GetCbrConfigsOnChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCbrConfigsOnChain not implemented")
}
func (*UnimplementedWebServer) ReportCurrentBlockNumber(ctx context.Context, req *relayer.ReportSgnAnalyticsRequest) (*relayer.ReportSgnAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCurrentBlockNumber not implemented")
}
func (*UnimplementedWebServer) GetCurrentBlockNumberByNode(ctx context.Context, req *GetCurrentBlockNumberByNodeRequest) (*GetCurrentBlockNumberByNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentBlockNumberByNode not implemented")
}
func (*UnimplementedWebServer) GetRetentionRewardsInfo(ctx context.Context, req *GetRetentionRewardsInfoRequest) (*GetRetentionRewardsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetentionRewardsInfo not implemented")
}
func (*UnimplementedWebServer) GetIncentiveCampaignCelrRank(ctx context.Context, req *GetIncentiveCampaignCelrRankRequest) (*GetIncentiveCampaignCelrRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncentiveCampaignCelrRank not implemented")
}
func (*UnimplementedWebServer) InIncentiveCampaignBnbWhiteList(ctx context.Context, req *InIncentiveCampaignBnbWhiteListRequest) (*InIncentiveCampaignBnbWhiteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InIncentiveCampaignBnbWhiteList not implemented")
}
func (*UnimplementedWebServer) GetIncentiveCampaignBnbRank(ctx context.Context, req *GetIncentiveCampaignBnbRankRequest) (*GetIncentiveCampaignBnbRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncentiveCampaignBnbRank not implemented")
}
func (*UnimplementedWebServer) ClaimRetentionRewards(ctx context.Context, req *ClaimRetentionRewardsRequest) (*ClaimRetentionRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRetentionRewards not implemented")
}
func (*UnimplementedWebServer) GetBscCampaignInfo(ctx context.Context, req *GetBscCampaignInfoRequest) (*GetBscCampaignInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBscCampaignInfo not implemented")
}
func (*UnimplementedWebServer) ClaimGetBscCampaignReward(ctx context.Context, req *ClaimGetBscCampaignRewardRequest) (*ClaimGetBscCampaignRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimGetBscCampaignReward not implemented")
}
func (*UnimplementedWebServer) GetFeeRebateInfo(ctx context.Context, req *GetFeeRebateInfoRequest) (*GetFeeRebateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeRebateInfo not implemented")
}
func (*UnimplementedWebServer) ClaimFeeRebate(ctx context.Context, req *ClaimFeeRebateRequest) (*ClaimFeeRebateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimFeeRebate not implemented")
}
func (*UnimplementedWebServer) ClaimPegBridgeFee(ctx context.Context, req *ClaimPegBridgeFeeRequest) (*ClaimPegBridgeFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimPegBridgeFee not implemented")
}
func (*UnimplementedWebServer) InitWithdraw(ctx context.Context, req *InitWithdrawRequest) (*InitWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitWithdraw not implemented")
}
func (*UnimplementedWebServer) InitPegRefund(ctx context.Context, req *InitPegRefundRequest) (*InitPegRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPegRefund not implemented")
}
func (*UnimplementedWebServer) ExecutionContexts(ctx context.Context, req *types5.QueryExecutionContextsRequest) (*types5.QueryExecutionContextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutionContexts not implemented")
}

func RegisterWebServer(s grpc1.Server, srv WebServer) {
	s.RegisterService(&_Web_serviceDesc, srv)
}

func _Web_GetTransferConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetTransferConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetTransferConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetTransferConfigs(ctx, req.(*GetTransferConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetTransferConfigsForAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetTransferConfigsForAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetTransferConfigsForAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetTransferConfigsForAll(ctx, req.(*GetTransferConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetTokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetTokenInfo(ctx, req.(*GetTokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_EstimateAmt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateAmtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).EstimateAmt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/EstimateAmt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).EstimateAmt(ctx, req.(*EstimateAmtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetTransferStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetTransferStatus(ctx, req.(*GetTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetLPInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLPInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetLPInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetLPInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetLPInfoList(ctx, req.(*GetLPInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_WithdrawLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).WithdrawLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/WithdrawLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).WithdrawLiquidity(ctx, req.(*WithdrawLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_EstimateWithdrawAmt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateWithdrawAmtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).EstimateWithdrawAmt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/EstimateWithdrawAmt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).EstimateWithdrawAmt(ctx, req.(*EstimateWithdrawAmtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_QueryLiquidityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).QueryLiquidityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/QueryLiquidityStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).QueryLiquidityStatus(ctx, req.(*QueryLiquidityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_UnlockFarmingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockFarmingRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).UnlockFarmingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/UnlockFarmingReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).UnlockFarmingReward(ctx, req.(*UnlockFarmingRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetFarmingRewardDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFarmingRewardDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetFarmingRewardDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetFarmingRewardDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetFarmingRewardDetails(ctx, req.(*GetFarmingRewardDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_TransferHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).TransferHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/TransferHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).TransferHistory(ctx, req.(*TransferHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_LPHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).LPHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/LPHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).LPHistory(ctx, req.(*LPHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_RewardingData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardingDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).RewardingData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/RewardingData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).RewardingData(ctx, req.(*RewardingDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_StakingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).StakingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/StakingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).StakingConfig(ctx, req.(*StakingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_UnlockStakingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockStakingRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).UnlockStakingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/UnlockStakingReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).UnlockStakingReward(ctx, req.(*UnlockStakingRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetStakingRewardDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakingRewardDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetStakingRewardDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetStakingRewardDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetStakingRewardDetails(ctx, req.(*GetStakingRewardDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetTotalLiquidityProviderTokenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalLiquidityProviderTokenBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetTotalLiquidityProviderTokenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetTotalLiquidityProviderTokenBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetTotalLiquidityProviderTokenBalance(ctx, req.(*GetTotalLiquidityProviderTokenBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_UpdateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).UpdateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/UpdateChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).UpdateChain(ctx, req.(*UpdateChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).UpdateToken(ctx, req.(*UpdateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetCampaignScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetCampaignScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetCampaignScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetCampaignScores(ctx, req.(*GetCampaignScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetInfoByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoByTxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetInfoByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetInfoByTxHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetInfoByTxHash(ctx, req.(*GetInfoByTxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetAbnormalStatusInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbnormalStatusInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetAbnormalStatusInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetAbnormalStatusInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetAbnormalStatusInfo(ctx, req.(*GetAbnormalStatusInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_FixEventMiss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixEventMissRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).FixEventMiss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/FixEventMiss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).FixEventMiss(ctx, req.(*FixEventMissRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetUsrBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsrBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetUsrBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetUsrBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetUsrBalance(ctx, req.(*GetUsrBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetAllConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetAllConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetAllConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetAllConfigs(ctx, req.(*GetAllConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetCbrConfigsOnChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCbrConfigsOnChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetCbrConfigsOnChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetCbrConfigsOnChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetCbrConfigsOnChain(ctx, req.(*GetCbrConfigsOnChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ReportCurrentBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(relayer.ReportSgnAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ReportCurrentBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/ReportCurrentBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ReportCurrentBlockNumber(ctx, req.(*relayer.ReportSgnAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetCurrentBlockNumberByNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentBlockNumberByNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetCurrentBlockNumberByNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetCurrentBlockNumberByNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetCurrentBlockNumberByNode(ctx, req.(*GetCurrentBlockNumberByNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetRetentionRewardsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetentionRewardsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetRetentionRewardsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetRetentionRewardsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetRetentionRewardsInfo(ctx, req.(*GetRetentionRewardsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetIncentiveCampaignCelrRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncentiveCampaignCelrRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetIncentiveCampaignCelrRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetIncentiveCampaignCelrRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetIncentiveCampaignCelrRank(ctx, req.(*GetIncentiveCampaignCelrRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_InIncentiveCampaignBnbWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InIncentiveCampaignBnbWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).InIncentiveCampaignBnbWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/InIncentiveCampaignBnbWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).InIncentiveCampaignBnbWhiteList(ctx, req.(*InIncentiveCampaignBnbWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetIncentiveCampaignBnbRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncentiveCampaignBnbRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetIncentiveCampaignBnbRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetIncentiveCampaignBnbRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetIncentiveCampaignBnbRank(ctx, req.(*GetIncentiveCampaignBnbRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ClaimRetentionRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRetentionRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ClaimRetentionRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/ClaimRetentionRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ClaimRetentionRewards(ctx, req.(*ClaimRetentionRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetBscCampaignInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBscCampaignInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetBscCampaignInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetBscCampaignInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetBscCampaignInfo(ctx, req.(*GetBscCampaignInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ClaimGetBscCampaignReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimGetBscCampaignRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ClaimGetBscCampaignReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/ClaimGetBscCampaignReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ClaimGetBscCampaignReward(ctx, req.(*ClaimGetBscCampaignRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetFeeRebateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeRebateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetFeeRebateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/GetFeeRebateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetFeeRebateInfo(ctx, req.(*GetFeeRebateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ClaimFeeRebate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimFeeRebateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ClaimFeeRebate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/ClaimFeeRebate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ClaimFeeRebate(ctx, req.(*ClaimFeeRebateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ClaimPegBridgeFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimPegBridgeFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ClaimPegBridgeFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/ClaimPegBridgeFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ClaimPegBridgeFee(ctx, req.(*ClaimPegBridgeFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_InitWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).InitWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/InitWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).InitWithdraw(ctx, req.(*InitWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_InitPegRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitPegRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).InitPegRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/InitPegRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).InitPegRefund(ctx, req.(*InitPegRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_ExecutionContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types5.QueryExecutionContextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).ExecutionContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.gateway.v1.Web/ExecutionContexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).ExecutionContexts(ctx, req.(*types5.QueryExecutionContextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Web_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgn.gateway.v1.Web",
	HandlerType: (*WebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransferConfigs",
			Handler:    _Web_GetTransferConfigs_Handler,
		},
		{
			MethodName: "GetTransferConfigsForAll",
			Handler:    _Web_GetTransferConfigsForAll_Handler,
		},
		{
			MethodName: "GetTokenInfo",
			Handler:    _Web_GetTokenInfo_Handler,
		},
		{
			MethodName: "EstimateAmt",
			Handler:    _Web_EstimateAmt_Handler,
		},
		{
			MethodName: "GetTransferStatus",
			Handler:    _Web_GetTransferStatus_Handler,
		},
		{
			MethodName: "GetLPInfoList",
			Handler:    _Web_GetLPInfoList_Handler,
		},
		{
			MethodName: "WithdrawLiquidity",
			Handler:    _Web_WithdrawLiquidity_Handler,
		},
		{
			MethodName: "EstimateWithdrawAmt",
			Handler:    _Web_EstimateWithdrawAmt_Handler,
		},
		{
			MethodName: "QueryLiquidityStatus",
			Handler:    _Web_QueryLiquidityStatus_Handler,
		},
		{
			MethodName: "UnlockFarmingReward",
			Handler:    _Web_UnlockFarmingReward_Handler,
		},
		{
			MethodName: "GetFarmingRewardDetails",
			Handler:    _Web_GetFarmingRewardDetails_Handler,
		},
		{
			MethodName: "TransferHistory",
			Handler:    _Web_TransferHistory_Handler,
		},
		{
			MethodName: "LPHistory",
			Handler:    _Web_LPHistory_Handler,
		},
		{
			MethodName: "RewardingData",
			Handler:    _Web_RewardingData_Handler,
		},
		{
			MethodName: "StakingConfig",
			Handler:    _Web_StakingConfig_Handler,
		},
		{
			MethodName: "UnlockStakingReward",
			Handler:    _Web_UnlockStakingReward_Handler,
		},
		{
			MethodName: "GetStakingRewardDetails",
			Handler:    _Web_GetStakingRewardDetails_Handler,
		},
		{
			MethodName: "GetTotalLiquidityProviderTokenBalance",
			Handler:    _Web_GetTotalLiquidityProviderTokenBalance_Handler,
		},
		{
			MethodName: "UpdateChain",
			Handler:    _Web_UpdateChain_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _Web_UpdateToken_Handler,
		},
		{
			MethodName: "GetCampaignScores",
			Handler:    _Web_GetCampaignScores_Handler,
		},
		{
			MethodName: "GetInfoByTxHash",
			Handler:    _Web_GetInfoByTxHash_Handler,
		},
		{
			MethodName: "GetAbnormalStatusInfo",
			Handler:    _Web_GetAbnormalStatusInfo_Handler,
		},
		{
			MethodName: "FixEventMiss",
			Handler:    _Web_FixEventMiss_Handler,
		},
		{
			MethodName: "GetUsrBalance",
			Handler:    _Web_GetUsrBalance_Handler,
		},
		{
			MethodName: "GetAllConfigs",
			Handler:    _Web_GetAllConfigs_Handler,
		},
		{
			MethodName: "GetCbrConfigsOnChain",
			Handler:    _Web_GetCbrConfigsOnChain_Handler,
		},
		{
			MethodName: "ReportCurrentBlockNumber",
			Handler:    _Web_ReportCurrentBlockNumber_Handler,
		},
		{
			MethodName: "GetCurrentBlockNumberByNode",
			Handler:    _Web_GetCurrentBlockNumberByNode_Handler,
		},
		{
			MethodName: "GetRetentionRewardsInfo",
			Handler:    _Web_GetRetentionRewardsInfo_Handler,
		},
		{
			MethodName: "GetIncentiveCampaignCelrRank",
			Handler:    _Web_GetIncentiveCampaignCelrRank_Handler,
		},
		{
			MethodName: "InIncentiveCampaignBnbWhiteList",
			Handler:    _Web_InIncentiveCampaignBnbWhiteList_Handler,
		},
		{
			MethodName: "GetIncentiveCampaignBnbRank",
			Handler:    _Web_GetIncentiveCampaignBnbRank_Handler,
		},
		{
			MethodName: "ClaimRetentionRewards",
			Handler:    _Web_ClaimRetentionRewards_Handler,
		},
		{
			MethodName: "GetBscCampaignInfo",
			Handler:    _Web_GetBscCampaignInfo_Handler,
		},
		{
			MethodName: "ClaimGetBscCampaignReward",
			Handler:    _Web_ClaimGetBscCampaignReward_Handler,
		},
		{
			MethodName: "GetFeeRebateInfo",
			Handler:    _Web_GetFeeRebateInfo_Handler,
		},
		{
			MethodName: "ClaimFeeRebate",
			Handler:    _Web_ClaimFeeRebate_Handler,
		},
		{
			MethodName: "ClaimPegBridgeFee",
			Handler:    _Web_ClaimPegBridgeFee_Handler,
		},
		{
			MethodName: "InitWithdraw",
			Handler:    _Web_InitWithdraw_Handler,
		},
		{
			MethodName: "InitPegRefund",
			Handler:    _Web_InitPegRefund_Handler,
		},
		{
			MethodName: "ExecutionContexts",
			Handler:    _Web_ExecutionContexts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/gateway.proto",
}

func (m *InitPegRefundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitPegRefundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitPegRefundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitPegRefundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitPegRefundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitPegRefundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithdrawReq) > 0 {
		i -= len(m.WithdrawReq)
		copy(dAtA[i:], m.WithdrawReq)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.WithdrawReq)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUsrBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsrBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUsrBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UsrAddr) > 0 {
		i -= len(m.UsrAddr)
		copy(dAtA[i:], m.UsrAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.UsrAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SigAddr) > 0 {
		i -= len(m.SigAddr)
		copy(dAtA[i:], m.SigAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.SigAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUsrBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsrBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUsrBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimPegBridgeFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimPegBridgeFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimPegBridgeFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimPegBridgeFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimPegBridgeFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimPegBridgeFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCampaignScoresRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCampaignScoresRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCampaignScoresRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndBlock != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.BeginBlock != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.BeginBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.Date != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCampaignScoresResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCampaignScoresResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCampaignScoresResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Begin != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Begin))
		i--
		dAtA[i] = 0x18
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CampaignScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CampaignScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UsrAddr) > 0 {
		i -= len(m.UsrAddr)
		copy(dAtA[i:], m.UsrAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.UsrAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockDelay != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.BlockDelay))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BlockTxLink) > 0 {
		i -= len(m.BlockTxLink)
		copy(dAtA[i:], m.BlockTxLink)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.BlockTxLink)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Powers) > 0 {
		for iNdEx := len(m.Powers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Powers[iNdEx])
			copy(dAtA[i:], m.Powers[iNdEx])
			i = encodeVarintGateway(dAtA, i, uint64(len(m.Powers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintGateway(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SortedSigs) > 0 {
		for iNdEx := len(m.SortedSigs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SortedSigs[iNdEx])
			copy(dAtA[i:], m.SortedSigs[iNdEx])
			i = encodeVarintGateway(dAtA, i, uint64(len(m.SortedSigs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.WdOnchain) > 0 {
		i -= len(m.WdOnchain)
		copy(dAtA[i:], m.WdOnchain)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.WdOnchain)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SuggestedGasCost != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.SuggestedGasCost))
		i--
		dAtA[i] = 0x68
	}
	if len(m.DropGasBalanceAlert) > 0 {
		i -= len(m.DropGasBalanceAlert)
		copy(dAtA[i:], m.DropGasBalanceAlert)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.DropGasBalanceAlert)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DropGasCostAmt) > 0 {
		i -= len(m.DropGasCostAmt)
		copy(dAtA[i:], m.DropGasCostAmt)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.DropGasCostAmt)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DropGasAmt) > 0 {
		i -= len(m.DropGasAmt)
		copy(dAtA[i:], m.DropGasAmt)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.DropGasAmt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExploreUrl) > 0 {
		i -= len(m.ExploreUrl)
		copy(dAtA[i:], m.ExploreUrl)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ExploreUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GasTokenSymbol) > 0 {
		i -= len(m.GasTokenSymbol)
		copy(dAtA[i:], m.GasTokenSymbol)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.GasTokenSymbol)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockDelay != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.BlockDelay))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainTokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainTokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainTokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		for iNdEx := len(m.Token) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Token[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Chain != nil {
		{
			size, err := m.Chain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTransferStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransferStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTransferStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransferId) > 0 {
		i -= len(m.TransferId)
		copy(dAtA[i:], m.TransferId)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TransferId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTransferStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransferStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTransferStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DstBlockTxLink) > 0 {
		i -= len(m.DstBlockTxLink)
		copy(dAtA[i:], m.DstBlockTxLink)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.DstBlockTxLink)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SrcBlockTxLink) > 0 {
		i -= len(m.SrcBlockTxLink)
		copy(dAtA[i:], m.SrcBlockTxLink)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.SrcBlockTxLink)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BlockDelay != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.BlockDelay))
		i--
		dAtA[i] = 0x40
	}
	if m.RefundReason != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.RefundReason))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Powers) > 0 {
		for iNdEx := len(m.Powers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Powers[iNdEx])
			copy(dAtA[i:], m.Powers[iNdEx])
			i = encodeVarintGateway(dAtA, i, uint64(len(m.Powers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintGateway(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SortedSigs) > 0 {
		for iNdEx := len(m.SortedSigs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SortedSigs[iNdEx])
			copy(dAtA[i:], m.SortedSigs[iNdEx])
			i = encodeVarintGateway(dAtA, i, uint64(len(m.SortedSigs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.WdOnchain) > 0 {
		i -= len(m.WdOnchain)
		copy(dAtA[i:], m.WdOnchain)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.WdOnchain)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTransferConfigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransferConfigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTransferConfigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTransferConfigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransferConfigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTransferConfigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeggedPairConfigs) > 0 {
		for iNdEx := len(m.PeggedPairConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeggedPairConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.FarmingRewardContractAddr) > 0 {
		i -= len(m.FarmingRewardContractAddr)
		copy(dAtA[i:], m.FarmingRewardContractAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.FarmingRewardContractAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainToken) > 0 {
		for k := range m.ChainToken {
			v := m.ChainToken[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGateway(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintGateway(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeggedPairConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeggedPairConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeggedPairConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CanonicalTokenContractAddr) > 0 {
		i -= len(m.CanonicalTokenContractAddr)
		copy(dAtA[i:], m.CanonicalTokenContractAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.CanonicalTokenContractAddr)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PeggedBurnContractAddr) > 0 {
		i -= len(m.PeggedBurnContractAddr)
		copy(dAtA[i:], m.PeggedBurnContractAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.PeggedBurnContractAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PeggedDepositContractAddr) > 0 {
		i -= len(m.PeggedDepositContractAddr)
		copy(dAtA[i:], m.PeggedDepositContractAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.PeggedDepositContractAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PeggedToken != nil {
		{
			size, err := m.PeggedToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PeggedChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.PeggedChainId))
		i--
		dAtA[i] = 0x18
	}
	if m.OrgToken != nil {
		{
			size, err := m.OrgToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OrgChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.OrgChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTokenInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTokenInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTokenInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTokenInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTokenInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenInfo != nil {
		{
			size, err := m.TokenInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EstimateAmtRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateAmtRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateAmtRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPegged {
		i--
		if m.IsPegged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SlippageTolerance != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.SlippageTolerance))
		i--
		dAtA[i] = 0x30
	}
	if len(m.UsrAddr) > 0 {
		i -= len(m.UsrAddr)
		copy(dAtA[i:], m.UsrAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.UsrAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amt) > 0 {
		i -= len(m.Amt)
		copy(dAtA[i:], m.Amt)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Amt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DstChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.DstChainId))
		i--
		dAtA[i] = 0x10
	}
	if m.SrcChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.SrcChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EstimateAmtResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateAmtResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateAmtResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EstimatedReceiveAmt) > 0 {
		i -= len(m.EstimatedReceiveAmt)
		copy(dAtA[i:], m.EstimatedReceiveAmt)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EstimatedReceiveAmt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BaseFee) > 0 {
		i -= len(m.BaseFee)
		copy(dAtA[i:], m.BaseFee)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.BaseFee)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MaxSlippage != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.MaxSlippage))
		i--
		dAtA[i] = 0x30
	}
	if m.SlippageTolerance != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.SlippageTolerance))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PercFee) > 0 {
		i -= len(m.PercFee)
		copy(dAtA[i:], m.PercFee)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.PercFee)))
		i--
		dAtA[i] = 0x22
	}
	if m.BridgeRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BridgeRate))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.EqValueTokenAmt) > 0 {
		i -= len(m.EqValueTokenAmt)
		copy(dAtA[i:], m.EqValueTokenAmt)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EqValueTokenAmt)))
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlippageTolerance != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.SlippageTolerance))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EstimateWithdrawAmtRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateWithdrawAmtRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateWithdrawAmtRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UsrAddr) > 0 {
		i -= len(m.UsrAddr)
		copy(dAtA[i:], m.UsrAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.UsrAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DstChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.DstChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SrcWithdraws) > 0 {
		for iNdEx := len(m.SrcWithdraws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SrcWithdraws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EstimateWithdrawAmtResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateWithdrawAmtResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateWithdrawAmtResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReqAmt) > 0 {
		for k := range m.ReqAmt {
			v := m.ReqAmt[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGateway(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintGateway(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EstimateWithdrawAmt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateWithdrawAmt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateWithdrawAmt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSlippage != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.MaxSlippage))
		i--
		dAtA[i] = 0x30
	}
	if m.SlippageTolerance != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.SlippageTolerance))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BaseFee) > 0 {
		i -= len(m.BaseFee)
		copy(dAtA[i:], m.BaseFee)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.BaseFee)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PercFee) > 0 {
		i -= len(m.PercFee)
		copy(dAtA[i:], m.PercFee)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.PercFee)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BridgeRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BridgeRate))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.EqValueTokenAmt) > 0 {
		i -= len(m.EqValueTokenAmt)
		copy(dAtA[i:], m.EqValueTokenAmt)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EqValueTokenAmt)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLPInfoListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLPInfoListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLPInfoListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FarmingSessionTokens) > 0 {
		for iNdEx := len(m.FarmingSessionTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FarmingSessionTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.FarmingApy != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FarmingApy))))
		i--
		dAtA[i] = 0x61
	}
	if m.LpFeeEarningApy != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LpFeeEarningApy))))
		i--
		dAtA[i] = 0x59
	}
	if len(m.TotalLiquidityAmt) > 0 {
		i -= len(m.TotalLiquidityAmt)
		copy(dAtA[i:], m.TotalLiquidityAmt)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TotalLiquidityAmt)))
		i--
		dAtA[i] = 0x52
	}
	if m.TotalLiquidity != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TotalLiquidity))))
		i--
		dAtA[i] = 0x49
	}
	if m.Volume_24H != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Volume_24H))))
		i--
		dAtA[i] = 0x41
	}
	if m.FarmingRewardEarning != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FarmingRewardEarning))))
		i--
		dAtA[i] = 0x39
	}
	if m.LpFeeEarning != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LpFeeEarning))))
		i--
		dAtA[i] = 0x31
	}
	if m.HasFarmingSessions {
		i--
		if m.HasFarmingSessions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.LiquidityAmt) > 0 {
		i -= len(m.LiquidityAmt)
		copy(dAtA[i:], m.LiquidityAmt)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.LiquidityAmt)))
		i--
		dAtA[i] = 0x22
	}
	if m.Liquidity != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Liquidity))))
		i--
		dAtA[i] = 0x19
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Chain != nil {
		{
			size, err := m.Chain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLPInfoListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLPInfoListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLPInfoListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LpInfo) > 0 {
		for iNdEx := len(m.LpInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LpInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MethodType != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.MethodType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EstimatedReceivedAmt) > 0 {
		i -= len(m.EstimatedReceivedAmt)
		copy(dAtA[i:], m.EstimatedReceivedAmt)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EstimatedReceivedAmt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithdrawReq) > 0 {
		i -= len(m.WithdrawReq)
		copy(dAtA[i:], m.WithdrawReq)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.WithdrawReq)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeqNum != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.SeqNum))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnlockFarmingRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockFarmingRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockFarmingRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnlockFarmingRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockFarmingRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockFarmingRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFarmingRewardDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFarmingRewardDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFarmingRewardDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFarmingRewardDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFarmingRewardDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFarmingRewardDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		for iNdEx := len(m.Details) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Details[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.ChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.LpAddr) > 0 {
		i -= len(m.LpAddr)
		copy(dAtA[i:], m.LpAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.LpAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.SeqNum != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.SeqNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefundReason != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.RefundReason))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DstBlockTxLink) > 0 {
		i -= len(m.DstBlockTxLink)
		copy(dAtA[i:], m.DstBlockTxLink)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.DstBlockTxLink)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SrcBlockTxLink) > 0 {
		i -= len(m.SrcBlockTxLink)
		copy(dAtA[i:], m.SrcBlockTxLink)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.SrcBlockTxLink)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Ts != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x20
	}
	if m.DstReceivedInfo != nil {
		{
			size, err := m.DstReceivedInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SrcSendInfo != nil {
		{
			size, err := m.SrcSendInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransferId) > 0 {
		i -= len(m.TransferId)
		copy(dAtA[i:], m.TransferId)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TransferId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LPHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x50
	}
	if m.MethodType != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.MethodType))
		i--
		dAtA[i] = 0x48
	}
	if m.SeqNum != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.SeqNum))
		i--
		dAtA[i] = 0x40
	}
	if m.Type != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.BlockTxLink) > 0 {
		i -= len(m.BlockTxLink)
		copy(dAtA[i:], m.BlockTxLink)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.BlockTxLink)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Ts != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Chain != nil {
		{
			size, err := m.Chain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentSize != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.CurrentSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LPHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LPHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentSize != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.CurrentSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardingDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardingDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardingDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Reward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Amt != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amt))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *RewardingDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardingDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardingDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnlockedCumulativeRewards) > 0 {
		for iNdEx := len(m.UnlockedCumulativeRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnlockedCumulativeRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.HistoricalCumulativeRewards) > 0 {
		for iNdEx := len(m.HistoricalCumulativeRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistoricalCumulativeRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.UsdPrice) > 0 {
		for k := range m.UsdPrice {
			v := m.UsdPrice[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxUrlPrefix) > 0 {
		i -= len(m.TxUrlPrefix)
		copy(dAtA[i:], m.TxUrlPrefix)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TxUrlPrefix)))
		i--
		dAtA[i] = 0x12
	}
	if m.Chain != nil {
		{
			size, err := m.Chain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxUrlPrefix) > 0 {
		i -= len(m.TxUrlPrefix)
		copy(dAtA[i:], m.TxUrlPrefix)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TxUrlPrefix)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Chain != nil {
		{
			size, err := m.Chain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenIcon) > 0 {
		i -= len(m.TokenIcon)
		copy(dAtA[i:], m.TokenIcon)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TokenIcon)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StakingConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CelrContract) > 0 {
		i -= len(m.CelrContract)
		copy(dAtA[i:], m.CelrContract)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.CelrContract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StakingRewardContract) > 0 {
		i -= len(m.StakingRewardContract)
		copy(dAtA[i:], m.StakingRewardContract)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.StakingRewardContract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StakingContract) > 0 {
		i -= len(m.StakingContract)
		copy(dAtA[i:], m.StakingContract)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.StakingContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ViewerContract) > 0 {
		i -= len(m.ViewerContract)
		copy(dAtA[i:], m.ViewerContract)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ViewerContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnlockStakingRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockStakingRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockStakingRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnlockStakingRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockStakingRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockStakingRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStakingRewardDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakingRewardDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakingRewardDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStakingRewardDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakingRewardDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakingRewardDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Detail != nil {
		{
			size, err := m.Detail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTotalLiquidityProviderTokenBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalLiquidityProviderTokenBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalLiquidityProviderTokenBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainIds) > 0 {
		dAtA44 := make([]byte, len(m.ChainIds)*10)
		var j43 int
		for _, num := range m.ChainIds {
			for num >= 1<<7 {
				dAtA44[j43] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j43++
			}
			dAtA44[j43] = uint8(num)
			j43++
		}
		i -= j43
		copy(dAtA[i:], dAtA44[:j43])
		i = encodeVarintGateway(dAtA, i, uint64(j43))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTotalLiquidityProviderTokenBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalLiquidityProviderTokenBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalLiquidityProviderTokenBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalLiq) > 0 {
		for k := range m.TotalLiq {
			v := m.TotalLiq[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGateway(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintGateway(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAbnormalStatusInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAbnormalStatusInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAbnormalStatusInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAbnormalStatusInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAbnormalStatusInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAbnormalStatusInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AbnormalStatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbnormalStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AbnormalStatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SrcTransferId) > 0 {
		i -= len(m.SrcTransferId)
		copy(dAtA[i:], m.SrcTransferId)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.SrcTransferId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PeggedInfo) > 0 {
		i -= len(m.PeggedInfo)
		copy(dAtA[i:], m.PeggedInfo)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.PeggedInfo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.DstChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.DstChainId))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetInfoByTxHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoByTxHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfoByTxHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInfoByTxHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoByTxHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfoByTxHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Operation != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FixEventMissRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixEventMissRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixEventMissRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FixEventMissResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixEventMissResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixEventMissResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllConfigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllConfigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllConfigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ExtendedPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxBurn) > 0 {
		i -= len(m.MaxBurn)
		copy(dAtA[i:], m.MaxBurn)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.MaxBurn)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MinBurn) > 0 {
		i -= len(m.MinBurn)
		copy(dAtA[i:], m.MinBurn)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.MinBurn)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MaxDeposit) > 0 {
		i -= len(m.MaxDeposit)
		copy(dAtA[i:], m.MaxDeposit)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.MaxDeposit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MinDeposit) > 0 {
		i -= len(m.MinDeposit)
		copy(dAtA[i:], m.MinDeposit)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.MinDeposit)))
		i--
		dAtA[i] = 0x12
	}
	if m.PeggedPair != nil {
		{
			size, err := m.PeggedPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllConfigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllConfigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllConfigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CbrConfig != nil {
		{
			size, err := m.CbrConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PeggedPairs) > 0 {
		for iNdEx := len(m.PeggedPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeggedPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCbrConfigsOnChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbrConfigsOnChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCbrConfigsOnChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExtendedToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinAdd) > 0 {
		i -= len(m.MinAdd)
		copy(dAtA[i:], m.MinAdd)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.MinAdd)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MaxSend) > 0 {
		i -= len(m.MaxSend)
		copy(dAtA[i:], m.MaxSend)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.MaxSend)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MinSend) > 0 {
		i -= len(m.MinSend)
		copy(dAtA[i:], m.MinSend)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.MinSend)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EpochVolumeCaps) > 0 {
		i -= len(m.EpochVolumeCaps)
		copy(dAtA[i:], m.EpochVolumeCaps)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EpochVolumeCaps)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DelayThreshold) > 0 {
		i -= len(m.DelayThreshold)
		copy(dAtA[i:], m.DelayThreshold)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.DelayThreshold)))
		i--
		dAtA[i] = 0x12
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCbrConfigsOnChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCbrConfigsOnChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCbrConfigsOnChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NativeWrap) > 0 {
		i -= len(m.NativeWrap)
		copy(dAtA[i:], m.NativeWrap)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.NativeWrap)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EpochLength) > 0 {
		i -= len(m.EpochLength)
		copy(dAtA[i:], m.EpochLength)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EpochLength)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DelayPeriod) > 0 {
		i -= len(m.DelayPeriod)
		copy(dAtA[i:], m.DelayPeriod)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.DelayPeriod)))
		i--
		dAtA[i] = 0x12
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetentionRewardsEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionRewardsEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetentionRewardsEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SoFarSumReward != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SoFarSumReward))))
		i--
		dAtA[i] = 0x59
	}
	if m.EventMaxRewardCap != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EventMaxRewardCap))))
		i--
		dAtA[i] = 0x51
	}
	if len(m.EventTitle) > 0 {
		i -= len(m.EventTitle)
		copy(dAtA[i:], m.EventTitle)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventTitle)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EventDescription) > 0 {
		i -= len(m.EventDescription)
		copy(dAtA[i:], m.EventDescription)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventDescription)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EventRewardsTooltip) > 0 {
		i -= len(m.EventRewardsTooltip)
		copy(dAtA[i:], m.EventRewardsTooltip)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventRewardsTooltip)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EventFaqLinkUrl) > 0 {
		i -= len(m.EventFaqLinkUrl)
		copy(dAtA[i:], m.EventFaqLinkUrl)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventFaqLinkUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EventPromoImgUrl) > 0 {
		i -= len(m.EventPromoImgUrl)
		copy(dAtA[i:], m.EventPromoImgUrl)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventPromoImgUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Wrapper != nil {
		{
			size, err := m.Wrapper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.EventEndTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventEndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.EventStartTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventStartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetentionRewardsEventLevelConfigWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionRewardsEventLevelConfigWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetentionRewardsEventLevelConfigWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LevelConfig) > 0 {
		for k := range m.LevelConfig {
			v := m.LevelConfig[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGateway(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetentionRewardsLevelConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionRewardsLevelConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetentionRewardsLevelConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxTransferVolume != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxTransferVolume))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.MaxReward) > 0 {
		i -= len(m.MaxReward)
		copy(dAtA[i:], m.MaxReward)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.MaxReward)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRetentionRewardsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionRewardsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionRewardsInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRetentionRewardsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRetentionRewardsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRetentionRewardsInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SoFarSumReward != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SoFarSumReward))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x81
	}
	if m.EventMaxRewardCap != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EventMaxRewardCap))))
		i--
		dAtA[i] = 0x79
	}
	if len(m.EventTitle) > 0 {
		i -= len(m.EventTitle)
		copy(dAtA[i:], m.EventTitle)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventTitle)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.EventDescription) > 0 {
		i -= len(m.EventDescription)
		copy(dAtA[i:], m.EventDescription)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventDescription)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.EventRewardsTooltip) > 0 {
		i -= len(m.EventRewardsTooltip)
		copy(dAtA[i:], m.EventRewardsTooltip)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventRewardsTooltip)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.EventFaqLinkUrl) > 0 {
		i -= len(m.EventFaqLinkUrl)
		copy(dAtA[i:], m.EventFaqLinkUrl)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventFaqLinkUrl)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.EventPromoImgUrl) > 0 {
		i -= len(m.EventPromoImgUrl)
		copy(dAtA[i:], m.EventPromoImgUrl)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventPromoImgUrl)))
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGateway(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.ClaimTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ClaimTime))
		i--
		dAtA[i] = 0x40
	}
	if m.CelrUsdPrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CelrUsdPrice))))
		i--
		dAtA[i] = 0x39
	}
	if len(m.CurrentReward) > 0 {
		i -= len(m.CurrentReward)
		copy(dAtA[i:], m.CurrentReward)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.CurrentReward)))
		i--
		dAtA[i] = 0x32
	}
	if m.MaxTransferVolume != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxTransferVolume))))
		i--
		dAtA[i] = 0x29
	}
	if len(m.MaxReward) > 0 {
		i -= len(m.MaxReward)
		copy(dAtA[i:], m.MaxReward)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.MaxReward)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventEndTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventEndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.EventId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimRetentionRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimRetentionRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimRetentionRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimRetentionRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimRetentionRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimRetentionRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGateway(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.CurrentReward) > 0 {
		i -= len(m.CurrentReward)
		copy(dAtA[i:], m.CurrentReward)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.CurrentReward)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EventId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetIncentiveCampaignCelrRankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetIncentiveCampaignCelrRankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetIncentiveCampaignCelrRankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetIncentiveCampaignCelrRankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetIncentiveCampaignCelrRankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetIncentiveCampaignCelrRankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Ranks) > 0 {
		for iNdEx := len(m.Ranks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ranks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetIncentiveCampaignBnbRankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetIncentiveCampaignBnbRankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetIncentiveCampaignBnbRankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetIncentiveCampaignBnbRankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetIncentiveCampaignBnbRankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetIncentiveCampaignBnbRankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Ranks) > 0 {
		for iNdEx := len(m.Ranks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ranks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InIncentiveCampaignBnbWhiteListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InIncentiveCampaignBnbWhiteListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InIncentiveCampaignBnbWhiteListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InIncentiveCampaignBnbWhiteListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InIncentiveCampaignBnbWhiteListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InIncentiveCampaignBnbWhiteListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Eligible {
		i--
		if m.Eligible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncentiveCampaignRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentiveCampaignRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentiveCampaignRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Volume != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Volume))))
		i--
		dAtA[i] = 0x19
	}
	if m.Rank != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeeRebateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeRebateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeRebateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SoFarSumReward != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SoFarSumReward))))
		i--
		dAtA[i] = 0x31
	}
	if m.EventMaxRewardCap != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EventMaxRewardCap))))
		i--
		dAtA[i] = 0x29
	}
	if m.Wrapper != nil {
		{
			size, err := m.Wrapper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.EventEndTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventEndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.EventStartTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventStartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeeRebateEventLevelConfigWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeRebateEventLevelConfigWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeRebateEventLevelConfigWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LevelConfig) > 0 {
		for k := range m.LevelConfig {
			v := m.LevelConfig[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGateway(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LevelDivisionLowerBound) > 0 {
		for iNdEx := len(m.LevelDivisionLowerBound) - 1; iNdEx >= 0; iNdEx-- {
			f63 := math.Float64bits(float64(m.LevelDivisionLowerBound[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f63))
		}
		i = encodeVarintGateway(dAtA, i, uint64(len(m.LevelDivisionLowerBound)*8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeeRebateLevelConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeRebateLevelConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeRebateLevelConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxReward) > 0 {
		i -= len(m.MaxReward)
		copy(dAtA[i:], m.MaxReward)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.MaxReward)))
		i--
		dAtA[i] = 0x12
	}
	if m.RebatePortion != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RebatePortion))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *GetFeeRebateInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFeeRebateInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFeeRebateInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFeeRebateInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFeeRebateInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFeeRebateInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SoFarSumReward != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SoFarSumReward))))
		i--
		dAtA[i] = 0x51
	}
	if m.EventMaxRewardCap != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EventMaxRewardCap))))
		i--
		dAtA[i] = 0x49
	}
	{
		size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGateway(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.ClaimTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ClaimTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CelrUsdPrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CelrUsdPrice))))
		i--
		dAtA[i] = 0x31
	}
	if len(m.Reward) > 0 {
		i -= len(m.Reward)
		copy(dAtA[i:], m.Reward)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Reward)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RebatePortion != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RebatePortion))))
		i--
		dAtA[i] = 0x21
	}
	if m.EventEndTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventEndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.EventId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimFeeRebateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimFeeRebateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimFeeRebateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimFeeRebateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimFeeRebateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimFeeRebateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGateway(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Reward) > 0 {
		i -= len(m.Reward)
		copy(dAtA[i:], m.Reward)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Reward)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EventId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BscCampaignEventConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BscCampaignEventConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BscCampaignEventConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransferWhiteList != nil {
		{
			size, err := m.TransferWhiteList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.MaxTransferVolume != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxTransferVolume))))
		i--
		dAtA[i] = 0x71
	}
	if len(m.MaxReward) > 0 {
		i -= len(m.MaxReward)
		copy(dAtA[i:], m.MaxReward)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.MaxReward)))
		i--
		dAtA[i] = 0x6a
	}
	if m.SoFarSumReward != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SoFarSumReward))))
		i--
		dAtA[i] = 0x61
	}
	if m.EventMaxRewardCap != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EventMaxRewardCap))))
		i--
		dAtA[i] = 0x59
	}
	if len(m.RewardContractAddr) > 0 {
		i -= len(m.RewardContractAddr)
		copy(dAtA[i:], m.RewardContractAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.RewardContractAddr)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.WbnbAddr) > 0 {
		i -= len(m.WbnbAddr)
		copy(dAtA[i:], m.WbnbAddr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.WbnbAddr)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EventTitle) > 0 {
		i -= len(m.EventTitle)
		copy(dAtA[i:], m.EventTitle)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventTitle)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EventDescription) > 0 {
		i -= len(m.EventDescription)
		copy(dAtA[i:], m.EventDescription)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventDescription)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EventRewardsTooltip) > 0 {
		i -= len(m.EventRewardsTooltip)
		copy(dAtA[i:], m.EventRewardsTooltip)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventRewardsTooltip)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EventFaqLinkUrl) > 0 {
		i -= len(m.EventFaqLinkUrl)
		copy(dAtA[i:], m.EventFaqLinkUrl)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventFaqLinkUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EventPromoImgUrl) > 0 {
		i -= len(m.EventPromoImgUrl)
		copy(dAtA[i:], m.EventPromoImgUrl)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EventPromoImgUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventEndTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventEndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.EventStartTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventStartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BscCampaignTransferWhiteListWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BscCampaignTransferWhiteListWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BscCampaignTransferWhiteListWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransferWhiteList) > 0 {
		for k := range m.TransferWhiteList {
			v := m.TransferWhiteList[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGateway(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BscCampaignTransferWhiteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BscCampaignTransferWhiteList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BscCampaignTransferWhiteList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainIds) > 0 {
		dAtA71 := make([]byte, len(m.ChainIds)*10)
		var j70 int
		for _, num := range m.ChainIds {
			for num >= 1<<7 {
				dAtA71[j70] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j70++
			}
			dAtA71[j70] = uint8(num)
			j70++
		}
		i -= j70
		copy(dAtA[i:], dAtA71[:j70])
		i = encodeVarintGateway(dAtA, i, uint64(j70))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBscCampaignInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBscCampaignInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBscCampaignInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BscCampaignInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BscCampaignInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BscCampaignInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGateway(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ClaimTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ClaimTime))
		i--
		dAtA[i] = 0x20
	}
	if m.WbnbUsdPrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WbnbUsdPrice))))
		i--
		dAtA[i] = 0x19
	}
	if m.CurrentTransferVolume != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurrentTransferVolume))))
		i--
		dAtA[i] = 0x11
	}
	if m.EventConfig != nil {
		{
			size, err := m.EventConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBscCampaignInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBscCampaignInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBscCampaignInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimGetBscCampaignRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimGetBscCampaignRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimGetBscCampaignRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimGetBscCampaignRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimGetBscCampaignRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimGetBscCampaignRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGateway(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.CurrentReward) > 0 {
		i -= len(m.CurrentReward)
		copy(dAtA[i:], m.CurrentReward)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.CurrentReward)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EventId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentBlockNumberByNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentBlockNumberByNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentBlockNumberByNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCurrentBlockNumberByNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentBlockNumberByNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentBlockNumberByNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProblematicAddrs) > 0 {
		for iNdEx := len(m.ProblematicAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProblematicAddrs[iNdEx])
			copy(dAtA[i:], m.ProblematicAddrs[iNdEx])
			i = encodeVarintGateway(dAtA, i, uint64(len(m.ProblematicAddrs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Reports) > 0 {
		for k := range m.Reports {
			v := m.Reports[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGateway(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErrMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	offset -= sovGateway(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitPegRefundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *InitPegRefundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *InitWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawReq)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *InitWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetUsrBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.SigAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.UsrAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovGateway(uint64(m.ChainId))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetUsrBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *ClaimPegBridgeFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *ClaimPegBridgeFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetCampaignScoresRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovGateway(uint64(m.Date))
	}
	if m.BeginBlock != 0 {
		n += 1 + sovGateway(uint64(m.BeginBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovGateway(uint64(m.EndBlock))
	}
	return n
}

func (m *GetCampaignScoresResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Begin != 0 {
		n += 1 + sovGateway(uint64(m.Begin))
	}
	return n
}

func (m *CampaignScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UsrAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovGateway(uint64(m.Score))
	}
	return n
}

func (m *QueryLiquidityStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovGateway(uint64(m.Status))
	}
	l = len(m.WdOnchain)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.SortedSigs) > 0 {
		for _, b := range m.SortedSigs {
			l = len(b)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Signers) > 0 {
		for _, b := range m.Signers {
			l = len(b)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Powers) > 0 {
		for _, b := range m.Powers {
			l = len(b)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	l = len(m.BlockTxLink)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.BlockDelay != 0 {
		n += 1 + sovGateway(uint64(m.BlockDelay))
	}
	return n
}

func (m *Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGateway(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.BlockDelay != 0 {
		n += 1 + sovGateway(uint64(m.BlockDelay))
	}
	l = len(m.GasTokenSymbol)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.ExploreUrl)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.DropGasAmt)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.DropGasCostAmt)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.DropGasBalanceAlert)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.SuggestedGasCost != 0 {
		n += 1 + sovGateway(uint64(m.SuggestedGasCost))
	}
	return n
}

func (m *ChainTokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Token) > 0 {
		for _, e := range m.Token {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *TokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *TransferInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != nil {
		l = m.Chain.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetTransferStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransferId)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetTransferStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovGateway(uint64(m.Status))
	}
	l = len(m.WdOnchain)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.SortedSigs) > 0 {
		for _, b := range m.SortedSigs {
			l = len(b)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Signers) > 0 {
		for _, b := range m.Signers {
			l = len(b)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Powers) > 0 {
		for _, b := range m.Powers {
			l = len(b)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.RefundReason != 0 {
		n += 1 + sovGateway(uint64(m.RefundReason))
	}
	if m.BlockDelay != 0 {
		n += 1 + sovGateway(uint64(m.BlockDelay))
	}
	l = len(m.SrcBlockTxLink)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.DstBlockTxLink)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetTransferConfigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTransferConfigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Chains) > 0 {
		for _, e := range m.Chains {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.ChainToken) > 0 {
		for k, v := range m.ChainToken {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGateway(uint64(l))
			}
			mapEntrySize := 1 + sovGateway(uint64(k)) + l
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	l = len(m.FarmingRewardContractAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.PeggedPairConfigs) > 0 {
		for _, e := range m.PeggedPairConfigs {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *PeggedPairConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgChainId != 0 {
		n += 1 + sovGateway(uint64(m.OrgChainId))
	}
	if m.OrgToken != nil {
		l = m.OrgToken.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.PeggedChainId != 0 {
		n += 1 + sovGateway(uint64(m.PeggedChainId))
	}
	if m.PeggedToken != nil {
		l = m.PeggedToken.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.PeggedDepositContractAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.PeggedBurnContractAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.CanonicalTokenContractAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetTokenInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGateway(uint64(m.ChainId))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetTokenInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.TokenInfo != nil {
		l = m.TokenInfo.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *EstimateAmtRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcChainId != 0 {
		n += 1 + sovGateway(uint64(m.SrcChainId))
	}
	if m.DstChainId != 0 {
		n += 1 + sovGateway(uint64(m.DstChainId))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Amt)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.UsrAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.SlippageTolerance != 0 {
		n += 1 + sovGateway(uint64(m.SlippageTolerance))
	}
	if m.IsPegged {
		n += 2
	}
	return n
}

func (m *EstimateAmtResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EqValueTokenAmt)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.BridgeRate != 0 {
		n += 5
	}
	l = len(m.PercFee)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.SlippageTolerance != 0 {
		n += 1 + sovGateway(uint64(m.SlippageTolerance))
	}
	if m.MaxSlippage != 0 {
		n += 1 + sovGateway(uint64(m.MaxSlippage))
	}
	l = len(m.BaseFee)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EstimatedReceiveAmt)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *WithdrawInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGateway(uint64(m.ChainId))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.SlippageTolerance != 0 {
		n += 1 + sovGateway(uint64(m.SlippageTolerance))
	}
	return n
}

func (m *EstimateWithdrawAmtRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SrcWithdraws) > 0 {
		for _, e := range m.SrcWithdraws {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.DstChainId != 0 {
		n += 1 + sovGateway(uint64(m.DstChainId))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.UsrAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *EstimateWithdrawAmtResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.ReqAmt) > 0 {
		for k, v := range m.ReqAmt {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGateway(uint64(l))
			}
			mapEntrySize := 1 + sovGateway(uint64(k)) + l
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EstimateWithdrawAmt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EqValueTokenAmt)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.BridgeRate != 0 {
		n += 5
	}
	l = len(m.PercFee)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.BaseFee)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.SlippageTolerance != 0 {
		n += 1 + sovGateway(uint64(m.SlippageTolerance))
	}
	if m.MaxSlippage != 0 {
		n += 1 + sovGateway(uint64(m.MaxSlippage))
	}
	return n
}

func (m *GetLPInfoListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *LPInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != nil {
		l = m.Chain.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Liquidity != 0 {
		n += 9
	}
	l = len(m.LiquidityAmt)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.HasFarmingSessions {
		n += 2
	}
	if m.LpFeeEarning != 0 {
		n += 9
	}
	if m.FarmingRewardEarning != 0 {
		n += 9
	}
	if m.Volume_24H != 0 {
		n += 9
	}
	if m.TotalLiquidity != 0 {
		n += 9
	}
	l = len(m.TotalLiquidityAmt)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.LpFeeEarningApy != 0 {
		n += 9
	}
	if m.FarmingApy != 0 {
		n += 9
	}
	if len(m.FarmingSessionTokens) > 0 {
		for _, e := range m.FarmingSessionTokens {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *GetLPInfoListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.LpInfo) > 0 {
		for _, e := range m.LpInfo {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *WithdrawLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawReq)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EstimatedReceivedAmt)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.MethodType != 0 {
		n += 1 + sovGateway(uint64(m.MethodType))
	}
	return n
}

func (m *WithdrawLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.SeqNum != 0 {
		n += 1 + sovGateway(uint64(m.SeqNum))
	}
	return n
}

func (m *UnlockFarmingRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *UnlockFarmingRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetFarmingRewardDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetFarmingRewardDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *QueryLiquidityStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqNum != 0 {
		n += 1 + sovGateway(uint64(m.SeqNum))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.LpAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovGateway(uint64(m.ChainId))
	}
	if m.Type != 0 {
		n += 1 + sovGateway(uint64(m.Type))
	}
	return n
}

func (m *TransferHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransferId)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.SrcSendInfo != nil {
		l = m.SrcSendInfo.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.DstReceivedInfo != nil {
		l = m.DstReceivedInfo.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovGateway(uint64(m.Ts))
	}
	l = len(m.SrcBlockTxLink)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.DstBlockTxLink)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovGateway(uint64(m.Status))
	}
	if m.RefundReason != 0 {
		n += 1 + sovGateway(uint64(m.RefundReason))
	}
	return n
}

func (m *LPHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != nil {
		l = m.Chain.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovGateway(uint64(m.Ts))
	}
	l = len(m.BlockTxLink)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovGateway(uint64(m.Status))
	}
	if m.Type != 0 {
		n += 1 + sovGateway(uint64(m.Type))
	}
	if m.SeqNum != 0 {
		n += 1 + sovGateway(uint64(m.SeqNum))
	}
	if m.MethodType != 0 {
		n += 1 + sovGateway(uint64(m.MethodType))
	}
	if m.Nonce != 0 {
		n += 1 + sovGateway(uint64(m.Nonce))
	}
	return n
}

func (m *TransferHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovGateway(uint64(m.PageSize))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *TransferHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.CurrentSize != 0 {
		n += 1 + sovGateway(uint64(m.CurrentSize))
	}
	return n
}

func (m *LPHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovGateway(uint64(m.PageSize))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *LPHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.CurrentSize != 0 {
		n += 1 + sovGateway(uint64(m.CurrentSize))
	}
	return n
}

func (m *RewardingDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *Reward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amt != 0 {
		n += 9
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *RewardingDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.UsdPrice) > 0 {
		for k, v := range m.UsdPrice {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if len(m.HistoricalCumulativeRewards) > 0 {
		for _, e := range m.HistoricalCumulativeRewards {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.UnlockedCumulativeRewards) > 0 {
		for _, e := range m.UnlockedCumulativeRewards {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *UpdateChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != nil {
		l = m.Chain.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.TxUrlPrefix)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *UpdateChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Chain != nil {
		l = m.Chain.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.TxUrlPrefix)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *UpdateTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGateway(uint64(m.ChainId))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.TokenIcon)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *UpdateTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *StakingConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StakingConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ViewerContract)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.StakingContract)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.StakingRewardContract)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.CelrContract)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *UnlockStakingRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *UnlockStakingRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetStakingRewardDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetStakingRewardDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Detail != nil {
		l = m.Detail.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetTotalLiquidityProviderTokenBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainIds) > 0 {
		l = 0
		for _, e := range m.ChainIds {
			l += sovGateway(uint64(e))
		}
		n += 1 + sovGateway(uint64(l)) + l
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetTotalLiquidityProviderTokenBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.TotalLiq) > 0 {
		for k, v := range m.TotalLiq {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGateway(uint64(k)) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetAbnormalStatusInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAbnormalStatusInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *AbnormalStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovGateway(uint64(m.ChainId))
	}
	if m.DstChainId != 0 {
		n += 1 + sovGateway(uint64(m.DstChainId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.PeggedInfo)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.SrcTransferId)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetInfoByTxHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGateway(uint64(m.ChainId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovGateway(uint64(m.Type))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetInfoByTxHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != 0 {
		n += 1 + sovGateway(uint64(m.Operation))
	}
	if m.Status != 0 {
		n += 1 + sovGateway(uint64(m.Status))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *FixEventMissRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGateway(uint64(m.ChainId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovGateway(uint64(m.Type))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *FixEventMissResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetAllConfigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExtendedPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeggedPair != nil {
		l = m.PeggedPair.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.MinDeposit)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.MaxDeposit)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.MinBurn)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.MaxBurn)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetAllConfigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.PeggedPairs) > 0 {
		for _, e := range m.PeggedPairs {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.CbrConfig != nil {
		l = m.CbrConfig.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetCbrConfigsOnChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGateway(uint64(m.ChainId))
	}
	return n
}

func (m *ExtendedToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.DelayThreshold)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EpochVolumeCaps)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.MinSend)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.MaxSend)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.MinAdd)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetCbrConfigsOnChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.DelayPeriod)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EpochLength)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.NativeWrap)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *RetentionRewardsEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovGateway(uint64(m.EventId))
	}
	if m.EventStartTime != 0 {
		n += 1 + sovGateway(uint64(m.EventStartTime))
	}
	if m.EventEndTime != 0 {
		n += 1 + sovGateway(uint64(m.EventEndTime))
	}
	if m.Wrapper != nil {
		l = m.Wrapper.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventPromoImgUrl)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventFaqLinkUrl)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventRewardsTooltip)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventDescription)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventTitle)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.EventMaxRewardCap != 0 {
		n += 9
	}
	if m.SoFarSumReward != 0 {
		n += 9
	}
	return n
}

func (m *RetentionRewardsEventLevelConfigWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LevelConfig) > 0 {
		for k, v := range m.LevelConfig {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGateway(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RetentionRewardsLevelConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MaxReward)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.MaxTransferVolume != 0 {
		n += 9
	}
	return n
}

func (m *GetRetentionRewardsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetRetentionRewardsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.EventId != 0 {
		n += 1 + sovGateway(uint64(m.EventId))
	}
	if m.EventEndTime != 0 {
		n += 1 + sovGateway(uint64(m.EventEndTime))
	}
	l = len(m.MaxReward)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.MaxTransferVolume != 0 {
		n += 9
	}
	l = len(m.CurrentReward)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.CelrUsdPrice != 0 {
		n += 9
	}
	if m.ClaimTime != 0 {
		n += 1 + sovGateway(uint64(m.ClaimTime))
	}
	l = m.Signature.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.EventPromoImgUrl)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventFaqLinkUrl)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventRewardsTooltip)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventDescription)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventTitle)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.EventMaxRewardCap != 0 {
		n += 9
	}
	if m.SoFarSumReward != 0 {
		n += 10
	}
	return n
}

func (m *ClaimRetentionRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *ClaimRetentionRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.EventId != 0 {
		n += 1 + sovGateway(uint64(m.EventId))
	}
	l = len(m.CurrentReward)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = m.Signature.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *GetIncentiveCampaignCelrRankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetIncentiveCampaignCelrRankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Ranks) > 0 {
		for _, e := range m.Ranks {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.UpdateTime != 0 {
		n += 1 + sovGateway(uint64(m.UpdateTime))
	}
	return n
}

func (m *GetIncentiveCampaignBnbRankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetIncentiveCampaignBnbRankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Ranks) > 0 {
		for _, e := range m.Ranks {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.UpdateTime != 0 {
		n += 1 + sovGateway(uint64(m.UpdateTime))
	}
	return n
}

func (m *InIncentiveCampaignBnbWhiteListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *InIncentiveCampaignBnbWhiteListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Eligible {
		n += 2
	}
	return n
}

func (m *IncentiveCampaignRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovGateway(uint64(m.Rank))
	}
	if m.Volume != 0 {
		n += 9
	}
	return n
}

func (m *FeeRebateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovGateway(uint64(m.EventId))
	}
	if m.EventStartTime != 0 {
		n += 1 + sovGateway(uint64(m.EventStartTime))
	}
	if m.EventEndTime != 0 {
		n += 1 + sovGateway(uint64(m.EventEndTime))
	}
	if m.Wrapper != nil {
		l = m.Wrapper.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.EventMaxRewardCap != 0 {
		n += 9
	}
	if m.SoFarSumReward != 0 {
		n += 9
	}
	return n
}

func (m *FeeRebateEventLevelConfigWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LevelDivisionLowerBound) > 0 {
		n += 1 + sovGateway(uint64(len(m.LevelDivisionLowerBound)*8)) + len(m.LevelDivisionLowerBound)*8
	}
	if len(m.LevelConfig) > 0 {
		for k, v := range m.LevelConfig {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGateway(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FeeRebateLevelConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RebatePortion != 0 {
		n += 9
	}
	l = len(m.MaxReward)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetFeeRebateInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetFeeRebateInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.EventId != 0 {
		n += 1 + sovGateway(uint64(m.EventId))
	}
	if m.EventEndTime != 0 {
		n += 1 + sovGateway(uint64(m.EventEndTime))
	}
	if m.RebatePortion != 0 {
		n += 9
	}
	l = len(m.Reward)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.CelrUsdPrice != 0 {
		n += 9
	}
	if m.ClaimTime != 0 {
		n += 1 + sovGateway(uint64(m.ClaimTime))
	}
	l = m.Signature.Size()
	n += 1 + l + sovGateway(uint64(l))
	if m.EventMaxRewardCap != 0 {
		n += 9
	}
	if m.SoFarSumReward != 0 {
		n += 9
	}
	return n
}

func (m *ClaimFeeRebateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *ClaimFeeRebateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.EventId != 0 {
		n += 1 + sovGateway(uint64(m.EventId))
	}
	l = len(m.Reward)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = m.Signature.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *BscCampaignEventConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovGateway(uint64(m.EventId))
	}
	if m.EventStartTime != 0 {
		n += 1 + sovGateway(uint64(m.EventStartTime))
	}
	if m.EventEndTime != 0 {
		n += 1 + sovGateway(uint64(m.EventEndTime))
	}
	l = len(m.EventPromoImgUrl)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventFaqLinkUrl)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventRewardsTooltip)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventDescription)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.EventTitle)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.WbnbAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.RewardContractAddr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.EventMaxRewardCap != 0 {
		n += 9
	}
	if m.SoFarSumReward != 0 {
		n += 9
	}
	l = len(m.MaxReward)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.MaxTransferVolume != 0 {
		n += 9
	}
	if m.TransferWhiteList != nil {
		l = m.TransferWhiteList.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *BscCampaignTransferWhiteListWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransferWhiteList) > 0 {
		for k, v := range m.TransferWhiteList {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGateway(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BscCampaignTransferWhiteList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainIds) > 0 {
		l = 0
		for _, e := range m.ChainIds {
			l += sovGateway(uint64(e))
		}
		n += 1 + sovGateway(uint64(l)) + l
	}
	return n
}

func (m *GetBscCampaignInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *BscCampaignInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventConfig != nil {
		l = m.EventConfig.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.CurrentTransferVolume != 0 {
		n += 9
	}
	if m.WbnbUsdPrice != 0 {
		n += 9
	}
	if m.ClaimTime != 0 {
		n += 1 + sovGateway(uint64(m.ClaimTime))
	}
	l = m.Signature.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *GetBscCampaignInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *ClaimGetBscCampaignRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.EventId != 0 {
		n += 1 + sovGateway(uint64(m.EventId))
	}
	return n
}

func (m *ClaimGetBscCampaignRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.EventId != 0 {
		n += 1 + sovGateway(uint64(m.EventId))
	}
	l = len(m.CurrentReward)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = m.Signature.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *GetCurrentBlockNumberByNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCurrentBlockNumberByNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Reports) > 0 {
		for k, v := range m.Reports {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGateway(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if len(m.ProblematicAddrs) > 0 {
		for _, s := range m.ProblematicAddrs {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *ErrMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovGateway(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func sovGateway(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGateway(x uint64) (n int) {
	return sovGateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InitPegRefundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitPegRefundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitPegRefundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = append(m.RefId[:0], dAtA[iNdEx:postIndex]...)
			if m.RefId == nil {
				m.RefId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitPegRefundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitPegRefundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitPegRefundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawReq", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawReq = append(m.WithdrawReq[:0], dAtA[iNdEx:postIndex]...)
			if m.WithdrawReq == nil {
				m.WithdrawReq = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsrBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsrBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsrBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsrAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsrAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsrBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsrBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsrBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimPegBridgeFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimPegBridgeFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimPegBridgeFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.MsgClaimFee{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimPegBridgeFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimPegBridgeFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimPegBridgeFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &types.MsgClaimFeeResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCampaignScoresRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCampaignScoresRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCampaignScoresRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlock", wireType)
			}
			m.BeginBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCampaignScoresResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCampaignScoresResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCampaignScoresResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &CampaignScore{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsrAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsrAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types1.WithdrawStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WdOnchain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WdOnchain = append(m.WdOnchain[:0], dAtA[iNdEx:postIndex]...)
			if m.WdOnchain == nil {
				m.WdOnchain = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortedSigs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortedSigs = append(m.SortedSigs, make([]byte, postIndex-iNdEx))
			copy(m.SortedSigs[len(m.SortedSigs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, make([]byte, postIndex-iNdEx))
			copy(m.Signers[len(m.Signers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Powers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Powers = append(m.Powers, make([]byte, postIndex-iNdEx))
			copy(m.Powers[len(m.Powers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTxLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockTxLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDelay", wireType)
			}
			m.BlockDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockDelay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDelay", wireType)
			}
			m.BlockDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockDelay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasTokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExploreUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExploreUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropGasAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropGasAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropGasCostAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropGasCostAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropGasBalanceAlert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropGasBalanceAlert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedGasCost", wireType)
			}
			m.SuggestedGasCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuggestedGasCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainTokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainTokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainTokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token, &TokenInfo{})
			if err := m.Token[len(m.Token)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &types1.Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chain == nil {
				m.Chain = &Chain{}
			}
			if err := m.Chain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &types1.Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransferStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransferStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransferStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransferStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransferStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransferStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types1.TransferHistoryStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WdOnchain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WdOnchain = append(m.WdOnchain[:0], dAtA[iNdEx:postIndex]...)
			if m.WdOnchain == nil {
				m.WdOnchain = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortedSigs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortedSigs = append(m.SortedSigs, make([]byte, postIndex-iNdEx))
			copy(m.SortedSigs[len(m.SortedSigs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, make([]byte, postIndex-iNdEx))
			copy(m.Signers[len(m.Signers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Powers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Powers = append(m.Powers, make([]byte, postIndex-iNdEx))
			copy(m.Powers[len(m.Powers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundReason", wireType)
			}
			m.RefundReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefundReason |= types1.XferStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDelay", wireType)
			}
			m.BlockDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockDelay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcBlockTxLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcBlockTxLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstBlockTxLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstBlockTxLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransferConfigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransferConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransferConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransferConfigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransferConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransferConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, &Chain{})
			if err := m.Chains[len(m.Chains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainToken == nil {
				m.ChainToken = make(map[uint32]*ChainTokenInfo)
			}
			var mapkey uint32
			var mapvalue *ChainTokenInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGateway
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGateway
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ChainTokenInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ChainToken[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingRewardContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingRewardContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedPairConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggedPairConfigs = append(m.PeggedPairConfigs, &PeggedPairConfig{})
			if err := m.PeggedPairConfigs[len(m.PeggedPairConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeggedPairConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeggedPairConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeggedPairConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgChainId", wireType)
			}
			m.OrgChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgToken == nil {
				m.OrgToken = &TokenInfo{}
			}
			if err := m.OrgToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedChainId", wireType)
			}
			m.PeggedChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeggedChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeggedToken == nil {
				m.PeggedToken = &TokenInfo{}
			}
			if err := m.PeggedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedDepositContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggedDepositContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedBurnContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggedBurnContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicalTokenContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanonicalTokenContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTokenInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenInfo == nil {
				m.TokenInfo = &TokenInfo{}
			}
			if err := m.TokenInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateAmtRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateAmtRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateAmtRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			m.SrcChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainId", wireType)
			}
			m.DstChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsrAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsrAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlippageTolerance", wireType)
			}
			m.SlippageTolerance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlippageTolerance |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPegged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPegged = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateAmtResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateAmtResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateAmtResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EqValueTokenAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EqValueTokenAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BridgeRate = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PercFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlippageTolerance", wireType)
			}
			m.SlippageTolerance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlippageTolerance |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSlippage", wireType)
			}
			m.MaxSlippage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSlippage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedReceiveAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstimatedReceiveAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlippageTolerance", wireType)
			}
			m.SlippageTolerance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlippageTolerance |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateWithdrawAmtRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateWithdrawAmtRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateWithdrawAmtRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcWithdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcWithdraws = append(m.SrcWithdraws, &WithdrawInfo{})
			if err := m.SrcWithdraws[len(m.SrcWithdraws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainId", wireType)
			}
			m.DstChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsrAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsrAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateWithdrawAmtResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateWithdrawAmtResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateWithdrawAmtResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqAmt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReqAmt == nil {
				m.ReqAmt = make(map[uint32]*EstimateWithdrawAmt)
			}
			var mapkey uint32
			var mapvalue *EstimateWithdrawAmt
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGateway
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGateway
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EstimateWithdrawAmt{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReqAmt[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateWithdrawAmt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateWithdrawAmt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateWithdrawAmt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EqValueTokenAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EqValueTokenAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BridgeRate = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PercFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlippageTolerance", wireType)
			}
			m.SlippageTolerance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlippageTolerance |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSlippage", wireType)
			}
			m.MaxSlippage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSlippage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLPInfoListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLPInfoListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLPInfoListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chain == nil {
				m.Chain = &Chain{}
			}
			if err := m.Chain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &TokenInfo{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Liquidity = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasFarmingSessions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasFarmingSessions = bool(v != 0)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpFeeEarning", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LpFeeEarning = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingRewardEarning", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FarmingRewardEarning = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume_24H", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Volume_24H = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TotalLiquidity = float64(math.Float64frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidityAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalLiquidityAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpFeeEarningApy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LpFeeEarningApy = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingApy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FarmingApy = float64(math.Float64frombits(v))
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingSessionTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingSessionTokens = append(m.FarmingSessionTokens, &TokenInfo{})
			if err := m.FarmingSessionTokens[len(m.FarmingSessionTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLPInfoListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLPInfoListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLPInfoListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpInfo = append(m.LpInfo, &LPInfo{})
			if err := m.LpInfo[len(m.LpInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawReq", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawReq = append(m.WithdrawReq[:0], dAtA[iNdEx:postIndex]...)
			if m.WithdrawReq == nil {
				m.WithdrawReq = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedReceivedAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstimatedReceivedAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodType", wireType)
			}
			m.MethodType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MethodType |= WithdrawMethodType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNum", wireType)
			}
			m.SeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockFarmingRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockFarmingRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockFarmingRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockFarmingRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockFarmingRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockFarmingRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFarmingRewardDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFarmingRewardDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFarmingRewardDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFarmingRewardDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFarmingRewardDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFarmingRewardDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &types2.RewardClaimDetails{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNum", wireType)
			}
			m.SeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= LPType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcSendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcSendInfo == nil {
				m.SrcSendInfo = &TransferInfo{}
			}
			if err := m.SrcSendInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstReceivedInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstReceivedInfo == nil {
				m.DstReceivedInfo = &TransferInfo{}
			}
			if err := m.DstReceivedInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcBlockTxLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcBlockTxLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstBlockTxLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstBlockTxLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types1.TransferHistoryStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundReason", wireType)
			}
			m.RefundReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefundReason |= types1.XferStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chain == nil {
				m.Chain = &Chain{}
			}
			if err := m.Chain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &TokenInfo{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTxLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockTxLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types1.WithdrawStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= LPType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNum", wireType)
			}
			m.SeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodType", wireType)
			}
			m.MethodType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MethodType |= WithdrawMethodType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &TransferHistory{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSize", wireType)
			}
			m.CurrentSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &LPHistory{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSize", wireType)
			}
			m.CurrentSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardingDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardingDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardingDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amt", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amt = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &types1.Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardingDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardingDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardingDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsdPrice == nil {
				m.UsdPrice = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UsdPrice[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalCumulativeRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoricalCumulativeRewards = append(m.HistoricalCumulativeRewards, &Reward{})
			if err := m.HistoricalCumulativeRewards[len(m.HistoricalCumulativeRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockedCumulativeRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockedCumulativeRewards = append(m.UnlockedCumulativeRewards, &Reward{})
			if err := m.UnlockedCumulativeRewards[len(m.UnlockedCumulativeRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chain == nil {
				m.Chain = &Chain{}
			}
			if err := m.Chain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxUrlPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxUrlPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chain == nil {
				m.Chain = &Chain{}
			}
			if err := m.Chain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxUrlPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxUrlPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &TokenInfo{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewerContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewerContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingRewardContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingRewardContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelrContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CelrContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockStakingRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockStakingRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockStakingRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockStakingRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockStakingRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockStakingRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakingRewardDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakingRewardDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakingRewardDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakingRewardDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakingRewardDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakingRewardDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = &types3.StakingRewardClaimInfo{}
			}
			if err := m.Detail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalLiquidityProviderTokenBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalLiquidityProviderTokenBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalLiquidityProviderTokenBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChainIds = append(m.ChainIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChainIds) == 0 {
					m.ChainIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChainIds = append(m.ChainIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalLiquidityProviderTokenBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalLiquidityProviderTokenBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalLiquidityProviderTokenBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalLiq == nil {
				m.TotalLiq = make(map[uint64]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGateway
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TotalLiq[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAbnormalStatusInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAbnormalStatusInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAbnormalStatusInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAbnormalStatusInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAbnormalStatusInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAbnormalStatusInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &AbnormalStatusInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AbnormalStatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbnormalStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbnormalStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChainId", wireType)
			}
			m.DstChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggedInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTransferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTransferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoByTxHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoByTxHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoByTxHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CSType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoByTxHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoByTxHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoByTxHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= CSOperation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= UserCaseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixEventMissRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixEventMissRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixEventMissRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CSType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixEventMissResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixEventMissResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixEventMissResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllConfigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeggedPair == nil {
				m.PeggedPair = &types.OrigPeggedPair{}
			}
			if err := m.PeggedPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDeposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxDeposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBurn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinBurn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBurn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxBurn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllConfigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggedPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggedPairs = append(m.PeggedPairs, &ExtendedPair{})
			if err := m.PeggedPairs[len(m.PeggedPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbrConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CbrConfig == nil {
				m.CbrConfig = &types1.CbrConfig{}
			}
			if err := m.CbrConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbrConfigsOnChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbrConfigsOnChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbrConfigsOnChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &types1.Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelayThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochVolumeCaps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochVolumeCaps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinSend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxSend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinAdd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCbrConfigsOnChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCbrConfigsOnChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCbrConfigsOnChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelayPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochLength = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeWrap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeWrap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &ExtendedToken{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionRewardsEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionRewardsEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionRewardsEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStartTime", wireType)
			}
			m.EventStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventEndTime", wireType)
			}
			m.EventEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventEndTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wrapper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wrapper == nil {
				m.Wrapper = &RetentionRewardsEventLevelConfigWrapper{}
			}
			if err := m.Wrapper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPromoImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventPromoImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFaqLinkUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventFaqLinkUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventRewardsTooltip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventRewardsTooltip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventMaxRewardCap", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EventMaxRewardCap = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoFarSumReward", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SoFarSumReward = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionRewardsEventLevelConfigWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionRewardsEventLevelConfigWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionRewardsEventLevelConfigWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LevelConfig == nil {
				m.LevelConfig = make(map[string]*RetentionRewardsLevelConfig)
			}
			var mapkey string
			var mapvalue *RetentionRewardsLevelConfig
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGateway
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGateway
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RetentionRewardsLevelConfig{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LevelConfig[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionRewardsLevelConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionRewardsLevelConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionRewardsLevelConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxReward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTransferVolume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxTransferVolume = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionRewardsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRetentionRewardsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRetentionRewardsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRetentionRewardsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRetentionRewardsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRetentionRewardsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventEndTime", wireType)
			}
			m.EventEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventEndTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxReward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTransferVolume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxTransferVolume = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentReward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelrUsdPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CelrUsdPrice = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTime", wireType)
			}
			m.ClaimTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPromoImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventPromoImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFaqLinkUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventFaqLinkUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventRewardsTooltip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventRewardsTooltip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventMaxRewardCap", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EventMaxRewardCap = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoFarSumReward", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SoFarSumReward = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimRetentionRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimRetentionRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimRetentionRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimRetentionRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimRetentionRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimRetentionRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentReward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetIncentiveCampaignCelrRankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetIncentiveCampaignCelrRankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetIncentiveCampaignCelrRankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetIncentiveCampaignCelrRankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetIncentiveCampaignCelrRankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetIncentiveCampaignCelrRankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranks = append(m.Ranks, &IncentiveCampaignRank{})
			if err := m.Ranks[len(m.Ranks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetIncentiveCampaignBnbRankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetIncentiveCampaignBnbRankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetIncentiveCampaignBnbRankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetIncentiveCampaignBnbRankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetIncentiveCampaignBnbRankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetIncentiveCampaignBnbRankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranks = append(m.Ranks, &IncentiveCampaignRank{})
			if err := m.Ranks[len(m.Ranks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InIncentiveCampaignBnbWhiteListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InIncentiveCampaignBnbWhiteListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InIncentiveCampaignBnbWhiteListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InIncentiveCampaignBnbWhiteListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InIncentiveCampaignBnbWhiteListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InIncentiveCampaignBnbWhiteListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eligible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Eligible = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentiveCampaignRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentiveCampaignRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentiveCampaignRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Volume = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeRebateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeRebateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeRebateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStartTime", wireType)
			}
			m.EventStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventEndTime", wireType)
			}
			m.EventEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventEndTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wrapper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wrapper == nil {
				m.Wrapper = &FeeRebateEventLevelConfigWrapper{}
			}
			if err := m.Wrapper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventMaxRewardCap", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EventMaxRewardCap = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoFarSumReward", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SoFarSumReward = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeRebateEventLevelConfigWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeRebateEventLevelConfigWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeRebateEventLevelConfigWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.LevelDivisionLowerBound = append(m.LevelDivisionLowerBound, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.LevelDivisionLowerBound) == 0 {
					m.LevelDivisionLowerBound = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.LevelDivisionLowerBound = append(m.LevelDivisionLowerBound, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelDivisionLowerBound", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LevelConfig == nil {
				m.LevelConfig = make(map[string]*FeeRebateLevelConfig)
			}
			var mapkey string
			var mapvalue *FeeRebateLevelConfig
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGateway
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGateway
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FeeRebateLevelConfig{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LevelConfig[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeRebateLevelConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeRebateLevelConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeRebateLevelConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebatePortion", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RebatePortion = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxReward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFeeRebateInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFeeRebateInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFeeRebateInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFeeRebateInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFeeRebateInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFeeRebateInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventEndTime", wireType)
			}
			m.EventEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventEndTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebatePortion", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RebatePortion = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelrUsdPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CelrUsdPrice = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTime", wireType)
			}
			m.ClaimTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventMaxRewardCap", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EventMaxRewardCap = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoFarSumReward", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SoFarSumReward = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimFeeRebateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimFeeRebateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimFeeRebateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimFeeRebateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimFeeRebateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimFeeRebateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BscCampaignEventConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BscCampaignEventConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BscCampaignEventConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStartTime", wireType)
			}
			m.EventStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventEndTime", wireType)
			}
			m.EventEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventEndTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPromoImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventPromoImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventFaqLinkUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventFaqLinkUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventRewardsTooltip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventRewardsTooltip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WbnbAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WbnbAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventMaxRewardCap", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EventMaxRewardCap = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoFarSumReward", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SoFarSumReward = float64(math.Float64frombits(v))
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxReward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTransferVolume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxTransferVolume = float64(math.Float64frombits(v))
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferWhiteList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferWhiteList == nil {
				m.TransferWhiteList = &BscCampaignTransferWhiteListWrapper{}
			}
			if err := m.TransferWhiteList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BscCampaignTransferWhiteListWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BscCampaignTransferWhiteListWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BscCampaignTransferWhiteListWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferWhiteList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferWhiteList == nil {
				m.TransferWhiteList = make(map[string]*BscCampaignTransferWhiteList)
			}
			var mapkey string
			var mapvalue *BscCampaignTransferWhiteList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGateway
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGateway
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BscCampaignTransferWhiteList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TransferWhiteList[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BscCampaignTransferWhiteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BscCampaignTransferWhiteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BscCampaignTransferWhiteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChainIds = append(m.ChainIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGateway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGateway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChainIds) == 0 {
					m.ChainIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChainIds = append(m.ChainIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBscCampaignInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBscCampaignInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBscCampaignInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BscCampaignInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BscCampaignInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BscCampaignInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventConfig == nil {
				m.EventConfig = &BscCampaignEventConfig{}
			}
			if err := m.EventConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTransferVolume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurrentTransferVolume = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WbnbUsdPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WbnbUsdPrice = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTime", wireType)
			}
			m.ClaimTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBscCampaignInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBscCampaignInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBscCampaignInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &BscCampaignInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimGetBscCampaignRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimGetBscCampaignRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimGetBscCampaignRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimGetBscCampaignRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimGetBscCampaignRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimGetBscCampaignRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentReward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentBlockNumberByNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentBlockNumberByNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentBlockNumberByNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentBlockNumberByNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentBlockNumberByNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentBlockNumberByNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrMsg{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reports == nil {
				m.Reports = make(map[string]*relayer.SgnAnalyticsReport)
			}
			var mapkey string
			var mapvalue *relayer.SgnAnalyticsReport
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGateway
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGateway
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGateway
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &relayer.SgnAnalyticsReport{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Reports[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProblematicAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProblematicAddrs = append(m.ProblematicAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGateway
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGateway
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGateway        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGateway = fmt.Errorf("proto: unexpected end of group")
)
