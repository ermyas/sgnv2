// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: proto/sgn/cbridge/v1/gateway.proto

package webapi

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransferHistoryStatus int32

const (
	TransferHistoryStatus_TRANSFER_UNKNOWN                  TransferHistoryStatus = 0
	TransferHistoryStatus_TRANSFER_SUBMITTING               TransferHistoryStatus = 1
	TransferHistoryStatus_TRANSFER_FAILED                   TransferHistoryStatus = 2
	TransferHistoryStatus_TRANSFER_WAITING_FOR_FUND_RELEASE TransferHistoryStatus = 3
	TransferHistoryStatus_TRANSFER_COMPLETED                TransferHistoryStatus = 4
	TransferHistoryStatus_TRANSFER_TO_BE_REFUNDED           TransferHistoryStatus = 5
	TransferHistoryStatus_TRANSFER_REQUESTING_REFUND        TransferHistoryStatus = 6
	TransferHistoryStatus_TRANSFER_REFUND_TO_BE_CONFIRMED   TransferHistoryStatus = 7
	TransferHistoryStatus_TRANSFER_CONFIRMING_YOUR_REFUND   TransferHistoryStatus = 8
	TransferHistoryStatus_TRANSFER_REFUNDED                 TransferHistoryStatus = 9
)

// Enum value maps for TransferHistoryStatus.
var (
	TransferHistoryStatus_name = map[int32]string{
		0: "TRANSFER_UNKNOWN",
		1: "TRANSFER_SUBMITTING",
		2: "TRANSFER_FAILED",
		3: "TRANSFER_WAITING_FOR_FUND_RELEASE",
		4: "TRANSFER_COMPLETED",
		5: "TRANSFER_TO_BE_REFUNDED",
		6: "TRANSFER_REQUESTING_REFUND",
		7: "TRANSFER_REFUND_TO_BE_CONFIRMED",
		8: "TRANSFER_CONFIRMING_YOUR_REFUND",
		9: "TRANSFER_REFUNDED",
	}
	TransferHistoryStatus_value = map[string]int32{
		"TRANSFER_UNKNOWN":                  0,
		"TRANSFER_SUBMITTING":               1,
		"TRANSFER_FAILED":                   2,
		"TRANSFER_WAITING_FOR_FUND_RELEASE": 3,
		"TRANSFER_COMPLETED":                4,
		"TRANSFER_TO_BE_REFUNDED":           5,
		"TRANSFER_REQUESTING_REFUND":        6,
		"TRANSFER_REFUND_TO_BE_CONFIRMED":   7,
		"TRANSFER_CONFIRMING_YOUR_REFUND":   8,
		"TRANSFER_REFUNDED":                 9,
	}
)

func (x TransferHistoryStatus) Enum() *TransferHistoryStatus {
	p := new(TransferHistoryStatus)
	*p = x
	return p
}

func (x TransferHistoryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferHistoryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sgn_cbridge_v1_gateway_proto_enumTypes[0].Descriptor()
}

func (TransferHistoryStatus) Type() protoreflect.EnumType {
	return &file_proto_sgn_cbridge_v1_gateway_proto_enumTypes[0]
}

func (x TransferHistoryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferHistoryStatus.Descriptor instead.
func (TransferHistoryStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{0}
}

type LPHistoryStatus int32

const (
	LPHistoryStatus_LP_UNKNOWN         LPHistoryStatus = 0
	LPHistoryStatus_LP_WAITING_FOR_SGN LPHistoryStatus = 1
	LPHistoryStatus_LP_WAITING_FOR_LP  LPHistoryStatus = 2
	LPHistoryStatus_LP_SUBMITTING      LPHistoryStatus = 3
	LPHistoryStatus_LP_COMPLETED       LPHistoryStatus = 4
	LPHistoryStatus_LP_FAILED          LPHistoryStatus = 5
)

// Enum value maps for LPHistoryStatus.
var (
	LPHistoryStatus_name = map[int32]string{
		0: "LP_UNKNOWN",
		1: "LP_WAITING_FOR_SGN",
		2: "LP_WAITING_FOR_LP",
		3: "LP_SUBMITTING",
		4: "LP_COMPLETED",
		5: "LP_FAILED",
	}
	LPHistoryStatus_value = map[string]int32{
		"LP_UNKNOWN":         0,
		"LP_WAITING_FOR_SGN": 1,
		"LP_WAITING_FOR_LP":  2,
		"LP_SUBMITTING":      3,
		"LP_COMPLETED":       4,
		"LP_FAILED":          5,
	}
)

func (x LPHistoryStatus) Enum() *LPHistoryStatus {
	p := new(LPHistoryStatus)
	*p = x
	return p
}

func (x LPHistoryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LPHistoryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sgn_cbridge_v1_gateway_proto_enumTypes[1].Descriptor()
}

func (LPHistoryStatus) Type() protoreflect.EnumType {
	return &file_proto_sgn_cbridge_v1_gateway_proto_enumTypes[1]
}

func (x LPHistoryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LPHistoryStatus.Descriptor instead.
func (LPHistoryStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{1}
}

type LPType int32

const (
	LPType_LP_TYPE_UNKNOWN LPType = 0
	LPType_LP_TYPE_ADD     LPType = 1
	LPType_LP_TYPE_REMOVE  LPType = 2
)

// Enum value maps for LPType.
var (
	LPType_name = map[int32]string{
		0: "LP_TYPE_UNKNOWN",
		1: "LP_TYPE_ADD",
		2: "LP_TYPE_REMOVE",
	}
	LPType_value = map[string]int32{
		"LP_TYPE_UNKNOWN": 0,
		"LP_TYPE_ADD":     1,
		"LP_TYPE_REMOVE":  2,
	}
)

func (x LPType) Enum() *LPType {
	p := new(LPType)
	*p = x
	return p
}

func (x LPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LPType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sgn_cbridge_v1_gateway_proto_enumTypes[2].Descriptor()
}

func (LPType) Type() protoreflect.EnumType {
	return &file_proto_sgn_cbridge_v1_gateway_proto_enumTypes[2]
}

func (x LPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LPType.Descriptor instead.
func (LPType) EnumDescriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{2}
}

type ErrCode int32

const (
	ErrCode_ERROR_CODE_UNDEFINED ErrCode = 0
)

// Enum value maps for ErrCode.
var (
	ErrCode_name = map[int32]string{
		0: "ERROR_CODE_UNDEFINED",
	}
	ErrCode_value = map[string]int32{
		"ERROR_CODE_UNDEFINED": 0,
	}
)

func (x ErrCode) Enum() *ErrCode {
	p := new(ErrCode)
	*p = x
	return p
}

func (x ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sgn_cbridge_v1_gateway_proto_enumTypes[3].Descriptor()
}

func (ErrCode) Type() protoreflect.EnumType {
	return &file_proto_sgn_cbridge_v1_gateway_proto_enumTypes[3]
}

func (x ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrCode.Descriptor instead.
func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{3}
}

type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *Chain) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Chain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chain) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type ChainTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token []*TokenInfo `protobuf:"bytes,1,rep,name=token,proto3" json:"token,omitempty"`
}

func (x *ChainTokenInfo) Reset() {
	*x = ChainTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainTokenInfo) ProtoMessage() {}

func (x *ChainTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainTokenInfo.ProtoReflect.Descriptor instead.
func (*ChainTokenInfo) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *ChainTokenInfo) GetToken() []*TokenInfo {
	if x != nil {
		return x.Token
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol  string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Decimal int32  `protobuf:"varint,3,opt,name=decimal,proto3" json:"decimal,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *Token) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Token) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Token) GetDecimal() int32 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

type TokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon  string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *TokenInfo) Reset() {
	*x = TokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfo) ProtoMessage() {}

func (x *TokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfo.ProtoReflect.Descriptor instead.
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *TokenInfo) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TokenInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TokenInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type TransferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain  *Chain  `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Token  *Token  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Amount float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TransferInfo) Reset() {
	*x = TransferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInfo) ProtoMessage() {}

func (x *TransferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInfo.ProtoReflect.Descriptor instead.
func (*TransferInfo) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *TransferInfo) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *TransferInfo) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TransferInfo) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type SetAdvancedInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr              string  `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	SlippageTolerance float32 `protobuf:"fixed32,2,opt,name=slippage_tolerance,json=slippageTolerance,proto3" json:"slippage_tolerance,omitempty"`
}

func (x *SetAdvancedInfoRequest) Reset() {
	*x = SetAdvancedInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAdvancedInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAdvancedInfoRequest) ProtoMessage() {}

func (x *SetAdvancedInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAdvancedInfoRequest.ProtoReflect.Descriptor instead.
func (*SetAdvancedInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *SetAdvancedInfoRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *SetAdvancedInfoRequest) GetSlippageTolerance() float32 {
	if x != nil {
		return x.SlippageTolerance
	}
	return 0
}

type SetAdvancedInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *SetAdvancedInfoResponse) Reset() {
	*x = SetAdvancedInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAdvancedInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAdvancedInfoResponse) ProtoMessage() {}

func (x *SetAdvancedInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAdvancedInfoResponse.ProtoReflect.Descriptor instead.
func (*SetAdvancedInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *SetAdvancedInfoResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

type GetTransferConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTransferConfigsRequest) Reset() {
	*x = GetTransferConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferConfigsRequest) ProtoMessage() {}

func (x *GetTransferConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferConfigsRequest.ProtoReflect.Descriptor instead.
func (*GetTransferConfigsRequest) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{7}
}

type GetTransferConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err        *ErrMsg                    `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Chains     []*Chain                   `protobuf:"bytes,2,rep,name=chains,proto3" json:"chains,omitempty"`
	ChainToken map[uint64]*ChainTokenInfo `protobuf:"bytes,3,rep,name=chain_token,json=chainToken,proto3" json:"chain_token,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //map<chain_id, ChainTokenInfo>
}

func (x *GetTransferConfigsResponse) Reset() {
	*x = GetTransferConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferConfigsResponse) ProtoMessage() {}

func (x *GetTransferConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferConfigsResponse.ProtoReflect.Descriptor instead.
func (*GetTransferConfigsResponse) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *GetTransferConfigsResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *GetTransferConfigsResponse) GetChains() []*Chain {
	if x != nil {
		return x.Chains
	}
	return nil
}

func (x *GetTransferConfigsResponse) GetChainToken() map[uint64]*ChainTokenInfo {
	if x != nil {
		return x.ChainToken
	}
	return nil
}

type EstimateAmtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr       string  `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	SrcChainId uint64  `protobuf:"varint,2,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DstChainId uint64  `protobuf:"varint,3,opt,name=dst_chain_id,json=dstChainId,proto3" json:"dst_chain_id,omitempty"`
	TokenId    uint64  `protobuf:"varint,4,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Amt        float64 `protobuf:"fixed64,5,opt,name=amt,proto3" json:"amt,omitempty"` // how much token
}

func (x *EstimateAmtRequest) Reset() {
	*x = EstimateAmtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateAmtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateAmtRequest) ProtoMessage() {}

func (x *EstimateAmtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateAmtRequest.ProtoReflect.Descriptor instead.
func (*EstimateAmtRequest) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{9}
}

func (x *EstimateAmtRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *EstimateAmtRequest) GetSrcChainId() uint64 {
	if x != nil {
		return x.SrcChainId
	}
	return 0
}

func (x *EstimateAmtRequest) GetDstChainId() uint64 {
	if x != nil {
		return x.DstChainId
	}
	return 0
}

func (x *EstimateAmtRequest) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *EstimateAmtRequest) GetAmt() float64 {
	if x != nil {
		return x.Amt
	}
	return 0
}

type EstimateAmtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err                *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	BridgeRate         float32 `protobuf:"fixed32,2,opt,name=bridge_rate,json=bridgeRate,proto3" json:"bridge_rate,omitempty"`
	SlippageTolerance  float32 `protobuf:"fixed32,3,opt,name=slippage_tolerance,json=slippageTolerance,proto3" json:"slippage_tolerance,omitempty"`
	Fee                float64 `protobuf:"fixed64,4,opt,name=fee,proto3" json:"fee,omitempty"`                                                           // how much token
	MinimumReceivedAmt float64 `protobuf:"fixed64,5,opt,name=minimum_received_amt,json=minimumReceivedAmt,proto3" json:"minimum_received_amt,omitempty"` // how much token
}

func (x *EstimateAmtResponse) Reset() {
	*x = EstimateAmtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateAmtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateAmtResponse) ProtoMessage() {}

func (x *EstimateAmtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateAmtResponse.ProtoReflect.Descriptor instead.
func (*EstimateAmtResponse) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{10}
}

func (x *EstimateAmtResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *EstimateAmtResponse) GetBridgeRate() float32 {
	if x != nil {
		return x.BridgeRate
	}
	return 0
}

func (x *EstimateAmtResponse) GetSlippageTolerance() float32 {
	if x != nil {
		return x.SlippageTolerance
	}
	return 0
}

func (x *EstimateAmtResponse) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *EstimateAmtResponse) GetMinimumReceivedAmt() float64 {
	if x != nil {
		return x.MinimumReceivedAmt
	}
	return 0
}

type MarkTransferBeginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId         string        `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	SrcSendInfo        *TransferInfo `protobuf:"bytes,2,opt,name=src_send_info,json=srcSendInfo,proto3" json:"src_send_info,omitempty"`
	DstMinReceivedInfo *TransferInfo `protobuf:"bytes,3,opt,name=dst_min_received_info,json=dstMinReceivedInfo,proto3" json:"dst_min_received_info,omitempty"`
}

func (x *MarkTransferBeginRequest) Reset() {
	*x = MarkTransferBeginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTransferBeginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTransferBeginRequest) ProtoMessage() {}

func (x *MarkTransferBeginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTransferBeginRequest.ProtoReflect.Descriptor instead.
func (*MarkTransferBeginRequest) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{11}
}

func (x *MarkTransferBeginRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *MarkTransferBeginRequest) GetSrcSendInfo() *TransferInfo {
	if x != nil {
		return x.SrcSendInfo
	}
	return nil
}

func (x *MarkTransferBeginRequest) GetDstMinReceivedInfo() *TransferInfo {
	if x != nil {
		return x.DstMinReceivedInfo
	}
	return nil
}

type MarkTransferBeginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *MarkTransferBeginResponse) Reset() {
	*x = MarkTransferBeginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTransferBeginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTransferBeginResponse) ProtoMessage() {}

func (x *MarkTransferBeginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTransferBeginResponse.ProtoReflect.Descriptor instead.
func (*MarkTransferBeginResponse) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{12}
}

func (x *MarkTransferBeginResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

type GetLPInfoListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *GetLPInfoListRequest) Reset() {
	*x = GetLPInfoListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLPInfoListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLPInfoListRequest) ProtoMessage() {}

func (x *GetLPInfoListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLPInfoListRequest.ProtoReflect.Descriptor instead.
func (*GetLPInfoListRequest) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{13}
}

func (x *GetLPInfoListRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type LPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain      *Chain     `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Token      *TokenInfo `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Liquidity  float64    `protobuf:"fixed64,3,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Earning    float64    `protobuf:"fixed64,4,opt,name=earning,proto3" json:"earning,omitempty"`
	Tvl        float64    `protobuf:"fixed64,5,opt,name=tvl,proto3" json:"tvl,omitempty"`
	Volume_24H float64    `protobuf:"fixed64,6,opt,name=volume_24h,json=volume24h,proto3" json:"volume_24h,omitempty"`
	LpFeeRate  float64    `protobuf:"fixed64,7,opt,name=lp_fee_rate,json=lpFeeRate,proto3" json:"lp_fee_rate,omitempty"`
	Apy        float64    `protobuf:"fixed64,8,opt,name=apy,proto3" json:"apy,omitempty"`
}

func (x *LPInfo) Reset() {
	*x = LPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPInfo) ProtoMessage() {}

func (x *LPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPInfo.ProtoReflect.Descriptor instead.
func (*LPInfo) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{14}
}

func (x *LPInfo) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *LPInfo) GetToken() *TokenInfo {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LPInfo) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *LPInfo) GetEarning() float64 {
	if x != nil {
		return x.Earning
	}
	return 0
}

func (x *LPInfo) GetTvl() float64 {
	if x != nil {
		return x.Tvl
	}
	return 0
}

func (x *LPInfo) GetVolume_24H() float64 {
	if x != nil {
		return x.Volume_24H
	}
	return 0
}

func (x *LPInfo) GetLpFeeRate() float64 {
	if x != nil {
		return x.LpFeeRate
	}
	return 0
}

func (x *LPInfo) GetApy() float64 {
	if x != nil {
		return x.Apy
	}
	return 0
}

type GetLPInfoListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err    *ErrMsg   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	LpInfo []*LPInfo `protobuf:"bytes,2,rep,name=lp_info,json=lpInfo,proto3" json:"lp_info,omitempty"`
}

func (x *GetLPInfoListResponse) Reset() {
	*x = GetLPInfoListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLPInfoListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLPInfoListResponse) ProtoMessage() {}

func (x *GetLPInfoListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLPInfoListResponse.ProtoReflect.Descriptor instead.
func (*GetLPInfoListResponse) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{15}
}

func (x *GetLPInfoListResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *GetLPInfoListResponse) GetLpInfo() []*LPInfo {
	if x != nil {
		return x.LpInfo
	}
	return nil
}

type GetTotalLiquidityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *GetTotalLiquidityRequest) Reset() {
	*x = GetTotalLiquidityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalLiquidityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalLiquidityRequest) ProtoMessage() {}

func (x *GetTotalLiquidityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalLiquidityRequest.ProtoReflect.Descriptor instead.
func (*GetTotalLiquidityRequest) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{16}
}

func (x *GetTotalLiquidityRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type GetTotalLiquidityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err                       *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Liquidity                 float64 `protobuf:"fixed64,2,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Earning                   float64 `protobuf:"fixed64,3,opt,name=earning,proto3" json:"earning,omitempty"`
	FarmingRewarding          float64 `protobuf:"fixed64,4,opt,name=farming_rewarding,json=farmingRewarding,proto3" json:"farming_rewarding,omitempty"`
	UnclaimedFarmingRewarding float64 `protobuf:"fixed64,5,opt,name=unclaimed_farming_rewarding,json=unclaimedFarmingRewarding,proto3" json:"unclaimed_farming_rewarding,omitempty"`
}

func (x *GetTotalLiquidityResponse) Reset() {
	*x = GetTotalLiquidityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalLiquidityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalLiquidityResponse) ProtoMessage() {}

func (x *GetTotalLiquidityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalLiquidityResponse.ProtoReflect.Descriptor instead.
func (*GetTotalLiquidityResponse) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{17}
}

func (x *GetTotalLiquidityResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *GetTotalLiquidityResponse) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *GetTotalLiquidityResponse) GetEarning() float64 {
	if x != nil {
		return x.Earning
	}
	return 0
}

func (x *GetTotalLiquidityResponse) GetFarmingRewarding() float64 {
	if x != nil {
		return x.FarmingRewarding
	}
	return 0
}

func (x *GetTotalLiquidityResponse) GetUnclaimedFarmingRewarding() float64 {
	if x != nil {
		return x.UnclaimedFarmingRewarding
	}
	return 0
}

type WithdrawLiquidityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverAddr string  `protobuf:"bytes,1,opt,name=receiver_addr,json=receiverAddr,proto3" json:"receiver_addr,omitempty"`
	Amount       float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenAddr    string  `protobuf:"bytes,3,opt,name=token_addr,json=tokenAddr,proto3" json:"token_addr,omitempty"`
	ChainId      uint64  `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *WithdrawLiquidityRequest) Reset() {
	*x = WithdrawLiquidityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawLiquidityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawLiquidityRequest) ProtoMessage() {}

func (x *WithdrawLiquidityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawLiquidityRequest.ProtoReflect.Descriptor instead.
func (*WithdrawLiquidityRequest) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{18}
}

func (x *WithdrawLiquidityRequest) GetReceiverAddr() string {
	if x != nil {
		return x.ReceiverAddr
	}
	return ""
}

func (x *WithdrawLiquidityRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WithdrawLiquidityRequest) GetTokenAddr() string {
	if x != nil {
		return x.TokenAddr
	}
	return ""
}

func (x *WithdrawLiquidityRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type WithdrawLiquidityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err   *ErrMsg `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Nonce uint64  `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *WithdrawLiquidityResponse) Reset() {
	*x = WithdrawLiquidityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawLiquidityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawLiquidityResponse) ProtoMessage() {}

func (x *WithdrawLiquidityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawLiquidityResponse.ProtoReflect.Descriptor instead.
func (*WithdrawLiquidityResponse) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{19}
}

func (x *WithdrawLiquidityResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *WithdrawLiquidityResponse) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type TransferHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId      string                `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	SrcSendInfo     *TransferInfo         `protobuf:"bytes,2,opt,name=src_send_info,json=srcSendInfo,proto3" json:"src_send_info,omitempty"`
	DstReceivedInfo *TransferInfo         `protobuf:"bytes,3,opt,name=dst_received_info,json=dstReceivedInfo,proto3" json:"dst_received_info,omitempty"`
	Ts              uint64                `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	SrcBlockTxLink  string                `protobuf:"bytes,5,opt,name=src_block_tx_link,json=srcBlockTxLink,proto3" json:"src_block_tx_link,omitempty"`
	DstBlockTxLink  string                `protobuf:"bytes,6,opt,name=dst_block_tx_link,json=dstBlockTxLink,proto3" json:"dst_block_tx_link,omitempty"`
	Status          TransferHistoryStatus `protobuf:"varint,7,opt,name=status,proto3,enum=sgn.cbridge.v1.TransferHistoryStatus" json:"status,omitempty"`
}

func (x *TransferHistory) Reset() {
	*x = TransferHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferHistory) ProtoMessage() {}

func (x *TransferHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferHistory.ProtoReflect.Descriptor instead.
func (*TransferHistory) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{20}
}

func (x *TransferHistory) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *TransferHistory) GetSrcSendInfo() *TransferInfo {
	if x != nil {
		return x.SrcSendInfo
	}
	return nil
}

func (x *TransferHistory) GetDstReceivedInfo() *TransferInfo {
	if x != nil {
		return x.DstReceivedInfo
	}
	return nil
}

func (x *TransferHistory) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *TransferHistory) GetSrcBlockTxLink() string {
	if x != nil {
		return x.SrcBlockTxLink
	}
	return ""
}

func (x *TransferHistory) GetDstBlockTxLink() string {
	if x != nil {
		return x.DstBlockTxLink
	}
	return ""
}

func (x *TransferHistory) GetStatus() TransferHistoryStatus {
	if x != nil {
		return x.Status
	}
	return TransferHistoryStatus_TRANSFER_UNKNOWN
}

type LPHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain       *Chain          `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Token       *TokenInfo      `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Amount      float64         `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Ts          uint64          `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockTxLink string          `protobuf:"bytes,5,opt,name=block_tx_link,json=blockTxLink,proto3" json:"block_tx_link,omitempty"`
	Status      LPHistoryStatus `protobuf:"varint,6,opt,name=status,proto3,enum=sgn.cbridge.v1.LPHistoryStatus" json:"status,omitempty"`
	Type        LPType          `protobuf:"varint,7,opt,name=type,proto3,enum=sgn.cbridge.v1.LPType" json:"type,omitempty"`
}

func (x *LPHistory) Reset() {
	*x = LPHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LPHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPHistory) ProtoMessage() {}

func (x *LPHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPHistory.ProtoReflect.Descriptor instead.
func (*LPHistory) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{21}
}

func (x *LPHistory) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *LPHistory) GetToken() *TokenInfo {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LPHistory) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LPHistory) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *LPHistory) GetBlockTxLink() string {
	if x != nil {
		return x.BlockTxLink
	}
	return ""
}

func (x *LPHistory) GetStatus() LPHistoryStatus {
	if x != nil {
		return x.Status
	}
	return LPHistoryStatus_LP_UNKNOWN
}

func (x *LPHistory) GetType() LPType {
	if x != nil {
		return x.Type
	}
	return LPType_LP_TYPE_UNKNOWN
}

type TransferHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	BeginTime     uint64 `protobuf:"varint,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime       uint64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *TransferHistoryRequest) Reset() {
	*x = TransferHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferHistoryRequest) ProtoMessage() {}

func (x *TransferHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferHistoryRequest.ProtoReflect.Descriptor instead.
func (*TransferHistoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{22}
}

func (x *TransferHistoryRequest) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *TransferHistoryRequest) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *TransferHistoryRequest) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type TransferHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err     *ErrMsg            `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	History []*TransferHistory `protobuf:"bytes,2,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *TransferHistoryResponse) Reset() {
	*x = TransferHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferHistoryResponse) ProtoMessage() {}

func (x *TransferHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferHistoryResponse.ProtoReflect.Descriptor instead.
func (*TransferHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{23}
}

func (x *TransferHistoryResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *TransferHistoryResponse) GetHistory() []*TransferHistory {
	if x != nil {
		return x.History
	}
	return nil
}

type LPHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	BeginTime     uint64 `protobuf:"varint,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime       uint64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *LPHistoryRequest) Reset() {
	*x = LPHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LPHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPHistoryRequest) ProtoMessage() {}

func (x *LPHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPHistoryRequest.ProtoReflect.Descriptor instead.
func (*LPHistoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{24}
}

func (x *LPHistoryRequest) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *LPHistoryRequest) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *LPHistoryRequest) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type LPHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err     *ErrMsg      `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	History []*LPHistory `protobuf:"bytes,2,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *LPHistoryResponse) Reset() {
	*x = LPHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LPHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPHistoryResponse) ProtoMessage() {}

func (x *LPHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPHistoryResponse.ProtoReflect.Descriptor instead.
func (*LPHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{25}
}

func (x *LPHistoryResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *LPHistoryResponse) GetHistory() []*LPHistory {
	if x != nil {
		return x.History
	}
	return nil
}

type ErrMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ErrCode `protobuf:"varint,1,opt,name=code,proto3,enum=sgn.cbridge.v1.ErrCode" json:"code,omitempty"`
	Msg  string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ErrMsg) Reset() {
	*x = ErrMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrMsg) ProtoMessage() {}

func (x *ErrMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrMsg.ProtoReflect.Descriptor instead.
func (*ErrMsg) Descriptor() ([]byte, []int) {
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP(), []int{26}
}

func (x *ErrMsg) GetCode() ErrCode {
	if x != nil {
		return x.Code
	}
	return ErrCode_ERROR_CODE_UNDEFINED
}

func (x *ErrMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_proto_sgn_cbridge_v1_gateway_proto protoreflect.FileDescriptor

var file_proto_sgn_cbridge_v1_gateway_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x67, 0x6e, 0x2f, 0x63, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x53, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x22, 0x60, 0x0a, 0x09, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x80, 0x01,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x67, 0x6e,
	0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x5b, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x6c, 0x69, 0x70,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x43, 0x0a,
	0x17, 0x53, 0x65, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xb1, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x67,
	0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73,
	0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x5d, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x41, 0x6d, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x6d, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x6d, 0x74, 0x22,
	0xd3, 0x01, 0x0a, 0x13, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x6d, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x67, 0x6e,
	0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x53, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x15, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x12, 0x64, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x2a, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4c, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x81, 0x02, 0x0a, 0x06, 0x4c, 0x50,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x76,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x76, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x6c,
	0x70, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x70, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x70, 0x79, 0x22, 0x72, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4c, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x12, 0x2f, 0x0a, 0x07, 0x6c, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x22, 0xea, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x61,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e,
	0x0a, 0x1b, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x19, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x46, 0x61,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x91,
	0x01, 0x0a, 0x18, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x22, 0x5b, 0x0a, 0x19, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22,
	0xe3, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x67,
	0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x53, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x64, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73,
	0x12, 0x29, 0x0a, 0x11, 0x73, 0x72, 0x63, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x78,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x72, 0x63,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x29, 0x0a, 0x11, 0x64,
	0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x78, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x09, 0x4c, 0x50, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x37, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x7a, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7e,
	0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x74,
	0x0a, 0x10, 0x4c, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x11, 0x4c, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x47, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x2a, 0xb8, 0x02, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x25, 0x0a, 0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4c,
	0x45, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x45,
	0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x52, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x52, 0x45, 0x46,
	0x55, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x09, 0x2a, 0x84, 0x01, 0x0a,
	0x0f, 0x4c, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x4c, 0x50, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x53, 0x47, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x50, 0x5f, 0x57,
	0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4c, 0x50, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x05, 0x2a, 0x42, 0x0a, 0x06, 0x4c, 0x50, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x23, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x32, 0xa4, 0x09, 0x0a,
	0x03, 0x57, 0x65, 0x62, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x29, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x67,
	0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22,
	0x16, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x72, 0x0a, 0x0b, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x74, 0x12, 0x22, 0x2e, 0x73, 0x67, 0x6e, 0x2e,
	0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x41, 0x6d, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x8a,
	0x01, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x28, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4c, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x73,
	0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x4c, 0x50, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x28, 0x2e, 0x73,
	0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x4c, 0x50, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x28, 0x2e, 0x73, 0x67,
	0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x3a,
	0x01, 0x2a, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22,
	0x13, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x09, 0x4c, 0x50, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x67, 0x6e, 0x2e, 0x63, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x3a, 0x01, 0x2a, 0x42, 0x10, 0x5a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x77,
	0x65, 0x62, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_sgn_cbridge_v1_gateway_proto_rawDescOnce sync.Once
	file_proto_sgn_cbridge_v1_gateway_proto_rawDescData = file_proto_sgn_cbridge_v1_gateway_proto_rawDesc
)

func file_proto_sgn_cbridge_v1_gateway_proto_rawDescGZIP() []byte {
	file_proto_sgn_cbridge_v1_gateway_proto_rawDescOnce.Do(func() {
		file_proto_sgn_cbridge_v1_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_sgn_cbridge_v1_gateway_proto_rawDescData)
	})
	return file_proto_sgn_cbridge_v1_gateway_proto_rawDescData
}

var file_proto_sgn_cbridge_v1_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_sgn_cbridge_v1_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_proto_sgn_cbridge_v1_gateway_proto_goTypes = []interface{}{
	(TransferHistoryStatus)(0),         // 0: sgn.cbridge.v1.TransferHistoryStatus
	(LPHistoryStatus)(0),               // 1: sgn.cbridge.v1.LPHistoryStatus
	(LPType)(0),                        // 2: sgn.cbridge.v1.LPType
	(ErrCode)(0),                       // 3: sgn.cbridge.v1.ErrCode
	(*Chain)(nil),                      // 4: sgn.cbridge.v1.Chain
	(*ChainTokenInfo)(nil),             // 5: sgn.cbridge.v1.ChainTokenInfo
	(*Token)(nil),                      // 6: sgn.cbridge.v1.Token
	(*TokenInfo)(nil),                  // 7: sgn.cbridge.v1.TokenInfo
	(*TransferInfo)(nil),               // 8: sgn.cbridge.v1.TransferInfo
	(*SetAdvancedInfoRequest)(nil),     // 9: sgn.cbridge.v1.SetAdvancedInfoRequest
	(*SetAdvancedInfoResponse)(nil),    // 10: sgn.cbridge.v1.SetAdvancedInfoResponse
	(*GetTransferConfigsRequest)(nil),  // 11: sgn.cbridge.v1.GetTransferConfigsRequest
	(*GetTransferConfigsResponse)(nil), // 12: sgn.cbridge.v1.GetTransferConfigsResponse
	(*EstimateAmtRequest)(nil),         // 13: sgn.cbridge.v1.EstimateAmtRequest
	(*EstimateAmtResponse)(nil),        // 14: sgn.cbridge.v1.EstimateAmtResponse
	(*MarkTransferBeginRequest)(nil),   // 15: sgn.cbridge.v1.MarkTransferBeginRequest
	(*MarkTransferBeginResponse)(nil),  // 16: sgn.cbridge.v1.MarkTransferBeginResponse
	(*GetLPInfoListRequest)(nil),       // 17: sgn.cbridge.v1.GetLPInfoListRequest
	(*LPInfo)(nil),                     // 18: sgn.cbridge.v1.LPInfo
	(*GetLPInfoListResponse)(nil),      // 19: sgn.cbridge.v1.GetLPInfoListResponse
	(*GetTotalLiquidityRequest)(nil),   // 20: sgn.cbridge.v1.GetTotalLiquidityRequest
	(*GetTotalLiquidityResponse)(nil),  // 21: sgn.cbridge.v1.GetTotalLiquidityResponse
	(*WithdrawLiquidityRequest)(nil),   // 22: sgn.cbridge.v1.WithdrawLiquidityRequest
	(*WithdrawLiquidityResponse)(nil),  // 23: sgn.cbridge.v1.WithdrawLiquidityResponse
	(*TransferHistory)(nil),            // 24: sgn.cbridge.v1.TransferHistory
	(*LPHistory)(nil),                  // 25: sgn.cbridge.v1.LPHistory
	(*TransferHistoryRequest)(nil),     // 26: sgn.cbridge.v1.TransferHistoryRequest
	(*TransferHistoryResponse)(nil),    // 27: sgn.cbridge.v1.TransferHistoryResponse
	(*LPHistoryRequest)(nil),           // 28: sgn.cbridge.v1.LPHistoryRequest
	(*LPHistoryResponse)(nil),          // 29: sgn.cbridge.v1.LPHistoryResponse
	(*ErrMsg)(nil),                     // 30: sgn.cbridge.v1.ErrMsg
	nil,                                // 31: sgn.cbridge.v1.GetTransferConfigsResponse.ChainTokenEntry
}
var file_proto_sgn_cbridge_v1_gateway_proto_depIdxs = []int32{
	7,  // 0: sgn.cbridge.v1.ChainTokenInfo.token:type_name -> sgn.cbridge.v1.TokenInfo
	6,  // 1: sgn.cbridge.v1.TokenInfo.token:type_name -> sgn.cbridge.v1.Token
	4,  // 2: sgn.cbridge.v1.TransferInfo.chain:type_name -> sgn.cbridge.v1.Chain
	6,  // 3: sgn.cbridge.v1.TransferInfo.token:type_name -> sgn.cbridge.v1.Token
	30, // 4: sgn.cbridge.v1.SetAdvancedInfoResponse.err:type_name -> sgn.cbridge.v1.ErrMsg
	30, // 5: sgn.cbridge.v1.GetTransferConfigsResponse.err:type_name -> sgn.cbridge.v1.ErrMsg
	4,  // 6: sgn.cbridge.v1.GetTransferConfigsResponse.chains:type_name -> sgn.cbridge.v1.Chain
	31, // 7: sgn.cbridge.v1.GetTransferConfigsResponse.chain_token:type_name -> sgn.cbridge.v1.GetTransferConfigsResponse.ChainTokenEntry
	30, // 8: sgn.cbridge.v1.EstimateAmtResponse.err:type_name -> sgn.cbridge.v1.ErrMsg
	8,  // 9: sgn.cbridge.v1.MarkTransferBeginRequest.src_send_info:type_name -> sgn.cbridge.v1.TransferInfo
	8,  // 10: sgn.cbridge.v1.MarkTransferBeginRequest.dst_min_received_info:type_name -> sgn.cbridge.v1.TransferInfo
	30, // 11: sgn.cbridge.v1.MarkTransferBeginResponse.err:type_name -> sgn.cbridge.v1.ErrMsg
	4,  // 12: sgn.cbridge.v1.LPInfo.chain:type_name -> sgn.cbridge.v1.Chain
	7,  // 13: sgn.cbridge.v1.LPInfo.token:type_name -> sgn.cbridge.v1.TokenInfo
	30, // 14: sgn.cbridge.v1.GetLPInfoListResponse.err:type_name -> sgn.cbridge.v1.ErrMsg
	18, // 15: sgn.cbridge.v1.GetLPInfoListResponse.lp_info:type_name -> sgn.cbridge.v1.LPInfo
	30, // 16: sgn.cbridge.v1.GetTotalLiquidityResponse.err:type_name -> sgn.cbridge.v1.ErrMsg
	30, // 17: sgn.cbridge.v1.WithdrawLiquidityResponse.err:type_name -> sgn.cbridge.v1.ErrMsg
	8,  // 18: sgn.cbridge.v1.TransferHistory.src_send_info:type_name -> sgn.cbridge.v1.TransferInfo
	8,  // 19: sgn.cbridge.v1.TransferHistory.dst_received_info:type_name -> sgn.cbridge.v1.TransferInfo
	0,  // 20: sgn.cbridge.v1.TransferHistory.status:type_name -> sgn.cbridge.v1.TransferHistoryStatus
	4,  // 21: sgn.cbridge.v1.LPHistory.chain:type_name -> sgn.cbridge.v1.Chain
	7,  // 22: sgn.cbridge.v1.LPHistory.token:type_name -> sgn.cbridge.v1.TokenInfo
	1,  // 23: sgn.cbridge.v1.LPHistory.status:type_name -> sgn.cbridge.v1.LPHistoryStatus
	2,  // 24: sgn.cbridge.v1.LPHistory.type:type_name -> sgn.cbridge.v1.LPType
	30, // 25: sgn.cbridge.v1.TransferHistoryResponse.err:type_name -> sgn.cbridge.v1.ErrMsg
	24, // 26: sgn.cbridge.v1.TransferHistoryResponse.history:type_name -> sgn.cbridge.v1.TransferHistory
	30, // 27: sgn.cbridge.v1.LPHistoryResponse.err:type_name -> sgn.cbridge.v1.ErrMsg
	25, // 28: sgn.cbridge.v1.LPHistoryResponse.history:type_name -> sgn.cbridge.v1.LPHistory
	3,  // 29: sgn.cbridge.v1.ErrMsg.code:type_name -> sgn.cbridge.v1.ErrCode
	5,  // 30: sgn.cbridge.v1.GetTransferConfigsResponse.ChainTokenEntry.value:type_name -> sgn.cbridge.v1.ChainTokenInfo
	9,  // 31: sgn.cbridge.v1.Web.SetAdvancedInfo:input_type -> sgn.cbridge.v1.SetAdvancedInfoRequest
	11, // 32: sgn.cbridge.v1.Web.GetTransferConfigs:input_type -> sgn.cbridge.v1.GetTransferConfigsRequest
	13, // 33: sgn.cbridge.v1.Web.EstimateAmt:input_type -> sgn.cbridge.v1.EstimateAmtRequest
	15, // 34: sgn.cbridge.v1.Web.MarkTransferBegin:input_type -> sgn.cbridge.v1.MarkTransferBeginRequest
	17, // 35: sgn.cbridge.v1.Web.GetLPInfoList:input_type -> sgn.cbridge.v1.GetLPInfoListRequest
	20, // 36: sgn.cbridge.v1.Web.GetTotalLiquidity:input_type -> sgn.cbridge.v1.GetTotalLiquidityRequest
	22, // 37: sgn.cbridge.v1.Web.WithdrawLiquidity:input_type -> sgn.cbridge.v1.WithdrawLiquidityRequest
	26, // 38: sgn.cbridge.v1.Web.TransferHistory:input_type -> sgn.cbridge.v1.TransferHistoryRequest
	28, // 39: sgn.cbridge.v1.Web.LPHistory:input_type -> sgn.cbridge.v1.LPHistoryRequest
	10, // 40: sgn.cbridge.v1.Web.SetAdvancedInfo:output_type -> sgn.cbridge.v1.SetAdvancedInfoResponse
	12, // 41: sgn.cbridge.v1.Web.GetTransferConfigs:output_type -> sgn.cbridge.v1.GetTransferConfigsResponse
	14, // 42: sgn.cbridge.v1.Web.EstimateAmt:output_type -> sgn.cbridge.v1.EstimateAmtResponse
	16, // 43: sgn.cbridge.v1.Web.MarkTransferBegin:output_type -> sgn.cbridge.v1.MarkTransferBeginResponse
	19, // 44: sgn.cbridge.v1.Web.GetLPInfoList:output_type -> sgn.cbridge.v1.GetLPInfoListResponse
	21, // 45: sgn.cbridge.v1.Web.GetTotalLiquidity:output_type -> sgn.cbridge.v1.GetTotalLiquidityResponse
	23, // 46: sgn.cbridge.v1.Web.WithdrawLiquidity:output_type -> sgn.cbridge.v1.WithdrawLiquidityResponse
	27, // 47: sgn.cbridge.v1.Web.TransferHistory:output_type -> sgn.cbridge.v1.TransferHistoryResponse
	29, // 48: sgn.cbridge.v1.Web.LPHistory:output_type -> sgn.cbridge.v1.LPHistoryResponse
	40, // [40:49] is the sub-list for method output_type
	31, // [31:40] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_proto_sgn_cbridge_v1_gateway_proto_init() }
func file_proto_sgn_cbridge_v1_gateway_proto_init() {
	if File_proto_sgn_cbridge_v1_gateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAdvancedInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAdvancedInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateAmtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateAmtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTransferBeginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTransferBeginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLPInfoListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLPInfoListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalLiquidityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalLiquidityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawLiquidityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawLiquidityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LPHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LPHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LPHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sgn_cbridge_v1_gateway_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_sgn_cbridge_v1_gateway_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_sgn_cbridge_v1_gateway_proto_goTypes,
		DependencyIndexes: file_proto_sgn_cbridge_v1_gateway_proto_depIdxs,
		EnumInfos:         file_proto_sgn_cbridge_v1_gateway_proto_enumTypes,
		MessageInfos:      file_proto_sgn_cbridge_v1_gateway_proto_msgTypes,
	}.Build()
	File_proto_sgn_cbridge_v1_gateway_proto = out.File
	file_proto_sgn_cbridge_v1_gateway_proto_rawDesc = nil
	file_proto_sgn_cbridge_v1_gateway_proto_goTypes = nil
	file_proto_sgn_cbridge_v1_gateway_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebClient interface {
	// transfer
	SetAdvancedInfo(ctx context.Context, in *SetAdvancedInfoRequest, opts ...grpc.CallOption) (*SetAdvancedInfoResponse, error)
	GetTransferConfigs(ctx context.Context, in *GetTransferConfigsRequest, opts ...grpc.CallOption) (*GetTransferConfigsResponse, error)
	EstimateAmt(ctx context.Context, in *EstimateAmtRequest, opts ...grpc.CallOption) (*EstimateAmtResponse, error)
	MarkTransferBegin(ctx context.Context, in *MarkTransferBeginRequest, opts ...grpc.CallOption) (*MarkTransferBeginResponse, error)
	//LP
	GetLPInfoList(ctx context.Context, in *GetLPInfoListRequest, opts ...grpc.CallOption) (*GetLPInfoListResponse, error)
	GetTotalLiquidity(ctx context.Context, in *GetTotalLiquidityRequest, opts ...grpc.CallOption) (*GetTotalLiquidityResponse, error)
	// for refund failed user transfer and LP remove liquidity
	WithdrawLiquidity(ctx context.Context, in *WithdrawLiquidityRequest, opts ...grpc.CallOption) (*WithdrawLiquidityResponse, error)
	//History
	TransferHistory(ctx context.Context, in *TransferHistoryRequest, opts ...grpc.CallOption) (*TransferHistoryResponse, error)
	LPHistory(ctx context.Context, in *LPHistoryRequest, opts ...grpc.CallOption) (*LPHistoryResponse, error)
}

type webClient struct {
	cc grpc.ClientConnInterface
}

func NewWebClient(cc grpc.ClientConnInterface) WebClient {
	return &webClient{cc}
}

func (c *webClient) SetAdvancedInfo(ctx context.Context, in *SetAdvancedInfoRequest, opts ...grpc.CallOption) (*SetAdvancedInfoResponse, error) {
	out := new(SetAdvancedInfoResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Web/SetAdvancedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetTransferConfigs(ctx context.Context, in *GetTransferConfigsRequest, opts ...grpc.CallOption) (*GetTransferConfigsResponse, error) {
	out := new(GetTransferConfigsResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Web/GetTransferConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) EstimateAmt(ctx context.Context, in *EstimateAmtRequest, opts ...grpc.CallOption) (*EstimateAmtResponse, error) {
	out := new(EstimateAmtResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Web/EstimateAmt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) MarkTransferBegin(ctx context.Context, in *MarkTransferBeginRequest, opts ...grpc.CallOption) (*MarkTransferBeginResponse, error) {
	out := new(MarkTransferBeginResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Web/MarkTransferBegin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetLPInfoList(ctx context.Context, in *GetLPInfoListRequest, opts ...grpc.CallOption) (*GetLPInfoListResponse, error) {
	out := new(GetLPInfoListResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Web/GetLPInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) GetTotalLiquidity(ctx context.Context, in *GetTotalLiquidityRequest, opts ...grpc.CallOption) (*GetTotalLiquidityResponse, error) {
	out := new(GetTotalLiquidityResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Web/GetTotalLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) WithdrawLiquidity(ctx context.Context, in *WithdrawLiquidityRequest, opts ...grpc.CallOption) (*WithdrawLiquidityResponse, error) {
	out := new(WithdrawLiquidityResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Web/WithdrawLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) TransferHistory(ctx context.Context, in *TransferHistoryRequest, opts ...grpc.CallOption) (*TransferHistoryResponse, error) {
	out := new(TransferHistoryResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Web/TransferHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) LPHistory(ctx context.Context, in *LPHistoryRequest, opts ...grpc.CallOption) (*LPHistoryResponse, error) {
	out := new(LPHistoryResponse)
	err := c.cc.Invoke(ctx, "/sgn.cbridge.v1.Web/LPHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServer is the server API for Web service.
type WebServer interface {
	// transfer
	SetAdvancedInfo(context.Context, *SetAdvancedInfoRequest) (*SetAdvancedInfoResponse, error)
	GetTransferConfigs(context.Context, *GetTransferConfigsRequest) (*GetTransferConfigsResponse, error)
	EstimateAmt(context.Context, *EstimateAmtRequest) (*EstimateAmtResponse, error)
	MarkTransferBegin(context.Context, *MarkTransferBeginRequest) (*MarkTransferBeginResponse, error)
	//LP
	GetLPInfoList(context.Context, *GetLPInfoListRequest) (*GetLPInfoListResponse, error)
	GetTotalLiquidity(context.Context, *GetTotalLiquidityRequest) (*GetTotalLiquidityResponse, error)
	// for refund failed user transfer and LP remove liquidity
	WithdrawLiquidity(context.Context, *WithdrawLiquidityRequest) (*WithdrawLiquidityResponse, error)
	//History
	TransferHistory(context.Context, *TransferHistoryRequest) (*TransferHistoryResponse, error)
	LPHistory(context.Context, *LPHistoryRequest) (*LPHistoryResponse, error)
}

// UnimplementedWebServer can be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (*UnimplementedWebServer) SetAdvancedInfo(context.Context, *SetAdvancedInfoRequest) (*SetAdvancedInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAdvancedInfo not implemented")
}
func (*UnimplementedWebServer) GetTransferConfigs(context.Context, *GetTransferConfigsRequest) (*GetTransferConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferConfigs not implemented")
}
func (*UnimplementedWebServer) EstimateAmt(context.Context, *EstimateAmtRequest) (*EstimateAmtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateAmt not implemented")
}
func (*UnimplementedWebServer) MarkTransferBegin(context.Context, *MarkTransferBeginRequest) (*MarkTransferBeginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTransferBegin not implemented")
}
func (*UnimplementedWebServer) GetLPInfoList(context.Context, *GetLPInfoListRequest) (*GetLPInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLPInfoList not implemented")
}
func (*UnimplementedWebServer) GetTotalLiquidity(context.Context, *GetTotalLiquidityRequest) (*GetTotalLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalLiquidity not implemented")
}
func (*UnimplementedWebServer) WithdrawLiquidity(context.Context, *WithdrawLiquidityRequest) (*WithdrawLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawLiquidity not implemented")
}
func (*UnimplementedWebServer) TransferHistory(context.Context, *TransferHistoryRequest) (*TransferHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferHistory not implemented")
}
func (*UnimplementedWebServer) LPHistory(context.Context, *LPHistoryRequest) (*LPHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPHistory not implemented")
}

func RegisterWebServer(s *grpc.Server, srv WebServer) {
	s.RegisterService(&_Web_serviceDesc, srv)
}

func _Web_SetAdvancedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAdvancedInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).SetAdvancedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Web/SetAdvancedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).SetAdvancedInfo(ctx, req.(*SetAdvancedInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetTransferConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetTransferConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Web/GetTransferConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetTransferConfigs(ctx, req.(*GetTransferConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_EstimateAmt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateAmtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).EstimateAmt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Web/EstimateAmt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).EstimateAmt(ctx, req.(*EstimateAmtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_MarkTransferBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkTransferBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).MarkTransferBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Web/MarkTransferBegin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).MarkTransferBegin(ctx, req.(*MarkTransferBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetLPInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLPInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetLPInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Web/GetLPInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetLPInfoList(ctx, req.(*GetLPInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_GetTotalLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetTotalLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Web/GetTotalLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetTotalLiquidity(ctx, req.(*GetTotalLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_WithdrawLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).WithdrawLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Web/WithdrawLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).WithdrawLiquidity(ctx, req.(*WithdrawLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_TransferHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).TransferHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Web/TransferHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).TransferHistory(ctx, req.(*TransferHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_LPHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).LPHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgn.cbridge.v1.Web/LPHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).LPHistory(ctx, req.(*LPHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Web_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgn.cbridge.v1.Web",
	HandlerType: (*WebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAdvancedInfo",
			Handler:    _Web_SetAdvancedInfo_Handler,
		},
		{
			MethodName: "GetTransferConfigs",
			Handler:    _Web_GetTransferConfigs_Handler,
		},
		{
			MethodName: "EstimateAmt",
			Handler:    _Web_EstimateAmt_Handler,
		},
		{
			MethodName: "MarkTransferBegin",
			Handler:    _Web_MarkTransferBegin_Handler,
		},
		{
			MethodName: "GetLPInfoList",
			Handler:    _Web_GetLPInfoList_Handler,
		},
		{
			MethodName: "GetTotalLiquidity",
			Handler:    _Web_GetTotalLiquidity_Handler,
		},
		{
			MethodName: "WithdrawLiquidity",
			Handler:    _Web_WithdrawLiquidity_Handler,
		},
		{
			MethodName: "TransferHistory",
			Handler:    _Web_TransferHistory_Handler,
		},
		{
			MethodName: "LPHistory",
			Handler:    _Web_LPHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sgn/cbridge/v1/gateway.proto",
}
